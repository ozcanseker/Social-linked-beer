{"version":3,"sources":["assets/profilePic.png","assets/Knipsel.png","assets/logo.png","../node_modules/@trust/webcrypto/src/algorithms sync","model/HolderComponents/Observable.js","model/HolderComponents/CheckIn.js","solid/rdf/Constants.js","solid/rdf/Prefixes.js","solid/SolidMethods.js","solid/rdf/SolidTtlTemplates.js","solid/solidCommunicatorInits/PodFolderBuilder.js","error/AccessError.js","solid/solidCommunicatorInits/AccessChecker.js","model/HolderComponents/CheckInHandler.js","model/HolderComponents/Friend.js","model/HolderComponents/Group.js","solid/solidCommunicatorInits/SolidCommunicatorBuilder.js","solid/solidCommunicatorInits/PreApplicationHandelings.js","model/HolderComponents/Beer.js","model/HolderComponents/InboxMessage.js","solid/SolidCommunicator.js","component/NavBar.js","routes/page/Home.js","routes/page/LogIn.js","component/GroupMakerOverlay.js","routes/page/Groups.js","routes/page/Friends.js","component/BeerCheckInComponent.js","routes/page/FriendPage.js","routes/page/CheckIns.js","routes/page/BeerResults.js","routes/page/Profile.js","routes/page/User.js","routes/page/Inbox.js","component/BeerCheckInOverlay.js","model/HolderComponents/Brewer.js","routes/page/BeerDetailScreen.js","routes/page/BrewerPage.js","routes/page/GroupDetail.js","routes/AppRoutes.js","routes/extrapage/AclErrorPage.js","routes/extrapage/FetchingPage.js","model/HolderComponents/User.js","model/ModelHolder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Observable","this","_subscribers","map","subscriber","update","push","filter","subscriberList","CheckIn","fileLocation","_fileLocation","userWebId","userName","beerLocation","beerName","checkInTime","rating","review","_type","_userWebId","_userName","_beerLocation","_beerName","_checkInTime","_rating","_review","updateSubscribers","APPLICATION_NAME_PTI","APPFOLDER_NAME","CHECKIN_FOLDER","BEERDRINKERFOLDER","CONTENT_TYPE_TURTLE","INBOX_FOLDER","APPDATA_FILE","FRIENDS_FILE","APPDATA_FILENAME","FRIENDS_FILENAME","FRIENDSGROUPNAME","FRIENDSSENTGROUPNAME","GROUPFOLDER","GROUP_MEMBERS","GROUP_DATA_FILE","CHECKIN_INDEX_FILE","BEERREVIEWFILENAME","FRIENDSHIPREQUEST_ACCEPTED_NAME","rdfLib","require","SOLID","Namespace","PIM","VCARD","TERMS","RDF","SOLIDLINKEDBEER","FOAF","LDP","DBPEDIA","SCHEMA","ACL","fileClient","authClient","postSolidFile","folder","filename","body","a","fetch","method","headers","putSolidFile","url","getUserFile","userttt","graph","status","text","parse","any","undefined","profile","sym","publicProfileIndex","readFile","value","ppiTTL","ppigraph","app","appQuery","nameFN","imageURL","inbox","result","name","imageUrl","appLocation","loadFriendData","friend","getUri","userDetails","setUserDetails","friendAppdataLocation","then","friendsAppdata","blankNode","startdate","points","setAppData","Date","getCheckInHandler","setBeerPoints","getTenUserCheckIns","getBeerDrinkerFolder","res","setReviesCheckInsAndUserCheckIns","reviews","checkIns","userBeerCheckIns","beerDrinkerFolder","checkinLocation","readFolder","fileContents","files","reverse","i","length","loadValuesInCheckInFile","beerCheckIn","includes","getAllUserCheckIns","beerdrinkerFolder","getFileLocation","ttlFile","namedNode","webId","userId","beerlocation","beername","checkinTime","loadInAttributes","getInviteToLSBInvitation","urlInvitee","invitation","postLocation","add","getFriendShipRequest","getDeclineFriendshipRequest","from","getAcceptFriendshipRequest","description","getGroupInvitaion","groupUrl","groupName","beerCheckInTemplate","time","beerReviewInTemplate","getGroupAppDataTTL","urlFile","friends","leader","friendsgroup","forEach","getGroupAclTTL","groupLocation","groupAppDataLocation","groupAcl","webIdOwner","owner","ownerAgent","members","resource","getGroupCheckInsAclTTL","getGroupOtherPersonTTL","postlocation","getCheckInIndexBody","user","member","groupCheckInIndexAcl","buildFolders","storePublicProfileIndex","storagePublic","createAppNodeForPublicTypeIndex","applocation","makeAppFolderStructure","sleep","ms","Promise","setTimeout","checkFolderIntegrity","appfolder","groupFolder","groupFolderAcl","getAclGroupFolder","store","publicTypeIndex","publicLocation","findEmptyFolder","appLocationNN","rdflib","newTTLpublicTypeindex","makeRandomString","characters","charactersLength","charAt","Math","floor","random","appFolderUrl","aclUrl","getAclAppFolder","beerDrinkerUrl","getFriendsFile","friendsUrl","appDataFileAcl","appDataFile","getAppDataInit","getAclAppData","getACLInboxFolder","inboxUrl","inboxUrlacl","reviewUrlacl","reviewUrl","getACLSubmittersFriends","bn","appUrl","webIdUserLoggedIn","agent","friendsgroupRequested","_public","resourceUrl","group1","fgroup1","fgroup2","AccessError","args","message","checkacess","storeProfileCard","readAcess","match","Write","Append","Control","CheckInHandler","_checkInsAmount","_beerReviewsAmount","_beerPoints","_userCheckIns","_allCheckinsGotten","checkIn","subscribe","bool","amount","beerPoints","beerReviews","userCheckins","unsubscribe","concat","Friend","uri","_profileUri","_name","_imageUrl","_beerDrinkerFolder","_startDate","_checkInHandler","clearAll","pictureurl","getUserName","replace","getTime","Group","createdByMe","_url","_createdByMe","_groupLeader","_members","naam","checkInsLocation","groupDataLocation","groupCheckInIndex","groupLeader","groupMembers","_checkInsLocation","_groupDataLocation","_groupCheckInIndex","slice","buildSolidCommunicator","modelHolder","solidCommunicator","returnObject","getUser","checkInHandler","webIdNN","getUserCard","getPPILocation","ppiObject","getStorePublic","getApplicationLocation","ppi","applicationLocation","sc","getUserDetails","loadInUserValues","setFileLocations","getAppData","loadInAppData","parseInt","loadInAppStore","addUserCheckIns","setBeerReviewsAmount","setCheckInsAmount","getFriends","addFriends","loadInFriendsStore","group","sentGroup","friendsStore","getGroups","setGroups","groupsLocation","groups","myGroups","folders","friendsGroups","loadGroupInformation","loadFriendGroupData","getUrl","file","urlGroup","setUrl","groupCheckInsLocation","checkIndexLocation","groupDataGraph","hasMemberGroup","checkInIndex","checkInIndexGraph","pointsMemberGroup","each","setProperties","webIdUrl","profileCardTTl","storePublicTypeIndex","publicTypeIndexTTL","appdataLocation","appdatattl","friendsLocation","ttlFriends","query","index","friendGroup","friendsRequestedGroup","FriendsStore","inboxContent","acceptedRequests","checkAcceptedFriendShipRequests","declinedRequests","checkDeclinedFriendShipRequests","friendsGroup","friendsSent","friendGraph","filettl","removeMatches","addFriend","serialize","friendsTtl","deleteFile","Beer","type","style","brewer","location","_style","_brewer","_location","containers","_description","_containers","InboxMessage","_uri","_from","_desc","_groupName","desc","SolidCommunicator","_modelHolder","_user","_friendsStore","_friendGroup","_friendsRequestedGroup","preApplicationHandelings","_appStore","_blankNodeAppStore","_checkInFolder","_appStoreLocation","loadFileContents","setInboxMessages","fileTTL","blanknode","setContents","query1","query2","console","log","fileName","getName","invitationTTL","SolidTemplates","checkIfUserIsFriend","fileNameName","friendsFile","friendsTTL","getFrom","declineTTL","acceptedTTL","beersIndexTTl","beers","beer","beerTTl","container","updateInformation","hasReview","date","checkingFolder","beerpoints","getCheckInLocation","addBeerPoints","sendBeerPoints","addBeerReviewToAmount","addToCheckInsAmount","getGroupFromCheckInLocationUri","getGroupCheckInIndex","userNamedNode","BeerCheckIn","getUTCDate","beerPointsQueryNow","appTTL","brewerTTl","groep","opgericht","owners","provincie","email","taxid","telephone","beerIndex","blankNodeAdress","postalcode","streetaddress","addressregion","addresslocality","loadInBrewerInformation","fetchBeerData","addBeers","getAllCheckInsGotten","setUserCheckIns","setAllCheckInsGotten","beerdrinkerUrl","groupUrlAcl","appdataName","checkInsAcl","checkins","groupCheckInAclTtl","groupAclTtl","checkInsIndexAcl","checkInsIndex","checkInIndexBody","aclBody","addGroup","getFriendFromUri","folderLocation","getGroupName","getLocation","ownGroupBody","NavBar","onInput","props","onBeerSearch","target","input","cldn","React","Children","toArray","children","child","key","to","className","loggedIn","placeholder","searchQuery","onChange","onClick","onSearchBarButtonClick","Component","Home","src","Knipsel","alt","color","LogIn","onChangeCheckBox","setState","loginAsBrewer","state","onButtonClick","solidAuth","popupLogin","popupUri","currentSession","session","onLoggedIn","history","onRegisterClick","window","assign","typeLogIn","activeClass","join","GroupMakerOverlay","onDivClick","stopPropagation","onOverLayCancelClick","overlay","display","makeGroup","isMulti","options","valuesSelector","selectedFriends","onSelect","Groups","onMakeGroupClick","test","makeNewGroup","onSelectFriend","onGroupNameChange","friendsComs","label","getLeader","onAddReviewClick","addReview","checkInBeer","onPostBeerReview","Friends","inputText","toUpperCase","friendUri","friendUri2","friendUri3","friendUri4","pathname","error","friendsElements","BeerCheckInComponent","context","checkin","FriendPage","getFriendFromIndex","params","content","imgUrl","getImageUrl","userCheckIns","getUserCheckIns","getStartDate","profilePic","getCheckInsAmount","getBeerReviewsAmount","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","dateToString","getBeerPoints","getAllCheckIns","getAllCheckInsLoggedInUser","BeerResults","onLinkClick","setBeer","setBeers","elements","getBeers","listItem","Profile","getBeginDate","User","onNotJoinedButtonClick","inviteUserToSolib","clicked","sendFriendShipRequest","sendFriendshipRequest","button","disabled","Inbox","declineFriendShipRequest","spliceAtIndex","declineFriendSchipRequest","acceptFriendShipRequest","acceptFriendSchipRequest","declineGroupRequest","acceptGroupRequest","getInboxContents","items","getInboxMessages","buttonDiv","getType","getDesc","BeerCheckInOverlay","Rating","beerRating","precision","event","newValue","setBeerRating","beerReview","onBeerReviewChange","groupsOptions","selectedOptions","Brewer","_beers","taxID","postalCode","streetAddress","addressRegion","addressLocality","_groep","_opgericht","_owners","_provincie","_email","_taxid","_telephone","_postalcode","_streetAdress","_addressRegion","_addressLocality","BeerDetailScreen","postBeerReview","onCheckInClick","onSelectGroup","getBeer","setBrewer","getBrewer","fetchBeer","brewerName","BrewerPage","getBrewerInformation","section","getGroep","GroupDetail","getGroupFromIndex","getMembers","sort","b","Icon","AppRoutes","exact","path","component","isLoggedIn","UserPage","FriendsPage","clearSearchQuery","CheckIns","PrivateRoute","rest","render","PrivateRouteLogIn","withRouter","AclErrorPage","FetchingPage","_appFolder","_beerDrinkerFoler","appFolder","checkInFolder","startDate","ModelHolder","_friends","_slectedBeer","_groups","_inboxMessages","inboxMessages","splice","newFriends","newFriend","App","checkLoggedIn","fetchingFiles","setUri","build","accessError","onClickLogOut","logout","userObject","goBack","navBar","Logo","href","Boolean","hostname","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bc98f46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilePic.b6681619.png\";","module.exports = __webpack_public_path__ + \"static/media/Knipsel.4dafcfef.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.a311d3af.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 558;","class Observable {\r\n    constructor(){\r\n        this._subscribers = [];\r\n    }\r\n\r\n    updateSubscribers(){\r\n        this._subscribers.map(subscriber => subscriber.update());\r\n    }\r\n\r\n    subscribe(subscriber){\r\n        this._subscribers.push(subscriber);\r\n    }\r\n\r\n    unsubscribe(subscriber){\r\n        this._subscribers.filter(subscriberList  => {\r\n            return subscriberList !== subscriber;\r\n        });\r\n    }\r\n}\r\n\r\nexport default Observable;","import Observable from \"./Observable\";\r\n\r\nclass CheckIn extends Observable{\r\n    constructor(fileLocation){\r\n        super();\r\n        this._fileLocation = fileLocation;\r\n    }\r\n\r\n    getFileLocation(){\r\n        return this._fileLocation;\r\n    }\r\n\r\n    loadInAttributes(userWebId, userName, beerLocation, beerName, checkInTime, rating, review){\r\n        this._type  = rating? \"BeerReview\" : \"BeerCheckIn\";\r\n        this._userWebId = userWebId;\r\n        this._userName = userName;\r\n        this._beerLocation = beerLocation;\r\n        this._beerName = beerName;\r\n        this._checkInTime = checkInTime;\r\n        this._rating = rating;\r\n        this._review = review;\r\n\r\n        this.updateSubscribers();\r\n    }\r\n}\r\n\r\nexport default CheckIn;","/**\r\n * App folder names\r\n * @type {string}\r\n */\r\nexport const APPLICATION_NAME_PTI = \"SocialLinkedBeer\";\r\nexport const APPFOLDER_NAME = \"sociallinkedbeer\";\r\nexport const CHECKIN_FOLDER = \"checkins/\";\r\nexport const BEERDRINKERFOLDER = \"beerdrinker/\";\r\nexport const CONTENT_TYPE_TURTLE = \"text/turtle\";\r\nexport const INBOX_FOLDER = 'inbox/';\r\n\r\nexport const APPDATA_FILE = 'appdata.ttl';\r\nexport const FRIENDS_FILE = \"friends.ttl\";\r\nexport const APPDATA_FILENAME = 'appdata';\r\nexport const FRIENDS_FILENAME = \"friends\";\r\n\r\nexport const FRIENDSGROUPNAME = \"Friends\";\r\nexport const FRIENDSSENTGROUPNAME = \"FriendsRequested\";\r\n\r\nexport const GROUPFOLDER = \"groups/\";\r\nexport const GROUP_MEMBERS = \"Members\";\r\nexport const GROUP_DATA_FILENAME = \"groupdata\";\r\nexport const GROUP_DATA_FILE = \"groupdata.ttl\";\r\n\r\nexport const CHECKIN_INDEX_FILE = \"checkinIndex.ttl\";\r\nexport const CHECKIN_INDEX_NAME = \"checkinIndex\";\r\n\r\n/**\r\n * Text\r\n * @type {string}\r\n */\r\nexport const APPLICATION_INVITAION_NAME = \"Social_Linked_Beer_app_invitation_from_\";\r\nexport const APPLICATION_INVITAION_DESC = \" invites you to drink a beer with him on https://ozcanseker.github.io/Social-linked-beer/ .\";\r\n\r\nexport const BEERREVIEWFILENAME = \"_BeerReview\";\r\nexport const BEERCHECKINFILENAME = \"_BeerCheckIn\";\r\n\r\nexport const FRIENDSSHIPREQUEST_NAME = \"Social_Linked_Beer_friendshiprequest_from_\";\r\nexport const FRIENDSSHIPREQUEST_DESC = \" invites you to share your stories with him.\";\r\n\r\nexport const FRIENDSHIPREQUEST_ACCEPTED_NAME = \"Social_Linked_Beer_FriendschipRequestAccepted_from_\";\r\nexport const FRIENDSHIPREQUEST_ACCEPTED_DESC = \" accepted your friendship request.\";\r\n\r\nexport const FRIENDSHIPREQUEST_DECLINED_NAME = \"Social_Linked_Beer_FriendschipRequestDecline_from_\";\r\nexport const FRIENDSHIPREQUEST_DECLINED_DESC = \" declined your friendship request.\";\r\n\r\nexport const GROUPINVITATION_NAME = \"Social_Linked_Beer_groupInvitation_to_\";\r\nexport const GROUPINVITATION_DESC = \"Would you like to join us at \";\r\n\r\n","const rdfLib = require('rdflib');\r\n\r\nexport const SOLID = rdfLib.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\nexport const PIM = rdfLib.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\nexport const VCARD = rdfLib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nexport const TERMS = rdfLib.Namespace('http://purl.org/dc/terms/');\r\nexport const RDF = rdfLib.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nexport const SOLIDLINKEDBEER = rdfLib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nexport const FOAF = rdfLib.Namespace('http://xmlns.com/foaf/0.1/');\r\nexport const LDP = rdfLib.Namespace('http://www.w3.org/ns/ldp#');\r\nexport const DBPEDIA = rdfLib.Namespace('http://dbeerpedia.com/def#');\r\nexport const SCHEMA = rdfLib.Namespace('http://schema.org/');\r\nexport const ACL = rdfLib.Namespace(\"http://www.w3.org/ns/auth/acl#\");\r\n\r\n\r\n\r\n","import CheckIn from \"../model/HolderComponents/CheckIn\";\r\nimport {\r\n    APPDATA_FILE,\r\n    APPLICATION_NAME_PTI,\r\n    BEERDRINKERFOLDER,\r\n    BEERREVIEWFILENAME,\r\n    CHECKIN_FOLDER\r\n} from \"./rdf/Constants\";\r\nimport {FOAF, LDP, SOLID, SOLIDLINKEDBEER, VCARD} from \"./rdf/Prefixes\";\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst rdfLib = require('rdflib');\r\n\r\n/**\r\n * Post a solid file.\r\n * @param folder The folder you want the file to live in\r\n * @param filename\r\n * @param body (ttl file)\r\n * @returns {Promise<void>}\r\n */\r\nexport async function postSolidFile(folder, filename, body) {\r\n    authClient.fetch(folder, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'text/turtle',\r\n            'Link': '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"',\r\n            'SLUG': filename\r\n        },\r\n        body: body\r\n    });\r\n}\r\n\r\n/**\r\n * Put the solid file. Will replace the current file.\r\n * @param url The url of the location of the resource.\r\n * @param body The body you want it to replace with\r\n * @returns {Promise<void>} ?\r\n */\r\nexport async function putSolidFile(url, body) {\r\n    authClient.fetch(url, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'text/turtle'\r\n        },\r\n        body: body\r\n    });\r\n}\r\n\r\n/**\r\n * Allows you to append a solid file.\r\n * @param {*} url of the file you want to append\r\n * @param {*} body `INSERT DATA { <subject> <predicate> <object> }`\r\n */\r\nexport async function appendSolidResource(url, body) {\r\n    authClient.fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/sparql-update'\r\n        },\r\n        body: body\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n * @param url\r\n * @returns {Promise<{appLocation: (*), imageUrl: (*), name: (*), inbox: (*), url: *}>}\r\n */\r\nexport async function getUserFile(url) {\r\n    let inbox;\r\n\r\n    //get url resource\r\n    let userttt = await authClient.fetch(url);\r\n    let graph = rdfLib.graph();\r\n\r\n    if (userttt.status === 403) {\r\n        throw new Error(\"403: user unauthorized\");\r\n    } else if (userttt.status > 400) {\r\n        throw new Error(\"Something went wrong, check if the profile card is correct\");\r\n    }\r\n\r\n    userttt = await userttt.text();\r\n\r\n    try {\r\n        //parse to check if it is ttl\r\n        rdfLib.parse(userttt, graph, url, \"text/turtle\");\r\n    } catch (err) {\r\n        throw new Error(\"Not a correct profile linked data file\");\r\n    }\r\n\r\n    //check if it is a profile card\r\n    let query = graph.any(undefined, undefined, FOAF('PersonalProfileDocument'));\r\n\r\n    if (query) {\r\n        let profile = rdfLib.sym(url);\r\n\r\n        //check if user has ppi\r\n        const publicProfileIndex = graph.any(profile, SOLID(\"publicTypeIndex\"));\r\n\r\n        if (publicProfileIndex) {\r\n            let ppiTTL = await fileClient.readFile(publicProfileIndex.value);\r\n            let ppigraph = rdfLib.graph();\r\n            rdfLib.parse(ppiTTL, ppigraph, publicProfileIndex.value, \"text/turtle\");\r\n\r\n            let app = rdfLib.sym(publicProfileIndex.value + \"#\" + APPLICATION_NAME_PTI);\r\n            let appQuery = ppigraph.any(app, SOLID(\"instance\"));\r\n\r\n            //get name and Image\r\n            let nameFN = graph.any(profile, VCARD('fn'));\r\n            let imageURL = graph.any(profile, VCARD('hasPhoto'));\r\n\r\n            if (!appQuery) {\r\n                inbox = graph.any(profile, LDP('inbox'));\r\n            }\r\n\r\n            //applocation is not of beerdrinker\r\n            let result = {\r\n                url: url,\r\n                name: nameFN ? nameFN.value : undefined,\r\n                imageUrl: imageURL ? imageURL.value : undefined,\r\n                appLocation: appQuery ? appQuery.value : undefined,\r\n                inbox: inbox ? inbox.value : undefined\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            throw new Error(\"no ppi\");\r\n        }\r\n    } else {\r\n        throw new Error(\"not a profile card\");\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param friend\r\n */\r\nexport async function loadFriendData(friend) {\r\n    //getUserFile\r\n    let userDetails = await getUserFile(friend.getUri());\r\n    friend.setUserDetails(userDetails.name, userDetails.imageUrl, userDetails.appLocation + BEERDRINKERFOLDER);\r\n\r\n    //appdatafile\r\n    let friendAppdataLocation = userDetails.appLocation + BEERDRINKERFOLDER + APPDATA_FILE;\r\n\r\n    fileClient.readFile(friendAppdataLocation).then(friendsAppdata => {\r\n        let graph = rdfLib.graph();\r\n        rdfLib.parse(friendsAppdata, graph, friendAppdataLocation, \"text/turtle\");\r\n\r\n        let blankNode = graph.any(undefined, SOLIDLINKEDBEER('startdate'));\r\n\r\n        let startdate = graph.any(blankNode, SOLIDLINKEDBEER('startdate'));\r\n        let points = graph.any(blankNode, SOLIDLINKEDBEER('points'));\r\n\r\n        friend.setAppData(new Date(startdate.value));\r\n        friend.getCheckInHandler().setBeerPoints(points.value);\r\n    });\r\n\r\n    getTenUserCheckIns(friend.getBeerDrinkerFolder()).then(res => {\r\n        friend.getCheckInHandler().setReviesCheckInsAndUserCheckIns(res.reviews, res.checkIns, res.userBeerCheckIns)\r\n    });\r\n}\r\n\r\nexport async function getTenUserCheckIns(beerDrinkerFolder) {\r\n    let checkinLocation = beerDrinkerFolder + CHECKIN_FOLDER;\r\n    let fileContents = (await fileClient.readFolder(checkinLocation)).files.reverse();\r\n    let userBeerCheckIns = [];\r\n\r\n    let checkIns = 0;\r\n    let reviews = 0;\r\n\r\n    for (let i = 0; i < fileContents.length; i++) {\r\n        if (i < 10) {\r\n            let beerCheckIn = new CheckIn(fileContents[i].url);\r\n            loadValuesInCheckInFile(beerCheckIn);\r\n            userBeerCheckIns.push(beerCheckIn);\r\n        }\r\n\r\n        if (fileContents[i].url.includes(BEERREVIEWFILENAME)) {\r\n            reviews++;\r\n        } else {\r\n            checkIns++;\r\n        }\r\n\r\n    }\r\n\r\n    return {userBeerCheckIns: userBeerCheckIns, reviews: reviews, checkIns: checkIns};\r\n}\r\n\r\nexport async function getAllUserCheckIns(beerdrinkerFolder) {\r\n    let checkinLocation = beerdrinkerFolder + CHECKIN_FOLDER;\r\n    let fileContents = (await fileClient.readFolder(checkinLocation)).files.reverse();\r\n    let userBeerCheckIns = [];\r\n\r\n    let checkIns = 0;\r\n    let reviews = 0;\r\n\r\n    for (let i = 0; i < fileContents.length; i++) {\r\n        let beerCheckIn = new CheckIn(fileContents[i].url);\r\n        loadValuesInCheckInFile(beerCheckIn);\r\n        userBeerCheckIns.push(beerCheckIn);\r\n\r\n        if (fileContents[i].url.includes(BEERREVIEWFILENAME)) {\r\n            reviews++;\r\n        } else {\r\n            checkIns++;\r\n        }\r\n\r\n    }\r\n\r\n    return {userBeerCheckIns: userBeerCheckIns, reviews: reviews, checkIns: checkIns};\r\n}\r\n\r\nexport async function loadValuesInCheckInFile(beerCheckIn) {\r\n    fileClient.readFile(beerCheckIn.getFileLocation()).then(ttlFile => {\r\n        let graph = rdfLib.graph();\r\n        let namedNode = rdfLib.sym(beerCheckIn.getFileLocation());\r\n        rdfLib.parse(ttlFile, graph, beerCheckIn.getFileLocation(), \"text/turtle\");\r\n\r\n        let webId = graph.any(namedNode, SOLIDLINKEDBEER('webId'));\r\n        let userId = graph.any(namedNode, SOLIDLINKEDBEER('username'));\r\n        let beerlocation = graph.any(namedNode, SOLIDLINKEDBEER('beerLocation'));\r\n        let beername = graph.any(namedNode, SOLIDLINKEDBEER('beerName'));\r\n        let checkinTime = graph.any(namedNode, SOLIDLINKEDBEER('checkInTime'));\r\n        let rating = graph.any(namedNode, SOLIDLINKEDBEER('rating'));\r\n        let review = graph.any(namedNode, SOLIDLINKEDBEER('review'));\r\n\r\n        beerCheckIn.loadInAttributes(\r\n            webId.value,\r\n            userId ? userId.value : undefined,\r\n            beerlocation.value,\r\n            beername.value,\r\n            checkinTime.value,\r\n            rating ? rating.value : undefined,\r\n            review ? review.value : undefined\r\n        );\r\n    });\r\n}","import * as rdfLib from \"rdflib\";\r\nimport {ACL, RDF, SCHEMA, SOLID, SOLIDLINKEDBEER, VCARD} from \"./Prefixes\";\r\nimport {GROUP_MEMBERS} from \"./Constants\";\r\n\r\nexport function getInviteToLSBInvitation(urlInvitee, invitation, postLocation, userWebId){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('Invitation'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('invitationTo'), rdfLib.sym('https://ozcanseker.github.io/Social-linked-beer/'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(urlInvitee));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getFriendShipRequest(urlInvitee, invitation, postLocation, userWebId){\r\n    //make friendrequest\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('FriendshipRequest'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(urlInvitee));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getDeclineFriendshipRequest(from , invitation, postLocation, userWebId){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('FriendschipRequestDecline'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(from));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getAcceptFriendshipRequest(from, description , postLocation, userWebId){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('FriendschipRequestAccepted'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(from));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), description);\r\n\r\n    //make a text file and send\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getGroupInvitaion(urlInvitee, invitation, postLocation, userWebId, groupUrl, groupName){\r\n    //make friendrequest\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('GroupInvitation'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(urlInvitee));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n    graph.add(blankNode, SOLIDLINKEDBEER('location'), rdfLib.sym(groupUrl));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('groupName'), groupName);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} postLocation \r\n * @param {string} userName \r\n * @param {string} webId \r\n * @param {url to webresresource} beerLocation \r\n * @param {string} beerName \r\n * @param {Date} time \r\n */\r\nexport function beerCheckInTemplate(postLocation, userName, webId, beerLocation, beerName, time){\r\n    let graph = rdfLib.graph();\r\n    let namedNode = rdfLib.sym(postLocation);\r\n\r\n    graph.add(namedNode, RDF('type'), SOLIDLINKEDBEER('CheckIn'));\r\n    graph.add(namedNode, SOLIDLINKEDBEER('webId'), rdfLib.sym(webId));\r\n    if(userName){\r\n        graph.add(namedNode, SOLIDLINKEDBEER('username'), userName);\r\n    }\r\n    graph.add(namedNode, SOLIDLINKEDBEER('beerLocation'), rdfLib.sym(beerLocation));\r\n    graph.add(namedNode, SOLIDLINKEDBEER('beerName'), beerName);\r\n    graph.add(namedNode, SOLIDLINKEDBEER('checkInTime'), time);\r\n\r\n    // //make a text file and send\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function beerReviewInTemplate(postLocation, userName, webId, beerLocation, beerName, time, rating, review){\r\n    let graph = rdfLib.graph();\r\n    let namedNode = rdfLib.sym(postLocation);\r\n\r\n    graph.add(namedNode, RDF('type'), SOLIDLINKEDBEER('CheckReview'));\r\n    graph.add(namedNode, SOLIDLINKEDBEER('webId'), rdfLib.sym(webId));\r\n    if(userName){\r\n        graph.add(namedNode, SOLIDLINKEDBEER('username'), userName);\r\n    }\r\n    graph.add(namedNode, SOLIDLINKEDBEER('beerLocation'), rdfLib.sym(beerLocation));\r\n    graph.add(namedNode, SOLIDLINKEDBEER('beerName'), beerName);\r\n    graph.add(namedNode, SOLIDLINKEDBEER('checkInTime'), time);\r\n    graph.add(namedNode, SOLIDLINKEDBEER('rating'), rating);\r\n    graph.add(namedNode, SOLIDLINKEDBEER('review'), review);\r\n\r\n    // //make a text file and send\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getGroupAppDataTTL(urlFile,friends, leader,groupName){\r\n    let graph = rdfLib.graph();\r\n\r\n    let friendsgroup = rdfLib.sym(urlFile + \"#\" + GROUP_MEMBERS);\r\n\r\n    graph.add(friendsgroup, RDF('type'), VCARD('Group'));\r\n    graph.add(friendsgroup, VCARD('hasUID'), rdfLib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:ABGroup\"));\r\n    graph.add(friendsgroup, VCARD('hasLeader'), rdfLib.sym(leader));\r\n\r\n    friends.forEach(res => {\r\n        graph.add(friendsgroup, VCARD('hasMember'), rdfLib.sym(res.getUri()));\r\n    });\r\n\r\n    graph.add(friendsgroup, SCHEMA('name'), groupName);\r\n\r\n    return rdfLib.serialize(undefined, graph, urlFile, 'text/turtle');\r\n}\r\n\r\nexport function getGroupAclTTL(groupLocation, groupAppDataLocation, groupAcl, webIdOwner){\r\n    let graph = rdfLib.graph();\r\n    let owner = rdfLib.sym(groupAcl + \"#Owner\");\r\n    let ownerAgent = rdfLib.sym(webIdOwner);\r\n\r\n    let members = rdfLib.sym(groupAppDataLocation + \"#\" + GROUP_MEMBERS);\r\n    let resource = rdfLib.sym(groupLocation);\r\n\r\n    //owner\r\n    graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(owner, ACL('accessTo'), resource);\r\n    graph.add(owner, ACL('default'), resource);\r\n    graph.add(owner, ACL('agent'), ownerAgent);\r\n\r\n    graph.add(owner, ACL('mode'), ACL('Control'));\r\n    graph.add(owner, ACL('mode'), ACL('Read'));\r\n    graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n    //public\r\n    graph.add(members, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(members, ACL('accessTo'), resource);\r\n    graph.add(members, ACL('default'), resource);\r\n\r\n    graph.add(members, ACL('agentGroup'), members);\r\n\r\n    graph.add(members, ACL('mode'), ACL('Read'));\r\n\r\n    return rdfLib.serialize(undefined, graph, groupAcl, 'text/turtle');\r\n}\r\n\r\nexport function getGroupCheckInsAclTTL(groupLocation, groupAppDataLocation, groupAcl, webIdOwner){\r\n    let graph = rdfLib.graph();\r\n    let owner = rdfLib.sym(groupAcl + \"#Owner\");\r\n    let ownerAgent = rdfLib.sym(webIdOwner);\r\n\r\n    let members = rdfLib.sym(groupAppDataLocation + \"#\" + GROUP_MEMBERS);\r\n    let resource = rdfLib.sym(groupLocation);\r\n\r\n    //owner\r\n    graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(owner, ACL('accessTo'), resource);\r\n    graph.add(owner, ACL('default'), resource);\r\n    graph.add(owner, ACL('agent'), ownerAgent);\r\n\r\n    graph.add(owner, ACL('mode'), ACL('Control'));\r\n    graph.add(owner, ACL('mode'), ACL('Read'));\r\n    graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n    //public\r\n    graph.add(members, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(members, ACL('accessTo'), resource);\r\n    graph.add(members, ACL('default'), resource);\r\n\r\n    graph.add(members, ACL('agentGroup'), members);\r\n    graph.add(members, ACL('mode'), ACL('Read'));\r\n    graph.add(members, ACL('mode'), ACL('Append'));\r\n\r\n    return rdfLib.serialize(undefined, graph, groupAcl, 'text/turtle');\r\n}\r\n\r\nexport function getGroupOtherPersonTTL(groupLocation, postlocation){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), VCARD('Group'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('location'), rdfLib.sym(groupLocation));\r\n\r\n    return rdfLib.serialize(undefined, graph, postlocation, 'text/turtle');\r\n}\r\n\r\nexport function getCheckInIndexBody(postlocation, members, user){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.sym(postlocation + \"#\" + GROUP_MEMBERS);\r\n\r\n    graph.add(blankNode, RDF('type'), VCARD('Group'));\r\n    members.forEach(res => {\r\n        let member = rdfLib.sym(res.getUri());\r\n        graph.add(blankNode, VCARD('hasMember'), member);\r\n        graph.add(member, SOLIDLINKEDBEER('points'), 0);\r\n    });\r\n\r\n    let member = rdfLib.sym(user.getUri());\r\n    graph.add(blankNode, VCARD('hasMember'), member);\r\n    graph.add(member, SOLIDLINKEDBEER('points'), 0);\r\n\r\n    return rdfLib.serialize(undefined, graph, postlocation, 'text/turtle');\r\n}\r\n\r\nexport function groupCheckInIndexAcl(groupLocation, groupAppDataLocation, groupAcl, webIdOwner){\r\n    let graph = rdfLib.graph();\r\n    let owner = rdfLib.sym(groupAcl + \"#Owner\");\r\n    let ownerAgent = rdfLib.sym(webIdOwner);\r\n\r\n    let members = rdfLib.sym(groupAppDataLocation + \"#\" + GROUP_MEMBERS);\r\n    let resource = rdfLib.sym(groupLocation);\r\n\r\n    //owner\r\n    graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(owner, ACL('accessTo'), resource);\r\n    graph.add(owner, ACL('default'), resource);\r\n    graph.add(owner, ACL('agent'), ownerAgent);\r\n\r\n    graph.add(owner, ACL('mode'), ACL('Control'));\r\n    graph.add(owner, ACL('mode'), ACL('Read'));\r\n    graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n    //public\r\n    graph.add(members, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(members, ACL('accessTo'), resource);\r\n    graph.add(members, ACL('default'), resource);\r\n\r\n    graph.add(members, ACL('agentGroup'), members);\r\n    graph.add(members, ACL('mode'), ACL('Read'));\r\n    graph.add(members, ACL('mode'), ACL('Write'));\r\n    graph.add(members, ACL('mode'), ACL('Append'));\r\n\r\n    return rdfLib.serialize(undefined, graph, groupAcl, 'text/turtle');\r\n}","import {postSolidFile, putSolidFile} from \"../SolidMethods\";\r\n\r\nimport * as fileClient from \"solid-file-client\";\r\nimport authClient from \"solid-auth-client\";\r\nimport * as rdflib from \"rdflib\";\r\nimport {ACL, FOAF, RDF, SOLID, SOLIDLINKEDBEER, TERMS, VCARD} from \"../rdf/Prefixes\";\r\nimport {\r\n  APPDATA_FILE,\r\n  APPDATA_FILENAME,\r\n  APPFOLDER_NAME,\r\n  BEERDRINKERFOLDER,\r\n  CHECKIN_FOLDER,\r\n  CONTENT_TYPE_TURTLE,\r\n  FRIENDS_FILE,\r\n  FRIENDS_FILENAME, GROUPFOLDER,\r\n  INBOX_FOLDER\r\n} from \"../rdf/Constants\";\r\n\r\nexport async function buildFolders(publicProfileIndex, storePublicProfileIndex, storagePublic, app, webId) {\r\n  //TODO a whole lot of error checking. Checking for 400 error codes and stuff like that\r\n  let applocation = await createAppNodeForPublicTypeIndex(storePublicProfileIndex, publicProfileIndex, storagePublic, app);\r\n  await makeAppFolderStructure(applocation, webId);\r\n\r\n  //sleep zodat de server de requests kan verwerken\r\n  await sleep(2000);\r\n\r\n  return applocation;\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, ms)\r\n  })\r\n}\r\n\r\nexport async function checkFolderIntegrity(appfolder, webId) {\r\n  //TODO breidt dit uit\r\n\r\n  //Group\r\n  let groupFolder = appfolder + BEERDRINKERFOLDER + GROUPFOLDER;\r\n  let groupRes = await authClient.fetch(groupFolder);\r\n\r\n  if(groupRes.status === 404){\r\n    let groupFolderAcl = groupFolder + '.acl';\r\n    await fileClient.createFolder(groupFolder);\r\n    let body = getAclGroupFolder(groupFolder, groupFolderAcl, webId);\r\n    await putSolidFile(groupFolderAcl, body);\r\n  }\r\n}\r\n\r\n/**\r\n * Adds the applicatioin to the public type index\r\n * @param {store} store \r\n * @param {NN} publicTypeIndex \r\n * @param {string} publicLocation \r\n * @param {string} app \r\n */\r\nasync function createAppNodeForPublicTypeIndex(store, publicTypeIndex, publicLocation, app) {\r\n  //find empty folder\r\n  let appLocation = await findEmptyFolder(publicLocation);\r\n\r\n  //create a named node for the app\r\n  let appLocationNN = rdflib.sym(appLocation);\r\n\r\n  //add values to the pti\r\n  store.add(publicTypeIndex, TERMS('references'), app);\r\n  store.add(app, RDF('type'), SOLID('TypeRegistration'));\r\n  store.add(app, SOLID('instance'), appLocationNN);\r\n\r\n  //serialize and send the pti\r\n  let newTTLpublicTypeindex = await rdflib.serialize(undefined, store, publicTypeIndex.value, CONTENT_TYPE_TURTLE);\r\n  await putSolidFile(publicTypeIndex.value, newTTLpublicTypeindex);\r\n\r\n  return appLocation;\r\n}\r\n\r\n/**\r\n * Finds an empty folder for the application\r\n * @param {} publicLocation \r\n */\r\nasync function findEmptyFolder(publicLocation) {\r\n  //TODO improve this. You can check if the other folder holds up to your standards. A lot of possibilities\r\n  let appLocation = publicLocation + APPFOLDER_NAME + '/'\r\n\r\n  //see if there is a folder at the applocation\r\n  let res = await authClient.fetch(appLocation);\r\n\r\n  //make eiher a new random foldername or use the original\r\n  if (res.status % 400 < 100) {\r\n    return appLocation;\r\n  } else {\r\n    return appLocation = publicLocation + APPFOLDER_NAME + makeRandomString(10) + '/'\r\n  }\r\n}\r\n\r\n/**\r\n * Makes a random string\r\n * @param {int} length \r\n */\r\nfunction makeRandomString(length) {\r\n  var result = '';\r\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  var charactersLength = characters.length;\r\n  for (var i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Makes the folder struckture for the application\r\n * @param {string} appFolderUrl \r\n * @param {string} webId \r\n */\r\nasync function makeAppFolderStructure(appFolderUrl, webId) {\r\n  //TODO make all async\r\n  let body;\r\n\r\n  //top folder\r\n  let aclUrl = appFolderUrl + '.acl';\r\n\r\n  await fileClient.createFolder(appFolderUrl);\r\n  body = getAclAppFolder(appFolderUrl, aclUrl, webId);\r\n  await putSolidFile(aclUrl, body);\r\n\r\n  //beerdrinker\r\n  let beerDrinkerUrl = appFolderUrl + BEERDRINKERFOLDER;\r\n  await fileClient.createFolder(beerDrinkerUrl);\r\n\r\n  // friends\r\n  let friendsUrl = beerDrinkerUrl + FRIENDS_FILE;\r\n  body = getFriendsFile(friendsUrl, webId);\r\n\r\n  await postSolidFile(beerDrinkerUrl, FRIENDS_FILENAME, body);\r\n\r\n  //appData \r\n  let appDataFile = beerDrinkerUrl + APPDATA_FILE;\r\n  let appDataFileAcl = appDataFile + '.acl';\r\n  \r\n  body = getAppDataInit(appDataFile);\r\n  await postSolidFile(beerDrinkerUrl, APPDATA_FILENAME, body);\r\n  \r\n  body = getAclAppData(appDataFile, appDataFileAcl, webId, friendsUrl);\r\n  await putSolidFile(appDataFileAcl, body);\r\n\r\n  //inboxfolder\r\n  let inboxUrl = beerDrinkerUrl + INBOX_FOLDER;\r\n  let inboxUrlacl = inboxUrl + '.acl';\r\n  body = getACLInboxFolder(inboxUrl, inboxUrlacl, webId);\r\n\r\n  await fileClient.createFolder(inboxUrl);\r\n  await putSolidFile(inboxUrlacl, body);\r\n\r\n  //check in folder        \r\n  let reviewUrl = beerDrinkerUrl + CHECKIN_FOLDER;\r\n  let reviewUrlacl = reviewUrl + '.acl';\r\n\r\n  await fileClient.createFolder(reviewUrl);\r\n  body = getACLSubmittersFriends(reviewUrl, reviewUrlacl, webId, friendsUrl);\r\n  await putSolidFile(reviewUrlacl, body);\r\n\r\n  //check in folder\r\n  let groupFolder = beerDrinkerUrl + GROUPFOLDER;\r\n  let groupFolderAcl = groupFolder + '.acl';\r\n\r\n  //group folder\r\n  await fileClient.createFolder(groupFolder);\r\n  body = getAclGroupFolder(groupFolder, groupFolderAcl, webId);\r\n  await putSolidFile(groupFolderAcl, body);\r\n}\r\n\r\n/**\r\n * The init file for the appdata\r\n * @param {string} url \r\n */\r\nfunction getAppDataInit(url) {\r\n  let graph = rdflib.graph();\r\n\r\n  let bn = rdflib.blankNode();\r\n\r\n  graph.add(bn, SOLIDLINKEDBEER('startdate'), new Date());\r\n  graph.add(bn, SOLIDLINKEDBEER('points'), 0);\r\n\r\n  return rdflib.serialize(undefined, graph, url, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Makes the acl for the app folder\r\n * Only owner can see, write and control\r\n * @param {*} appUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n */\r\nfunction getAclAppFolder(appUrl, aclUrl, webIdUserLoggedIn) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let app = rdflib.sym(appUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), app);\r\n  graph.add(owner, ACL('default'), app);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Init for the friends file\r\n * @param {string} urlFile \r\n * @param {*} webId \r\n */\r\nfunction getFriendsFile(urlFile) {\r\n  let graph = rdflib.graph();\r\n\r\n  let friendsgroup = rdflib.sym(urlFile + \"#Friends\");\r\n  let friendsgroupRequested = rdflib.sym(urlFile + \"#FriendsRequested\");\r\n\r\n  graph.add(friendsgroup, RDF('type'), VCARD('Group'));\r\n  graph.add(friendsgroup, VCARD('hasUID'), rdflib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:ABGroup\"));\r\n\r\n  graph.add(friendsgroupRequested, RDF('type'), VCARD('Group'));\r\n  graph.add(friendsgroupRequested, VCARD('hasUID'), rdflib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:CDGroup\"));\r\n\r\n  return rdflib.serialize(undefined, graph, urlFile, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Get the acl for the inbox folder. Everyone can write but only owner can read\r\n * @param {} inboxUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n */\r\nfunction getACLInboxFolder(inboxUrl, aclUrl, webIdUserLoggedIn) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let _public = rdflib.sym(aclUrl + \"#Public\");\r\n  let inbox = rdflib.sym(inboxUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), inbox);\r\n  graph.add(owner, ACL('default'), inbox);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(_public, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(_public, ACL('accessTo'), inbox);\r\n  graph.add(_public, ACL('default'), inbox);\r\n  graph.add(_public, ACL('agentClass'), FOAF(\"Agent\"));\r\n\r\n  graph.add(_public, ACL('mode'), ACL('Append'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Acl check in folder. Friend and user can read\r\n * @param {*} resourceUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n * @param {*} friendsUrl \r\n */\r\nfunction getACLSubmittersFriends(resourceUrl, aclUrl, webIdUserLoggedIn, friendsUrl) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let group1 = rdflib.sym(aclUrl + \"#Friends\");\r\n  let resource = rdflib.sym(resourceUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //group who get acess\r\n  let fgroup1 = rdflib.sym(friendsUrl + \"#Friends\");\r\n  let fgroup2 = rdflib.sym(friendsUrl + \"#FriendsRequested\");\r\n\r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), resource);\r\n  graph.add(owner, ACL('default'), resource);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(group1, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(group1, ACL('accessTo'), resource);\r\n  graph.add(group1, ACL('default'), resource);\r\n\r\n  graph.add(group1, ACL('agentGroup'), fgroup1);\r\n  graph.add(group1, ACL('agentGroup'), fgroup2);\r\n\r\n  graph.add(group1, ACL('mode'), ACL('Read'));\r\n  graph.add(group1, ACL('mode'), ACL('Append'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Acl app file. Friend and user can read\r\n * @param {*} resourceUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n * @param {*} friendsUrl \r\n */\r\nfunction getAclAppData(resourceUrl, aclUrl, webIdUserLoggedIn, friendsUrl) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let group1 = rdflib.sym(aclUrl + \"#Friends\");\r\n  let resource = rdflib.sym(resourceUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //group who get acess\r\n  let fgroup1 = rdflib.sym(friendsUrl + \"#Friends\");\r\n  let fgroup2 = rdflib.sym(friendsUrl + \"#FriendsRequested\");\r\n\r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), resource);\r\n  graph.add(owner, ACL('default'), resource);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(group1, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(group1, ACL('accessTo'), resource);\r\n  graph.add(group1, ACL('default'), resource);\r\n\r\n  graph.add(group1, ACL('agentGroup'), fgroup1);\r\n  graph.add(group1, ACL('agentGroup'), fgroup2);\r\n\r\n  graph.add(group1, ACL('mode'), ACL('Read'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\nfunction getAclGroupFolder(appUrl, aclUrl, webIdUserLoggedIn) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let app = rdflib.sym(appUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), app);\r\n  graph.add(owner, ACL('default'), app);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}","class AccessError extends Error {\r\n    constructor(...args) {\r\n        super(...args);\r\n\r\n        this.message = \"Access file is not correct\";\r\n    }\r\n}\r\n\r\nexport default AccessError;","import * as rdfLib from \"rdflib\"\r\n\r\nimport AccessError from '../../error/AccessError'\r\nimport {ACL} from '../rdf/Prefixes'\r\n\r\nexport function checkacess(storeProfileCard){\r\n    let blankNode = storeProfileCard.any(undefined, ACL('origin'),rdfLib.sym(\"https://ozcanseker.github.io\"));\r\n    let readAcess = storeProfileCard.match(blankNode, ACL('mode'), ACL('Read'));\r\n    let Write = storeProfileCard.match(blankNode, ACL('mode'),ACL('Write'));\r\n    let Append = storeProfileCard.match(blankNode, ACL('mode'),ACL('Append'));\r\n    let Control = storeProfileCard.match(blankNode, ACL('mode'),ACL('Control'));\r\n\r\n    if(!readAcess.length){\r\n        throw new AccessError(\"Read access\");\r\n    }\r\n\r\n    if(!Write.length){\r\n        throw new AccessError(\"Write access\");\r\n    }\r\n\r\n    if(!Append.length){\r\n        throw new AccessError(\"Append access\");\r\n    }\r\n\r\n    if(!Control.length){\r\n        throw new AccessError(\"Control access\");\r\n    }\r\n}","import Observable from \"./Observable\";\r\n\r\nclass CheckInHandler extends Observable {\r\n    constructor() {\r\n        super();\r\n\r\n        this._checkInsAmount = 0;\r\n        this._beerReviewsAmount = 0;\r\n        this._beerPoints = 0;\r\n        this._userCheckIns = [];\r\n        this._allCheckinsGotten = false;\r\n    }\r\n\r\n    setReviesCheckInsAndUserCheckIns(reviews, checkIns, userBeerCheckIns){\r\n        this._beerReviewsAmount = reviews;\r\n        this._checkInsAmount = checkIns;\r\n\r\n        userBeerCheckIns.forEach(checkIn => {\r\n            checkIn.subscribe(this);\r\n        });\r\n\r\n        this._userCheckIns = userBeerCheckIns;\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    setAllCheckInsGotten(bool){\r\n        this._allCheckinsGotten = bool;\r\n    }\r\n\r\n    getAllCheckInsGotten(){\r\n        return this._allCheckinsGotten;\r\n    }\r\n\r\n    addBeerPoints(amount) {\r\n        this._beerPoints += amount;\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    setBeerPoints(beerPoints) {\r\n        this._beerPoints = beerPoints;\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getBeerPoints() {\r\n        return this._beerPoints;\r\n    }\r\n\r\n    setBeerReviewsAmount(beerReviews) {\r\n        this._beerReviewsAmount = beerReviews;\r\n        this.updateSubscribers()\r\n    }\r\n\r\n    getBeerReviewsAmount() {\r\n        return this._beerReviewsAmount;\r\n    }\r\n\r\n    addBeerReviewToAmount() {\r\n        this._beerReviewsAmount++;\r\n        this.updateSubscribers()\r\n    }\r\n\r\n    setCheckInsAmount(checkIns) {\r\n        this._checkInsAmount = checkIns;\r\n        this.updateSubscribers()\r\n    }\r\n\r\n    getCheckInsAmount() {\r\n        return this._checkInsAmount;\r\n    }\r\n\r\n    addToCheckInsAmount() {\r\n        this._checkInsAmount++;\r\n        this.updateSubscribers()\r\n    }\r\n\r\n    setUserCheckIns(userCheckins) {\r\n        this._userCheckIns.forEach(res => {\r\n            res.unsubscribe(this);\r\n        })\r\n\r\n        userCheckins.forEach(checkIn => {\r\n            checkIn.subscribe(this);\r\n        });\r\n\r\n        this._userCheckIns = userCheckins;\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    clearAll(){\r\n        this._userCheckIns.forEach(res => {\r\n            res.unsubscribe(this);\r\n        })\r\n    }\r\n\r\n    addUserCheckIns(userCheckins) {\r\n        userCheckins.forEach(checkIn => {\r\n            checkIn.subscribe(this);\r\n        })\r\n\r\n        this._userCheckIns = userCheckins.concat(this._userCheckIns);\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getUserCheckIns() {\r\n        return this._userCheckIns;\r\n    }\r\n\r\n    update() {\r\n        this.updateSubscribers();\r\n    }\r\n}\r\n\r\nexport default CheckInHandler;","import Observable from \"./Observable\";\r\nimport CheckInHandler from \"./CheckInHandler\";\r\n\r\nclass Friend extends Observable{\r\n    constructor(uri){\r\n        super();\r\n        this._profileUri = uri;\r\n\r\n        this._name = undefined;\r\n        this._imageUrl = undefined;\r\n        this._beerDrinkerFolder = undefined;\r\n        this._startDate = undefined;\r\n\r\n        this._checkInHandler = new CheckInHandler();\r\n        this._checkInHandler.subscribe(this);\r\n    }\r\n\r\n    clearAll(){\r\n        this._checkInHandler.unsubscribe(this);\r\n        this._checkInHandler.clearAll();\r\n    }\r\n\r\n    setUserDetails(name, pictureurl, beerDrinkerFolder){\r\n        this._name = name ? name : this.getUserName(this._profileUri);\r\n\r\n        this._imageUrl = pictureurl;\r\n        this._beerDrinkerFolder = beerDrinkerFolder;\r\n\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    setAppData(startdate){\r\n        this._startDate = startdate;\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    update(){\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getCheckInHandler(){\r\n        return this._checkInHandler;\r\n    }\r\n\r\n    getUserName(uri){\r\n        return  uri.replace(\"https://\", \"\").replace(/\\..*/, \"\");\r\n    }\r\n\r\n    getBeerDrinkerFolder(){\r\n        return this._beerDrinkerFolder;\r\n    }\r\n\r\n    getUri(){\r\n        return this._profileUri;\r\n    }\r\n\r\n    getImageUrl(){\r\n        return this._imageUrl;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n\r\n    getStartDate(){\r\n        if(this._startDate){\r\n            //send a copy of the date back and not the date itself\r\n            return new Date(this._startDate.getTime())\r\n        }else{\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Friend;","import CheckInHandler from \"./CheckInHandler\";\r\nimport Observable from \"./Observable\";\r\n\r\nclass Group extends Observable{\r\n    constructor(url, createdByMe){\r\n        super();\r\n\r\n        this._url = url;\r\n        this._name = url;\r\n\r\n        this._createdByMe = createdByMe;\r\n        this._checkInHandler = new CheckInHandler();\r\n        this._checkInHandler.subscribe(this);\r\n\r\n        this._groupLeader = undefined;\r\n        this._members = [];\r\n    }\r\n\r\n    setProperties(naam, checkInsLocation, groupDataLocation, groupCheckInIndex,groupLeader, groupMembers){\r\n        this._name = naam;\r\n        this._checkInsLocation = checkInsLocation;\r\n        this._groupDataLocation = groupDataLocation;\r\n        this._groupLeader = groupLeader;\r\n        this._members = groupMembers;\r\n        this._groupCheckInIndex = groupCheckInIndex;\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getMembers(){\r\n        return this._members.slice();\r\n    }\r\n\r\n    getGroupCheckInIndex(){\r\n        return this._groupCheckInIndex;\r\n    }\r\n\r\n    getLeader(){\r\n        return this._groupLeader;\r\n    }\r\n\r\n    setUrl(url){\r\n        this._url = url;\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getCheckInHandler(){\r\n        return this._checkInHandler;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n\r\n    getUrl(){\r\n        return this._url;\r\n    }\r\n\r\n    getCheckInLocation(){\r\n        return this._checkInsLocation;\r\n    }\r\n\r\n    getGroupDataFile(){\r\n        return this._groupDataLocation;\r\n    }\r\n\r\n    clearAll(){\r\n        this._checkInHandler.clearAll();\r\n    }\r\n\r\n    update(){\r\n        this.updateSubscribers();\r\n    }\r\n}\r\n\r\nexport default Group;","import {buildFolders, checkFolderIntegrity} from './PodFolderBuilder';\r\nimport {getAllUserCheckIns, getTenUserCheckIns, loadFriendData} from \"../SolidMethods\";\r\nimport {checkacess} from './AccessChecker';\r\nimport {PIM, SCHEMA, SOLID, SOLIDLINKEDBEER, VCARD} from \"../rdf/Prefixes\";\r\n\r\nimport * as fileClient from \"solid-file-client\";\r\nimport * as rdfLib from \"rdflib\";\r\nimport {\r\n    APPDATA_FILE,\r\n    APPLICATION_NAME_PTI,\r\n    BEERDRINKERFOLDER, CHECKIN_FOLDER, CHECKIN_INDEX_FILE, CONTENT_TYPE_TURTLE,\r\n    FRIENDS_FILE,\r\n    FRIENDSGROUPNAME,\r\n    FRIENDSSENTGROUPNAME, GROUP_DATA_FILE, GROUPFOLDER\r\n} from \"../rdf/Constants\";\r\nimport Friend from \"../../model/HolderComponents/Friend\";\r\nimport Group from \"../../model/HolderComponents/Group\";\r\n\r\nexport async function buildSolidCommunicator(modelHolder, solidCommunicator) {\r\n    let returnObject = {};\r\n    let user = modelHolder.getUser();\r\n    let checkInHandler = modelHolder.getCheckInHandler();\r\n\r\n    //make a named node of the session webid of the user\r\n    //namednode\r\n    const webIdNN = rdfLib.sym(user.getUri());\r\n\r\n    //get a store of the profile card of the logged in user\r\n    //store\r\n    let storeProfileCard = await getUserCard(webIdNN.uri);\r\n\r\n    //check the acess before trying to make an application\r\n    checkacess(storeProfileCard);\r\n\r\n    //store for the Public Profile Index\r\n    //object with store and nn\r\n    let ppiObject = await getPPILocation(webIdNN, storeProfileCard);\r\n\r\n    //String that shows the location of the public storage of the pod\r\n    //string \r\n    let storagePublic = getStorePublic(webIdNN, storeProfileCard);\r\n\r\n    //locatie voor de applicatie\r\n    //string\r\n    let applicationLocation = await getApplicationLocation(ppiObject.ppi, ppiObject.store, storagePublic, webIdNN.value);\r\n\r\n    //returnobject\r\n    returnObject.sc = {};\r\n\r\n    let userDetails = getUserDetails(webIdNN, storeProfileCard);\r\n    user.loadInUserValues(userDetails.name,\r\n        userDetails.imageURL,\r\n        applicationLocation,\r\n        applicationLocation + BEERDRINKERFOLDER,\r\n        applicationLocation + BEERDRINKERFOLDER + CHECKIN_FOLDER);\r\n    solidCommunicator.setFileLocations();\r\n\r\n    getAppData(user.getBeerDrinkerFolder()).then(res => {\r\n        user.loadInAppData(new Date(res.startdate));\r\n        modelHolder.getCheckInHandler().setBeerPoints(parseInt(res.points));\r\n        solidCommunicator.loadInAppStore(res.store, res.blankNode);\r\n    });\r\n\r\n    getTenUserCheckIns(user.getBeerDrinkerFolder()).then(res => {\r\n        checkInHandler.addUserCheckIns(res.userBeerCheckIns);\r\n        checkInHandler.setBeerReviewsAmount(res.reviews);\r\n        checkInHandler.setCheckInsAmount(res.checkIns);\r\n    });\r\n\r\n    getFriends(user.getBeerDrinkerFolder()).then(res => {\r\n        modelHolder.addFriends(res.friends);\r\n        solidCommunicator.loadInFriendsStore(res.group, res.sentGroup, res.friendsStore);\r\n    });\r\n\r\n    getGroups(user.getBeerDrinkerFolder()).then(res => {\r\n        modelHolder.setGroups(res);\r\n    })\r\n}\r\n\r\nasync function getGroups(beerDrinkerFolder) {\r\n    let groupsLocation = beerDrinkerFolder + GROUPFOLDER;\r\n    let res = await fileClient.readFolder(groupsLocation);\r\n    let groups = [];\r\n\r\n    let myGroups = res.folders;\r\n    let friendsGroups = res.files;\r\n\r\n    myGroups.forEach(res => {\r\n        let group = new Group(res.url, true);\r\n\r\n        loadGroupInformation(group);\r\n        groups.push(group);\r\n    });\r\n\r\n    friendsGroups.forEach(res => {\r\n        let group = new Group(res.url, false);\r\n\r\n        loadFriendGroupData(group);\r\n        groups.push(group);\r\n    });\r\n\r\n    return groups;\r\n}\r\n\r\nasync function loadFriendGroupData(group) {\r\n    let file = await fileClient.fetch(group.getUrl());\r\n\r\n    let graph = rdfLib.graph();\r\n    rdfLib.parse(file, graph, group.getUrl(), CONTENT_TYPE_TURTLE);\r\n\r\n    let blankNode = graph.any(undefined, SOLIDLINKEDBEER('location'));\r\n    let urlGroup = graph.any(blankNode, SOLIDLINKEDBEER('location'));\r\n\r\n    group.setUrl(urlGroup.value);\r\n\r\n    await loadGroupInformation(group);\r\n}\r\n\r\nasync function loadGroupInformation(group) {\r\n    let groupCheckInsLocation = group.getUrl() + CHECKIN_FOLDER;\r\n    let groupDataLocation = group.getUrl() + GROUP_DATA_FILE;\r\n    let checkIndexLocation = group.getUrl() + CHECKIN_INDEX_FILE;\r\n\r\n    //krijg de checkins van de grop\r\n    getTenUserCheckIns(group.getUrl()).then(res => {\r\n        group.getCheckInHandler().setReviesCheckInsAndUserCheckIns(res.reviews, res.checkIns, res.userBeerCheckIns);\r\n    })\r\n\r\n    let res = await fileClient.fetch(groupDataLocation);\r\n    let groupDataGraph = rdfLib.graph();\r\n    rdfLib.parse(res, groupDataGraph, groupDataLocation, CONTENT_TYPE_TURTLE);\r\n\r\n    //krijg de members\r\n    let hasMemberGroup = groupDataGraph.any(undefined, VCARD('hasLeader'));\r\n    let leader = groupDataGraph.any(hasMemberGroup, VCARD('hasLeader'));\r\n\r\n    let name = groupDataGraph.any(hasMemberGroup, SCHEMA('name'));\r\n\r\n    //checkInIndex\r\n    let checkInIndex = await fileClient.fetch(checkIndexLocation);\r\n    let checkInIndexGraph = rdfLib.graph();\r\n    rdfLib.parse(checkInIndex, checkInIndexGraph, checkIndexLocation, CONTENT_TYPE_TURTLE);\r\n\r\n    let pointsMemberGroup = checkInIndexGraph.any(undefined, VCARD('hasMember'));\r\n\r\n    let members = [];\r\n    checkInIndexGraph.each(pointsMemberGroup, VCARD('hasMember')).map(res => {\r\n        let points = checkInIndexGraph.any(res, SOLIDLINKEDBEER('points'));\r\n\r\n        if(res.value === leader.value){\r\n            leader = {member: res.value, points: points.value};\r\n        }else{\r\n            members.push({member: res.value, points: points.value});\r\n        }\r\n    });\r\n\r\n    group.setProperties(name.value, groupCheckInsLocation, groupDataLocation,checkIndexLocation, leader, members);\r\n}\r\n\r\n/**\r\n * Get the user profile card in the form of a rdflib graph.\r\n *\r\n * @param webIdUrl the uri for the profile card\r\n * @returns {Promise<void>} graph of user VCARD\r\n */\r\nasync function getUserCard(webIdUrl) {\r\n    const profileCardTTl = await fileClient.fetch(webIdUrl);\r\n    const storeProfileCard = rdfLib.graph();\r\n    rdfLib.parse(profileCardTTl, storeProfileCard, webIdUrl, \"text/turtle\");\r\n\r\n    return storeProfileCard;\r\n}\r\n\r\nasync function getPPILocation(profile, storeProfileCard) {\r\n    const publicProfileIndex = storeProfileCard.any(profile, SOLID(\"publicTypeIndex\"));\r\n\r\n    const storePublicTypeIndex = rdfLib.graph();\r\n    const publicTypeIndexTTL = await fileClient.fetch(publicProfileIndex.value);\r\n    rdfLib.parse(publicTypeIndexTTL, storePublicTypeIndex, publicProfileIndex.value, \"text/turtle\");\r\n\r\n    return {store: storePublicTypeIndex, ppi: publicProfileIndex};\r\n}\r\n\r\nfunction getStorePublic(profile, storeProfileCard) {\r\n    let locationStorage = storeProfileCard.any(profile, PIM(\"storage\"));\r\n    return locationStorage.value + \"public/\";\r\n}\r\n\r\nasync function getApplicationLocation(publicProfileIndex, storePublicProfileIndex, storagePublic, webId) {\r\n    let app = rdfLib.sym(publicProfileIndex.value + \"#\" + APPLICATION_NAME_PTI);\r\n    let appQuery = storePublicProfileIndex.any(app, SOLID(\"instance\"));\r\n\r\n    if (appQuery) {\r\n        await checkFolderIntegrity(appQuery.value, webId);\r\n        return appQuery.value;\r\n    } else {\r\n        return await buildFolders(publicProfileIndex, storePublicProfileIndex, storagePublic, app, webId);\r\n    }\r\n}\r\n\r\nfunction getUserDetails(profile, storeProfileCard) {\r\n    let nameFN = storeProfileCard.any(profile, VCARD('fn'));\r\n    let imageURL = storeProfileCard.any(profile, VCARD('hasPhoto'));\r\n\r\n    nameFN = nameFN ? nameFN.value : undefined;\r\n    imageURL = imageURL ? imageURL.value : undefined;\r\n\r\n    return {name: nameFN, imageURL: imageURL};\r\n}\r\n\r\nasync function getAppData(beerDrinkerFolder) {\r\n    //TODO one place to save all urls\r\n    let appdataLocation = beerDrinkerFolder + APPDATA_FILE;\r\n\r\n    let appdatattl = await fileClient.readFile(appdataLocation);\r\n    let graph = rdfLib.graph();\r\n    rdfLib.parse(appdatattl, graph, appdataLocation, \"text/turtle\");\r\n\r\n    let blankNode = graph.any(undefined, SOLIDLINKEDBEER('startdate'));\r\n\r\n    let startdate = graph.any(blankNode, SOLIDLINKEDBEER('startdate'));\r\n    let points = graph.any(blankNode, SOLIDLINKEDBEER('points'));\r\n\r\n    return {startdate: startdate.value, points: points.value, store: graph, blankNode: blankNode};\r\n}\r\n\r\nasync function getFriends(beerDrinkerFolder) {\r\n    let friendsLocation = beerDrinkerFolder + FRIENDS_FILE;\r\n    let ttlFriends = await fileClient.readFile(friendsLocation);\r\n\r\n    let group = rdfLib.sym(friendsLocation + \"#\" + FRIENDSGROUPNAME);\r\n    let sentGroup = rdfLib.sym(friendsLocation + \"#\" + FRIENDSSENTGROUPNAME);\r\n    let friends = [];\r\n\r\n    let graph = rdfLib.graph();\r\n    rdfLib.parse(ttlFriends, graph, friendsLocation, CONTENT_TYPE_TURTLE);\r\n\r\n    let query = graph.each(group, VCARD('hasMember'), undefined);\r\n\r\n    for (let index = 0; index < query.length; index++) {\r\n        let friend = new Friend(query[index].value);\r\n        loadFriendData(friend);\r\n\r\n        if (friend) {\r\n            friends.push(friend);\r\n        }\r\n    }\r\n\r\n    return {friends: friends, friendsStore: graph, group: group, sentGroup: sentGroup};\r\n}\r\n\r\n","import { postSolidFile, putSolidFile, getUserFile, loadFriendData } from \"../SolidMethods\";\r\nimport {FRIENDS_FILE, FRIENDSHIPREQUEST_ACCEPTED_NAME, INBOX_FOLDER} from \"../rdf/Constants\";\r\nimport {SOLIDLINKEDBEER, VCARD} from \"../rdf/Prefixes\";\r\nimport Friend from \"../../model/HolderComponents/Friend\";\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst rdfLib = require('rdflib');\r\n\r\nexport async function preApplicationHandelings(beerDrinkerFolder, friendGroup, friendsRequestedGroup, FriendsStore, modelHolder){\r\n    let inbox = beerDrinkerFolder + INBOX_FOLDER;\r\n    let inboxContent = await fileClient.readFolder(inbox);\r\n\r\n    //add friend from friend requested to friends\r\n    let acceptedRequests = inboxContent.files.filter(file => {\r\n        return file.name.includes(FRIENDSHIPREQUEST_ACCEPTED_NAME);\r\n    })\r\n\r\n    if(acceptedRequests.length !== 0){\r\n        checkAcceptedFriendShipRequests(beerDrinkerFolder, acceptedRequests, friendGroup, friendsRequestedGroup, FriendsStore, modelHolder);\r\n    }\r\n\r\n    //delete user from friends requested if they declined\r\n    let declinedRequests = inboxContent.files.filter(file => {\r\n        return file.name.includes(\"Social_Linked_Beer_FriendschipRequestDecline\");\r\n    })\r\n\r\n    if(declinedRequests.length !== 0){\r\n        await checkDeclinedFriendShipRequests(beerDrinkerFolder, declinedRequests, friendsRequestedGroup, FriendsStore);\r\n    }\r\n}\r\n\r\n/**\r\n * Check if there are accepted friendschip requests\r\n * @param {*} beerdrinkerFolder\r\n * @param {*} acceptedRequests\r\n * @param {*} scValues\r\n * @param {*} user\r\n */\r\nasync function checkAcceptedFriendShipRequests(beerdrinkerFolder, acceptedRequests, friendsGroup, friendsSent, friendGraph, modelHolder){\r\n    //get some values\r\n    let postLocation = beerdrinkerFolder + FRIENDS_FILE;\r\n\r\n    for(let i = 0; i < acceptedRequests.length; i++){\r\n        //make a graph and get file\r\n        let graph = rdfLib.graph();\r\n        let filettl = await fileClient.readFile(acceptedRequests[i].url);\r\n        rdfLib.parse(filettl, graph, acceptedRequests[i].url, \"text/turtle\");\r\n\r\n        //get the blanknode from the message\r\n        let friend = graph.any(undefined, SOLIDLINKEDBEER('from'));\r\n        friend = graph.any(friend, SOLIDLINKEDBEER('from'));\r\n\r\n        //add from friend requested to friend\r\n        friendGraph.add(friendsGroup, VCARD('hasMember'), friend);\r\n        friendGraph.removeMatches(friendsSent, VCARD('hasMember'), friend);\r\n\r\n        //get the friend from the internet\r\n        friend = new Friend(friend.value);\r\n        loadFriendData(friend);\r\n\r\n        //adding friend\r\n        modelHolder.addFriend(friend);\r\n    }\r\n\r\n    //update the original friend file\r\n    let friendsTtl = await rdfLib.serialize(undefined, friendGraph, postLocation, 'text/turtle');\r\n    //TODO post new file for user so that he know friendship is accepted\r\n    await putSolidFile(postLocation, friendsTtl);\r\n\r\n    acceptedRequests.forEach(res => {\r\n        //delete the original message\r\n        fileClient.deleteFile(res.url);\r\n    })\r\n}\r\n\r\nasync function checkDeclinedFriendShipRequests(beerDrinkerFolder, declinedRequests, friendsSent, friendGraph){\r\n    let postLocation = beerDrinkerFolder + FRIENDS_FILE;\r\n\r\n    for(let i = 0; i < declinedRequests.length; i++){\r\n        let graph = rdfLib.graph();\r\n        let filettl = await fileClient.readFile(declinedRequests[i].url);\r\n\r\n        rdfLib.parse(filettl, graph, declinedRequests[i].url, \"text/turtle\");\r\n\r\n        //get blank node from friend sent\r\n        let friend = graph.any(undefined, SOLIDLINKEDBEER('from'));\r\n        friend = graph.any(friend, SOLIDLINKEDBEER('from'));\r\n\r\n        //remove friend from the friendssent file\r\n        friendGraph.removeMatches(friendsSent, VCARD('hasMember'), friend);\r\n    }\r\n\r\n    //post new friend solid file\r\n    let friendsTtl = await rdfLib.serialize(undefined, friendGraph, postLocation, 'text/turtle');\r\n    putSolidFile(postLocation, friendsTtl);\r\n\r\n    declinedRequests.forEach(res => {\r\n        //delete the original message\r\n        fileClient.deleteFile(res.url);\r\n    })\r\n//     //TODO post new file for user so that he know friendship is declined\r\n}","import Observable from \"./Observable\";\r\n\r\nclass Beer extends Observable{\r\n    constructor(name, type, style, brewer, location){\r\n        super();\r\n\r\n        this._name = name;\r\n        this._type = type;\r\n        this._style = style;\r\n        this._brewer = brewer;\r\n        this._location = location;\r\n    }\r\n\r\n    getBrewer(){\r\n        return this._brewer;\r\n    }\r\n\r\n    updateInformation(name, type, style, brewer, description, containers){\r\n        this._name = name;\r\n        this._type = type;\r\n        this._style = style;\r\n        this._brewer = brewer;\r\n        this._description = description;\r\n        this._containers = containers;\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getUrl(){\r\n        return this._location;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n}\r\n\r\nexport default Beer;","import Observable from \"./Observable\";\r\n\r\nclass InboxMessage extends Observable{\r\n    constructor(uri){\r\n        super();\r\n        this._uri = uri;\r\n        this._type = undefined;\r\n        this._from = undefined;\r\n        this._desc = undefined;\r\n        this._location = undefined;\r\n        this._groupName = undefined;\r\n    }\r\n\r\n    setContents(type, from, desc, location, groupName){\r\n        this._type = type;\r\n        this._from = from;\r\n        this._desc = desc;\r\n        this._location = location;\r\n        this._groupName = groupName;\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getUri(){\r\n        return this._uri;\r\n    }\r\n\r\n    getFrom(){\r\n        return this._from;\r\n    }\r\n\r\n    getType(){\r\n        return this._type;\r\n    }\r\n\r\n    getDesc(){\r\n        return this._desc;\r\n    }\r\n\r\n    getLocation(){\r\n        return this._location;\r\n    }\r\n\r\n    getGroupName(){\r\n        return this._groupName;\r\n    }\r\n}\r\n\r\nexport default InboxMessage;","import {getAllUserCheckIns, getUserFile, loadFriendData, postSolidFile, putSolidFile} from \"./SolidMethods\";\r\n\r\nimport * as SolidTemplates from './rdf/SolidTtlTemplates';\r\nimport {buildSolidCommunicator} from './solidCommunicatorInits/SolidCommunicatorBuilder'\r\nimport {preApplicationHandelings} from './solidCommunicatorInits/PreApplicationHandelings'\r\n\r\nimport Beer from '../model/HolderComponents/Beer'\r\nimport BeerCheckIn from '../model/HolderComponents/CheckIn'\r\n\r\nimport * as fileClient from 'solid-file-client';\r\nimport * as rdfLib from 'rdflib';\r\n\r\nimport {\r\n    APPDATA_FILE,\r\n    APPLICATION_INVITAION_DESC,\r\n    APPLICATION_INVITAION_NAME,\r\n    BEERCHECKINFILENAME,\r\n    BEERDRINKERFOLDER,\r\n    BEERREVIEWFILENAME,\r\n    CHECKIN_FOLDER,\r\n    CHECKIN_INDEX_FILE,\r\n    CHECKIN_INDEX_NAME,\r\n    FRIENDS_FILE,\r\n    FRIENDSHIPREQUEST_ACCEPTED_DESC,\r\n    FRIENDSHIPREQUEST_ACCEPTED_NAME,\r\n    FRIENDSHIPREQUEST_DECLINED_DESC,\r\n    FRIENDSHIPREQUEST_DECLINED_NAME,\r\n    FRIENDSSHIPREQUEST_DESC,\r\n    FRIENDSSHIPREQUEST_NAME,\r\n    GROUP_DATA_FILE,\r\n    GROUP_DATA_FILENAME,\r\n    GROUPFOLDER,\r\n    GROUPINVITATION_DESC,\r\n    GROUPINVITATION_NAME,\r\n    INBOX_FOLDER\r\n} from \"./rdf/Constants\";\r\nimport {DBPEDIA, FOAF, RDF, SCHEMA, SOLID, SOLIDLINKEDBEER, VCARD} from \"./rdf/Prefixes\";\r\nimport Friend from \"../model/HolderComponents/Friend\";\r\nimport Group from \"../model/HolderComponents/Group\";\r\nimport InboxMessage from \"../model/HolderComponents/InboxMessage\";\r\n\r\nclass SolidCommunicator {\r\n    /**\r\n     * Build the solid communicator\r\n     * @param {*} modelHolder\r\n     */\r\n    static async build(modelHolder) {\r\n        let solidCommunicator = new SolidCommunicator(modelHolder);\r\n\r\n        await buildSolidCommunicator(modelHolder, solidCommunicator);\r\n\r\n        //make new solidCommunicator\r\n        return solidCommunicator;\r\n    }\r\n\r\n    constructor(modelHolder) {\r\n        this._modelHolder = modelHolder;\r\n        this._user = modelHolder.getUser();\r\n    }\r\n\r\n    loadInFriendsStore(friendGroup, friendsRequestedGroup, friendsStore) {\r\n        this._friendsStore = friendsStore;\r\n        this._friendGroup = friendGroup;\r\n        this._friendsRequestedGroup = friendsRequestedGroup;\r\n\r\n        preApplicationHandelings(this._user.getBeerDrinkerFolder(), friendGroup, friendsRequestedGroup, friendsStore, this._modelHolder);\r\n    }\r\n\r\n    loadInAppStore(store, blankNode) {\r\n        this._appStore = store;\r\n        this._blankNodeAppStore = blankNode;\r\n    }\r\n\r\n    setFileLocations() {\r\n        this._beerDrinkerFolder = this._user.getBeerDrinkerFolder();\r\n        this._checkInFolder = this._beerDrinkerFolder + CHECKIN_FOLDER;\r\n        this._appStoreLocation = this._beerDrinkerFolder + APPDATA_FILE;\r\n    }\r\n\r\n    /**\r\n     * Get an user file\r\n     * @param {*} url\r\n     */\r\n    async getUserFile(url) {\r\n        return await getUserFile(url);\r\n    }\r\n\r\n    /**\r\n     * Get all content from the inbox.\r\n     * @returns {Promise<[]>}\r\n     */\r\n    async getInboxContents() {\r\n        let inbox = this._user.getBeerDrinkerFolder() + INBOX_FOLDER;\r\n        let res = await fileClient.readFolder(inbox);\r\n        let files = [];\r\n\r\n        for (let index = 0; index < res.files.length; index++) {\r\n            let file = new InboxMessage(res.files[index].url);\r\n            this.loadFileContents(file);\r\n            files.push(file);\r\n        }\r\n\r\n        this._modelHolder.setInboxMessages(files);\r\n    }\r\n\r\n    async loadFileContents(file) {\r\n        let url = file.getUri();\r\n        let graph = rdfLib.graph();\r\n        let fileTTL = await fileClient.readFile(url);\r\n\r\n        await rdfLib.parse(fileTTL, graph, url, \"text/turtle\");\r\n\r\n        let blanknode = graph.any(undefined, RDF('type'));\r\n\r\n        let type = graph.any(blanknode, RDF('type'));\r\n        let description = graph.any(blanknode, SOLIDLINKEDBEER('description'));\r\n        let from = graph.any(blanknode, SOLIDLINKEDBEER('from'));\r\n        let location = graph.any(blanknode, SOLIDLINKEDBEER('location'));\r\n        let groupName = graph.any(blanknode, SOLIDLINKEDBEER('groupName'));\r\n\r\n        file.setContents(\r\n            type.value.replace(/.*#/, \"\"),\r\n            from.value,\r\n            description.value,\r\n            location ? location.value : undefined,\r\n            groupName ? groupName.value : undefined\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check if user is already friend\r\n     * @param {*} url\r\n     */\r\n    checkIfUserIsFriend(url) {\r\n        let query1 = this._friendsStore.match(this._friendsRequestedGroup, VCARD('hasMember'), rdfLib.sym(url));\r\n        let query2 = this._friendsStore.match(this._friendGroup, VCARD('hasMember'), rdfLib.sym(url));\r\n\r\n        if (query1.length !== 0 || query2.length !== 0) {\r\n            console.log(\"already friend\");\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Send invitation to user for the application\r\n     * @param {*} urlInvitee\r\n     * @param {*} inbox\r\n     */\r\n    async inviteUserToSolib(urlInvitee, inbox) {\r\n        //name for file\r\n        let fileName = APPLICATION_INVITAION_NAME + this._user.getName();\r\n        let invitation = this._user.getName() + APPLICATION_INVITAION_DESC;\r\n\r\n        //name of the location where it will be posted\r\n        let postLocation = inbox + fileName + \".ttl\";\r\n\r\n        //get ttl file for invitation\r\n        let invitationTTL = SolidTemplates.getInviteToLSBInvitation(urlInvitee, invitation, postLocation, this._user.getUri());\r\n\r\n        await postSolidFile(inbox, fileName, invitationTTL);\r\n    }\r\n\r\n    /**\r\n     * Sends a friendship request to user\r\n     * @param {*} urlInvitee\r\n     * @param {*} appLocation\r\n     */\r\n    async sendFriendshipRequest(urlInvitee, appLocation) {\r\n        if (!this.checkIfUserIsFriend(urlInvitee)) {\r\n            //get url without https and profile card.me\r\n            let fileNameName = this._user.getName();\r\n\r\n            //make a file name\r\n            let fileName = FRIENDSSHIPREQUEST_NAME + fileNameName;\r\n\r\n            //the invitation\r\n            let invitation = (this._user.getName() ? this._user.getName() : this._user.getUri()) + FRIENDSSHIPREQUEST_DESC;\r\n\r\n            //locations to be posted\r\n            let location = appLocation + BEERDRINKERFOLDER + INBOX_FOLDER;\r\n            let postLocation = location + fileName + \".ttl\";\r\n\r\n            //the ttl file\r\n            let invitationTTL = SolidTemplates.getFriendShipRequest(urlInvitee, invitation, postLocation, this._user.getUri());\r\n\r\n            //add friend to friend request send\r\n            let friendsFile = this._user.getBeerDrinkerFolder() + FRIENDS_FILE;\r\n            this._friendsStore.add(this._friendsRequestedGroup, VCARD('hasMember'), rdfLib.sym(urlInvitee));\r\n            let friendsTTL = await rdfLib.serialize(undefined, this._friendsStore, friendsFile, 'text/turtle');\r\n\r\n            // send files\r\n            await postSolidFile(location, fileName, invitationTTL);\r\n            await putSolidFile(friendsFile, friendsTTL);\r\n        }\r\n    }\r\n\r\n    async declineFriendSchipRequest(message) {\r\n        //send a declined friendship request to other pod\r\n        let result = await this.getUserFile(message.getFrom());\r\n        let inbox = result.appLocation + BEERDRINKERFOLDER + INBOX_FOLDER;\r\n\r\n        //get file name and description string\r\n        let fileNameName = this._user.getName();\r\n        let fileName = FRIENDSHIPREQUEST_DECLINED_NAME + fileNameName;\r\n        let invitation = (this._user.getName() ? this._user.getName() : this._user.getUri()) + FRIENDSHIPREQUEST_DECLINED_DESC;\r\n\r\n        //get the location is will be posted to\r\n        let postLocation = inbox + fileName + \".ttl\";\r\n\r\n        //make a text file and send\r\n        let declineTTL = SolidTemplates.getDeclineFriendshipRequest(message.getFrom(), invitation, postLocation, this._user.getUri());\r\n\r\n        //delete friendship request from own pod\r\n        await postSolidFile(inbox, fileName, declineTTL);\r\n        await fileClient.deleteFile(message.getUri());\r\n    }\r\n\r\n    async acceptFriendSchipRequest(message) {\r\n        //get user\r\n        let friend = new Friend(message.getFrom());\r\n        await loadFriendData(friend);\r\n\r\n        let inbox = friend.getBeerDrinkerFolder() + INBOX_FOLDER;\r\n\r\n        //add user as friend\r\n        let friendsFile = this._user.getBeerDrinkerFolder() + FRIENDS_FILE;\r\n        this._friendsStore.add(this._friendGroup, VCARD('hasMember'), rdfLib.sym(message.getFrom()));\r\n        let friendsTTL = await rdfLib.serialize(undefined, this._friendsStore, friendsFile, 'text/turtle');\r\n\r\n        //get file name and description string\r\n        let fileNameName = this._user.getName();\r\n        let fileName = FRIENDSHIPREQUEST_ACCEPTED_NAME + fileNameName;\r\n        let description = this._user.getName() + FRIENDSHIPREQUEST_ACCEPTED_DESC;\r\n\r\n        //get the location is will be posted to\r\n        let postLocation = inbox + fileName + \".ttl\";\r\n\r\n        //make a text file and send\r\n        let acceptedTTL = SolidTemplates.getAcceptFriendshipRequest(message.getFrom(), description, postLocation, this._user.getUri());\r\n\r\n        //send friendship accepted to user\r\n        await postSolidFile(inbox, fileName, acceptedTTL);\r\n        //delete friendship request from own pod\r\n        await fileClient.deleteFile(message.getUri());\r\n        //update FriendsFile\r\n        await putSolidFile(friendsFile, friendsTTL);\r\n\r\n        this._modelHolder.addFriend(friend);\r\n    }\r\n\r\n    async fetchBeerData() {\r\n        let url = \"https://testbrouwer.inrupt.net/public/brewerInformation/beers/beersIndex.ttl\";\r\n        let beersIndexTTl = await fileClient.readFile(url);\r\n\r\n        let graph = rdfLib.graph();\r\n        rdfLib.parse(beersIndexTTl, graph, url, \"text/turtle\");\r\n\r\n        let query = graph.each(undefined, RDF('type'), SOLIDLINKEDBEER('Beer'));\r\n        let beers = [];\r\n        query.forEach(blankNode => {\r\n            let brewer = graph.any(blankNode, SOLIDLINKEDBEER('brewedBy'));\r\n            let type = graph.any(blankNode, SOLIDLINKEDBEER('type'));\r\n            let name = graph.any(blankNode, SCHEMA('name'));\r\n            let style = graph.any(blankNode, SOLIDLINKEDBEER('style'));\r\n            let location = graph.any(blankNode, SOLID('instance'));\r\n\r\n            beers.push(new Beer(name.value, type.value, style.value, brewer.value, location.value));\r\n        })\r\n\r\n        return beers;\r\n    }\r\n\r\n    async fetchBeer(beer) {\r\n        let url = beer.getUrl();\r\n        let beerTTl = await fileClient.readFile(url);\r\n\r\n        let graph = rdfLib.graph();\r\n        rdfLib.parse(beerTTl, graph, url, \"text/turtle\");\r\n\r\n        let blankNode = graph.any(undefined, SOLIDLINKEDBEER('beerDescription'));\r\n\r\n        let brewer = graph.any(blankNode, SOLIDLINKEDBEER('brewedBy'));\r\n        let type = graph.any(blankNode, SOLIDLINKEDBEER('type'));\r\n        let name = graph.any(blankNode, SCHEMA('name'));\r\n        let style = graph.any(blankNode, SOLIDLINKEDBEER('style'));\r\n        let description = graph.any(blankNode, SOLIDLINKEDBEER('beerDescription'));\r\n        let containers = [];\r\n        graph.each(blankNode, SOLIDLINKEDBEER('container')).forEach(container => {\r\n            containers.push(container.value);\r\n        });\r\n\r\n        beer.updateInformation(name.value, type.value, style.value, brewer.value, description.value, containers);\r\n        return beer;\r\n    }\r\n\r\n    async postBeerReview(hasReview, beer, rating, review, groups) {\r\n        let ttlFile;\r\n\r\n        let date = new Date();\r\n\r\n        let checkingFolder = this._checkInFolder;\r\n        let filename;\r\n        let postLocation;\r\n        let beerpoints = 0;\r\n\r\n        if (hasReview) {\r\n            filename = date.getTime() + BEERREVIEWFILENAME;\r\n            postLocation = checkingFolder + filename + \".ttl\";\r\n\r\n            ttlFile = SolidTemplates.beerReviewInTemplate(postLocation,\r\n                this._user.getName(),\r\n                this._user.getUri(),\r\n                beer.getUrl(),\r\n                beer.getName(),\r\n                date,\r\n                rating,\r\n                review);\r\n\r\n            beerpoints = 10;\r\n        } else {\r\n            filename = date.getTime() + BEERCHECKINFILENAME;\r\n            postLocation = checkingFolder + filename + \".ttl\";\r\n            ttlFile = SolidTemplates.beerCheckInTemplate(postLocation,\r\n                this._user.getName(),\r\n                this._user.getUri(),\r\n                beer.getUrl(),\r\n                beer.getName(),\r\n                date);\r\n\r\n            beerpoints = 5;\r\n        }\r\n\r\n        groups.forEach(res => {\r\n            if (res === this._user.getCheckInLocation()) {\r\n                this._modelHolder.getCheckInHandler().addBeerPoints(beerpoints);\r\n                this.sendBeerPoints(beerpoints);\r\n\r\n                if (hasReview) {\r\n                    this._modelHolder.getCheckInHandler().addBeerReviewToAmount();\r\n                } else {\r\n                    this._modelHolder.getCheckInHandler().addToCheckInsAmount();\r\n                }\r\n            }else{\r\n                let group = this._modelHolder.getGroupFromCheckInLocationUri(res);\r\n                fileClient.fetch(group.getGroupCheckInIndex()).then(checkInIndex => {\r\n                    let graph = rdfLib.graph();\r\n                    rdfLib.parse(checkInIndex, graph, group.getGroupCheckInIndex(), \"text/turtle\");\r\n                    let userNamedNode = graph.any(rdfLib.sym(this._user.getUri()), SOLIDLINKEDBEER('points'));\r\n                    userNamedNode.value = parseInt(userNamedNode.value) + beerpoints + \"\";\r\n\r\n                    let ttlFile = rdfLib.serialize(undefined, graph, group.getGroupCheckInIndex(), 'text/turtle');\r\n                    putSolidFile(group.getGroupCheckInIndex(),ttlFile);\r\n                })\r\n            }\r\n\r\n            postSolidFile(res, filename, ttlFile);\r\n        });\r\n\r\n        let checkIn = new BeerCheckIn(postLocation);\r\n        checkIn.loadInAttributes(\r\n            this._user.getUri(),\r\n            this._user.getName(),\r\n            beer._location,\r\n            beer._name,\r\n            date.getUTCDate(),\r\n            hasReview ? rating : undefined,\r\n            hasReview ? review : undefined);\r\n        this._modelHolder.getCheckInHandler().addUserCheckIns([checkIn]);\r\n    }\r\n\r\n    async sendBeerPoints(amount) {\r\n        let beerPointsQueryNow = this._appStore.any(this._blankNodeAppStore, SOLIDLINKEDBEER(\"points\"));\r\n        beerPointsQueryNow.value = parseInt(beerPointsQueryNow.value) + amount + \"\";\r\n\r\n        let appTTL = await rdfLib.serialize(undefined, this._appStore, this._appStoreLocation, 'text/turtle');\r\n        putSolidFile(this._appStoreLocation, appTTL);\r\n    }\r\n\r\n    async getBrewerInformation(brewer) {\r\n        let url = brewer.getUrl();\r\n        let brewerTTl = await fileClient.fetch(url);\r\n\r\n        let graph = rdfLib.graph();\r\n        await rdfLib.parse(brewerTTl, graph, url, \"text/turtle\");\r\n\r\n        let blankNode = graph.any(undefined, RDF('type'));\r\n\r\n        let name = graph.any(blankNode, FOAF(\"name\")).value;\r\n        let groep = graph.any(blankNode, DBPEDIA(\"groep\")).value;\r\n        let opgericht = graph.any(blankNode, DBPEDIA(\"opgericht\")).value;\r\n        let owners = [];\r\n        graph.each(blankNode, DBPEDIA(\"owners\")).forEach(owner => {\r\n            owners.push(owner.value);\r\n        })\r\n        let provincie = graph.any(blankNode, DBPEDIA(\"provincie\")).value;\r\n        let email = graph.any(blankNode, SCHEMA(\"email\")).value;\r\n        let taxid = graph.any(blankNode, SCHEMA(\"taxID\")).value;\r\n        let telephone = graph.any(blankNode, SCHEMA(\"telephone\")).value;\r\n        let brewerUrl = graph.any(blankNode, SCHEMA(\"url\")).value;\r\n        let beerIndex = graph.any(blankNode, DBPEDIA('beersIndex'));\r\n\r\n        let blankNodeAdress = graph.any(blankNode, SCHEMA(\"address\"));\r\n\r\n        let postalcode = graph.any(blankNodeAdress, SCHEMA(\"postalCode\")).value;\r\n        let streetaddress = graph.any(blankNodeAdress, SCHEMA(\"streetAddress\")).value;\r\n        let addressregion = graph.any(blankNodeAdress, SCHEMA(\"addressRegion\")).value;\r\n        let addresslocality = graph.any(blankNodeAdress, SCHEMA(\"addressLocality\")).value;\r\n\r\n        brewer.loadInBrewerInformation(name,\r\n            groep,\r\n            opgericht,\r\n            owners,\r\n            provincie,\r\n            email,\r\n            taxid,\r\n            telephone,\r\n            postalcode,\r\n            streetaddress,\r\n            addressregion,\r\n            addresslocality);\r\n\r\n        this.fetchBeerData(beerIndex.value).then(res => {\r\n            brewer.addBeers(res);\r\n        });\r\n\r\n        return brewer;\r\n    }\r\n\r\n    async getAllCheckInsLoggedInUser() {\r\n        if (!this._modelHolder.getCheckInHandler().getAllCheckInsGotten()) {\r\n            this._modelHolder.getCheckInHandler().setUserCheckIns(\r\n                await getAllUserCheckIns(\r\n                    this._modelHolder.getUser().getBeerDrinkerFolder()\r\n                )\r\n            );\r\n\r\n            this._modelHolder.getCheckInHandler().setAllCheckInsGotten(true);\r\n        }\r\n    }\r\n\r\n    async makeNewGroup(beerdrinkerUrl, groupName, friends) {\r\n        let groupUrl = beerdrinkerUrl + GROUPFOLDER + groupName + \"/\";\r\n        let groupUrlAcl = groupUrl + \".acl\";\r\n        let appdataName = groupUrl + GROUP_DATA_FILE;\r\n\r\n        //maak groep folder aan\r\n        await fileClient.createFolder(groupUrl);\r\n\r\n        //maak appdata file aan\r\n        let body = SolidTemplates.getGroupAppDataTTL(appdataName, friends, this._user.getUri(), groupName);\r\n        await postSolidFile(groupUrl, GROUP_DATA_FILENAME, body);\r\n\r\n        //maak checkins folder aan\r\n        let checkins = groupUrl + CHECKIN_FOLDER;\r\n        let checkInsAcl = checkins + \".acl\";\r\n\r\n        await fileClient.createFolder(checkins);\r\n        let groupCheckInAclTtl = SolidTemplates.getGroupCheckInsAclTTL(checkins, appdataName, checkInsAcl, this._user.getUri());\r\n        await putSolidFile(checkInsAcl, groupCheckInAclTtl);\r\n\r\n        //zet de acl van de groups folder online\r\n        let groupAclTtl = SolidTemplates.getGroupAclTTL(groupUrl, appdataName, groupUrlAcl, this._user.getUri());\r\n        await putSolidFile(groupUrlAcl, groupAclTtl);\r\n\r\n        //make checkins index\r\n        let checkInsIndex = groupUrl + CHECKIN_INDEX_FILE;\r\n        let checkInsIndexAcl = checkInsIndex + \".acl\";\r\n        let checkInIndexBody = SolidTemplates.getCheckInIndexBody(checkInsIndex, friends, this._user);\r\n\r\n        await postSolidFile(groupUrl, CHECKIN_INDEX_NAME, checkInIndexBody);\r\n\r\n        let aclBody = SolidTemplates.groupCheckInIndexAcl(\r\n            checkInsIndex,\r\n            appdataName,\r\n            checkInsIndexAcl,\r\n            this._user.getUri());\r\n        await putSolidFile(checkInsIndexAcl, aclBody);\r\n\r\n        //stuur de uitnodigingen naar de vrienden\r\n        friends.forEach(res => {\r\n            let fileName = GROUPINVITATION_NAME + groupName;\r\n            let desc = GROUPINVITATION_DESC + groupName + \"?\";\r\n\r\n            let location = res.getBeerDrinkerFolder() + INBOX_FOLDER;\r\n            let postLocation = location + fileName + \".ttl\";\r\n\r\n            let inv = SolidTemplates.getGroupInvitaion(res.getUri(),\r\n                desc,\r\n                postLocation,\r\n                this._user.getUri(),\r\n                groupUrl,\r\n                groupName\r\n            );\r\n\r\n            postSolidFile(location, fileName, inv);\r\n        });\r\n\r\n        let group = new Group(groupUrl);\r\n        group.setProperties(groupName, checkins, appdataName, this._user.getUri(), friends.map(res => {\r\n            return res.getUri()\r\n        }));\r\n        this._modelHolder.addGroup(group);\r\n    }\r\n\r\n    async acceptGroupRequest(message) {\r\n        //see if the person is your friend\r\n        let friend = this._modelHolder.getFriendFromUri(message.getFrom());\r\n\r\n        //TODO maak een ttl file voor het accepteren en verzend deze naar de persoon.\r\n\r\n        //maak een ttl file om het in eigen groep folder te zetten\r\n        let folderLocation = this._user.getBeerDrinkerFolder() + GROUPFOLDER;\r\n        let postlocation = folderLocation + message.getGroupName();\r\n        let groupLocation = message.getLocation();\r\n        let ownGroupBody = SolidTemplates.getGroupOtherPersonTTL(groupLocation, postlocation);\r\n\r\n        await postSolidFile(folderLocation, message.getGroupName(), ownGroupBody);\r\n\r\n        //verwijder het bericht\r\n        await fileClient.deleteFile(message.getUri());\r\n    }\r\n\r\n    async declineGroupRequest(message) {\r\n        //verwijder het bericht\r\n        await fileClient.deleteFile(message.getUri());\r\n\r\n        //TODO decline stuur het door, zodat je eruit wordt getrapt.\r\n    }\r\n}\r\n\r\nexport default SolidCommunicator;","import React from 'react';\r\nimport '../css/NavBar.scss'\r\n\r\nclass NavBar extends React.Component{\r\n    onInput = (e) => {\r\n        this.props.onBeerSearch(e.target.value);\r\n    }\r\n\r\n    render(){\r\n        let cldn =React.Children.toArray( this.props.children);\r\n        let input;\r\n\r\n        cldn = cldn.map((child, index) => {            \r\n            if(index !== cldn.length - 1){\r\n                return (\r\n                    <li key = {child.props.to} className = \"navBarOptionContainer\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }else{\r\n                return(\r\n                    <li key = {child.props.to} className = \"navBarOptionContainerLast\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }            \r\n        });\r\n\r\n        if(this.props.loggedIn){\r\n            input = (<li className = \"navBarSearch\">\r\n                <input  placeholder = \"search for beers\" value = {this.props.searchQuery} onChange = {this.onInput} />\r\n                <input type = \"button\" value = \"x\" onClick = {this.props.onSearchBarButtonClick}/>\r\n            </li>)\r\n        }\r\n\r\n        return(\r\n            <nav>\r\n                <ul id = \"navBar\">\r\n                    {cldn}\r\n                    {input}\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport Knipsel from '../../assets/Knipsel.png'\r\nimport '../css/Home.scss'\r\n\r\nclass Home extends React.Component{\r\n    render(){\r\n        return(\r\n            <section className = \"home\">\r\n                <h3>\r\n                    This is an application that is powered by Solid.<br/> \r\n                    Log in with your pod to use the application\r\n                </h3>\r\n                <br/>\r\n                <img src= {Knipsel} alt = \"Inrupt logo\"/>\r\n                <br/>\r\n                <h3 style = {{color : \"red\"}}>\r\n                    Carefull, This application is still in development and might mess up your pod.\r\n                    if you want to test it out, I recommend you make a new pod that you can delete\r\n                </h3>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport '../css/LogIn.scss'\r\n\r\nimport solidAuth from 'solid-auth-client'\r\n\r\nclass LogIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loginAsBrewer: false\r\n        }\r\n    }\r\n\r\n    onChangeCheckBox = () => {\r\n        this.setState({\r\n            loginAsBrewer: !this.state.loginAsBrewer\r\n        })\r\n    }\r\n\r\n    onButtonClick = () => {\r\n        let popupUri = './popup.html';\r\n        solidAuth.popupLogin({ popupUri }).then(() => {\r\n            solidAuth.currentSession().then(session => {\r\n                this.props.onLoggedIn();\r\n                this.props.history.push(`/profile`)\r\n            })\r\n        })\r\n    }\r\n\r\n    onRegisterClick = () => {\r\n        window.location.assign('https://inrupt.net/');\r\n    }\r\n\r\n    render() {\r\n        let typeLogIn;\r\n\r\n        if (this.state.loginAsBrewer) {\r\n            typeLogIn = <h1>Brewer</h1>\r\n        } else {\r\n            typeLogIn = <h1>Beer Drinker</h1>\r\n        }\r\n\r\n        let activeClass = this.state.loginAsBrewer ? \"logInBrewer\" : \"logInBeerDrinker\";\r\n\r\n        return (\r\n            <section className={[\"logInScreen \", activeClass].join(' ')}>\r\n                <div className=\"loginField\">\r\n                    {typeLogIn}\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" onChange={this.onChangeCheckBox} />\r\n                        <span className=\"slider\"></span>\r\n                    </label>\r\n\r\n                    <br />\r\n                    <div>\r\n                        <button onClick = {this.onRegisterClick}>Register</button>\r\n                        <button onClick = {this.onButtonClick}>Log in</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LogIn;\r\n","import React from 'react';\r\nimport Select from \"react-select\";\r\nimport \"../css/GroupMakerOverlay.scss\"\r\n\r\nclass GroupMakerOverlay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    onDivClick = (e) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.props.onOverLayCancelClick} id=\"overlayGroup\" style={this.props.overlay ? { display: \"block\" } : { display: \"none\" }}>\r\n                <div id=\"textGroup\" onClick={this.onDivClick}>\r\n                    <h5>\r\n                        makeGroup\r\n                    </h5>\r\n                    <span>group name</span> : <input value={this.props.groupName} onChange={this.props.onChange}/>\r\n                    <button onClick={this.props.makeGroup}>make new group</button>\r\n                    <Select\r\n                        isMulti = {true}\r\n                        options={this.props.valuesSelector}\r\n                        value = {this.props.selectedFriends}\r\n                        onChange = {this.props.onSelect}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GroupMakerOverlay;","import React from 'react';\r\nimport \"../css/Groups.scss\";\r\nimport GroupMakerOverlay from \"../../component/GroupMakerOverlay\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Groups extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            overlay : false,\r\n            groupName : \"b\",\r\n            selectedFriends : []\r\n        }\r\n    }\r\n\r\n    onMakeGroupClick= () => {\r\n        this.setState({\r\n            overlay : true\r\n        });\r\n    };\r\n\r\n    onOverLayCancelClick= () => {\r\n        this.setState({\r\n            overlay : false\r\n        });\r\n    };\r\n\r\n    makeGroup = () => {\r\n        if(this.state.groupName !== \"\" && !(/\\s/.test(this.state.groupName))){\r\n            let beerDrinkerFolder = this.props.modelHolder.getUser().getBeerDrinkerFolder();\r\n            let friends = this.state.selectedFriends.map(res => {\r\n                return res.value;\r\n            });\r\n\r\n            this.props.solidCommunicator.makeNewGroup(beerDrinkerFolder, this.state.groupName, friends).then(res => {\r\n            });\r\n\r\n            this.setState({\r\n                overlay : false,\r\n                selectedFriends : [],\r\n                groupName : \"\"\r\n            });\r\n        }\r\n    };\r\n\r\n    onSelectFriend = (e) => {\r\n        this.setState({\r\n            selectedFriends : e\r\n        })\r\n    };\r\n\r\n    onGroupNameChange = (e) => {\r\n        let text  = e.target.value;\r\n        this.setState({\r\n            groupName : text\r\n        })\r\n    };\r\n\r\n    render(){\r\n        let friendsComs = this.props.modelHolder.getFriends().map(res => {\r\n            return {value: res, label : res.getName()}\r\n        });\r\n\r\n        let groups = this.props.modelHolder.getGroups().map((res, index) => {\r\n            return (\r\n                <li key = {res.getUrl() + res.getLeader()}>\r\n                    <Link to={`/groups/${index}`}>{res.getName()}</Link>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return(\r\n            <section id = \"groupsPage\">\r\n                <h1>\r\n                    Groups\r\n                </h1>\r\n                <button className= \"makeNewGroup\" onClick={this.onMakeGroupClick}>makeNewGroup</button>\r\n                <GroupMakerOverlay\r\n                    overlay = {this.state.overlay}\r\n                    onOverLayCancelClick = {this.onOverLayCancelClick}\r\n                    onAddReviewClick = {this.onAddReviewClick}\r\n                    addReview = {this.state.addReview}\r\n                    checkInBeer = {this.onPostBeerReview}\r\n                    onChange = {this.onGroupNameChange}\r\n                    groupName = {this.state.groupName}\r\n                    valuesSelector = {friendsComs}\r\n                    selectedFriends = {this.state.selectedFriends}\r\n                    onSelect = {this.onSelectFriend}\r\n                    makeGroup = {this.makeGroup}\r\n                />\r\n\r\n                <ul>\r\n                    {groups}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Groups;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport '../css/Friends.scss'\r\n\r\nclass Friends extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputText : \"https://\",\r\n            error : undefined\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            inputText: e.target.value\r\n        })        \r\n    }\r\n\r\n    onButtonClick = async () => {\r\n        let friends = this.props.modelHolder.getFriends();\r\n\r\n        friends = friends.filter(friend => {\r\n            let text = this.state.inputText.toUpperCase();\r\n            let friendUri = friend.getUri().toUpperCase();\r\n            let friendUri2 = friend.getUri().toUpperCase().replace(\"#ME\", \"\").replace(\"#I\", \"\");\r\n            let friendUri3 = friendUri.replace(\"HTTPS://\", \"\");\r\n            let friendUri4 = friendUri2.replace(\"HTTPS://\", \"\");\r\n            \r\n            return  friendUri === text || friendUri2 === text || friendUri3 === text || friendUri4 === text;\r\n        });\r\n\r\n        if (friends.length !== 0){\r\n            //this is a mess and lazy programming but keep it in because i do not have time to change it.\r\n            let index = this.props.user.getFriends().map((profile, index) => {\r\n                if(friends[0].getUri() === profile.getUri()){\r\n                    return index;\r\n                }\r\n            }).filter(index => {return index})\r\n\r\n            this.props.history.push(`/friend/${index[0]}`);\r\n        } else if(this.props.modelHolder.getUser().getUri() === this.state.inputText){\r\n            this.props.history.push(\"/profile\");\r\n        }else{\r\n            try{\r\n                let result = await this.props.solidCommunicator.getUserFile(this.state.inputText);\r\n                \r\n                    this.props.history.push({\r\n                        pathname:\"/user\",\r\n                        state:{\r\n                            result: result\r\n                        }\r\n                    });\r\n            }catch(e){\r\n                this.setState({error : e.message})\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let friends = this.props.modelHolder.getFriends();\r\n        friends = friends.filter(friend => {\r\n            let text = this.state.inputText.toUpperCase();\r\n            if(friend.getName()){\r\n                return friend.getName().toUpperCase().includes(text) || friend.getUri().toUpperCase().includes(text);\r\n            }\r\n\r\n            return friend.getUri().toUpperCase().includes(text);\r\n        });\r\n        \r\n        let friendsElements = friends.map((friend, index) => {\r\n            return <li key = {friend.getUri()}>\r\n                <Link  to= {`/friend/${index}`}>\r\n                    <p>\r\n                        {friend.getName() ? friend.getName() : friend.getUri()}\r\n                    </p>\r\n                </Link>\r\n            </li> \r\n        });\r\n\r\n        return(\r\n            <section className = \"friends\">\r\n                <div className = \"searchFriends\">\r\n                    <h3>\r\n                        Make new friends\r\n                    </h3>\r\n                    <br/>\r\n                    <input type = \"text\" placeholder =\"profilecard link\" value = {this.state.inputText} onChange = {this.onChange}/>\r\n                    <button onClick = {this.onButtonClick}>Search on the web</button>\r\n                    <p style = {{color: \"red\"}}>{this.state.error}</p>\r\n                </div>\r\n\r\n                <div className = \"friendSection\">\r\n                    <h3>\r\n                        Friends\r\n                    </h3>\r\n                    <ul >\r\n                        {friendsElements}\r\n                    </ul>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from \"react\";\r\nimport \"../css/BeerCheckInComponent.scss\"\r\n\r\nclass BeerCheckInComponent extends React.Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n    }\r\n\r\n    render() {\r\n        let checkIn = this.props.checkin;\r\n        let rating;\r\n        let review;\r\n\r\n        if(checkIn._rating){\r\n            rating = <p>rating: {checkIn._rating}</p>\r\n        }\r\n\r\n        if(checkIn._review){\r\n            review = <p>review: {checkIn._review}</p>\r\n        }\r\n\r\n        return (\r\n            <li className= \"BeerCheckInComponent\">\r\n                <h5>\r\n                    {checkIn._userName ? checkIn._userName : checkIn._userWebId} is drinking a {checkIn._beerName}\r\n                </h5>\r\n                {rating}\r\n                {review}\r\n            </li>)\r\n    }\r\n}\r\n\r\nexport default BeerCheckInComponent;","import React from 'react';\r\nimport '../css/Profile.scss'\r\nimport profilePic from '../../assets/profilePic.png'\r\nimport {Link} from \"react-router-dom\";\r\nimport BeerCheckInComponent from \"../../component/BeerCheckInComponent\";\r\n\r\nclass FriendPage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            user : this.props.modelHolder.getFriendFromIndex(this.props.match.params.id)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let user = this.state.user;\r\n        let imgUrl = user.getImageUrl();\r\n        let userCheckIns = user.getCheckInHandler().getUserCheckIns()\r\n        let content;\r\n\r\n        userCheckIns = userCheckIns.map(checkIn => {\r\n            return (\r\n                <BeerCheckInComponent key = {checkIn._fileLocation} checkin = {checkIn}/>\r\n            )\r\n        })\r\n\r\n        if(user.getStartDate()){\r\n            content = (<div className=\"leftColum\">\r\n                <h1>\r\n                    {user.getName()}\r\n                </h1>\r\n                {/*TODO make image load faster*/}\r\n                <img src = {imgUrl ? imgUrl : profilePic} alt = \"\"/>\r\n                <p>\r\n                    check-ins : {user.getCheckInHandler().getCheckInsAmount()}\r\n                </p>\r\n                <p>\r\n                    reviews : {user.getCheckInHandler().getBeerReviewsAmount()}\r\n                </p>\r\n                <p>\r\n                    Begin date : {dateToString(user.getStartDate())}\r\n                </p>\r\n                <p>\r\n                    beerbonus points : {user.getCheckInHandler().getBeerPoints()}\r\n                </p>\r\n            </div>);\r\n        }\r\n\r\n        return(\r\n            <section className = \"profileScreen\">\r\n                \r\n                <div className=\"row\">\r\n                    {content}\r\n                    <div className=\"column\">\r\n\r\n                        <h1>\r\n                            Recent activities\r\n                        </h1>\r\n                        <ul>\r\n                            {userCheckIns}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n} \r\n\r\nfunction dateToString(date){\r\n    var dd = String(date.getDate()).padStart(2, '0');\r\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n    var yyyy = date.getFullYear();\r\n\r\n    return dd + '/' + mm + '/' + yyyy; \r\n}\r\n\r\nexport default FriendPage;","import React from 'react';\r\nimport '../css/CheckIns.scss'\r\nimport BeerCheckInComponent from \"../../component/BeerCheckInComponent\";\r\n\r\nclass Friends extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            res : []\r\n        }\r\n\r\n        this.getAllCheckIns();\r\n    }\r\n\r\n    getAllCheckIns = () => {\r\n        this.props.solidCommunicator.getAllCheckInsLoggedInUser();\r\n    }\r\n\r\n\r\n    render(){\r\n        let userCheckIns = this.props.modelHolder.getCheckInHandler().getUserCheckIns();\r\n\r\n        userCheckIns = userCheckIns.map(checkIn => {\r\n            return (\r\n                <BeerCheckInComponent key = {checkIn._fileLocation} checkin = {checkIn}/>\r\n            )\r\n        })\r\n\r\n        return(\r\n            <section id = \"beerCheckIns\">\r\n                <h1>\r\n                    Check-Ins\r\n                </h1>\r\n                <ul>\r\n                    {userCheckIns}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport '../css/BeerResults.scss';\r\nimport {Link, Redirect} from \"react-router-dom\";\r\n\r\nclass BeerResults extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.solidCommunicator.fetchBeerData().then(res => {\r\n            if (res) {\r\n                this.props.modelHolder.setBeers(res);\r\n            }\r\n        });\r\n    }\r\n\r\n    onLinkClick = (e) => {\r\n        this.props.modelHolder.setBeer(e);\r\n\r\n        this.props.onLinkClick();\r\n    }\r\n\r\n    render() {\r\n\r\n        let elements = this.props.modelHolder.getBeers().map(listItem => {\r\n            return (\r\n                <li key={listItem._location}>\r\n                    <Link to={`/beer/${listItem._name}`}\r\n                          onClick={() => {\r\n                              this.onLinkClick(listItem)\r\n                          }}>\r\n                        {listItem._name}\r\n                    </Link>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <section className=\"beerResults\">\r\n                <h1>Beer Results</h1>\r\n                <ul>\r\n                    {elements}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerResults;\r\n\r\n","import React from 'react';\r\nimport '../css/Profile.scss'\r\nimport profilePic from '../../assets/profilePic.png'\r\nimport BeerCheckInComponent from \"../../component/BeerCheckInComponent\";\r\nimport {Link, Redirect, withRouter} from \"react-router-dom\";\r\n\r\nclass Profile extends React.Component{\r\n    render(){\r\n        let user = this.props.modelHolder.getUser();\r\n        let imgUrl = user.getImageUrl();\r\n        let checkInHandler = this.props.modelHolder.getCheckInHandler();\r\n        let userCheckIns = checkInHandler.getUserCheckIns();\r\n        let content;\r\n\r\n\r\n        userCheckIns = userCheckIns.map(checkIn => {\r\n            return (\r\n                <BeerCheckInComponent key = {checkIn._fileLocation} checkin = {checkIn}/>\r\n            )\r\n        })\r\n\r\n        if(user.getBeginDate()){\r\n            content = (<div className=\"leftColum\">\r\n                    <h1>\r\n                        {user.getName()}\r\n                    </h1>\r\n                    {/*TODO make image load faster*/}\r\n                    <img src = {imgUrl ? imgUrl : profilePic} alt = \"\"/>\r\n                    <p>\r\n                        check-ins : {checkInHandler.getCheckInsAmount()}\r\n                    </p>\r\n                    <p>\r\n                        reviews : {checkInHandler.getBeerReviewsAmount()}\r\n                    </p>\r\n                    <p>\r\n                        Begin date : {dateToString(user.getBeginDate())}\r\n                    </p>\r\n                    <p>\r\n                        beerbonus points : {checkInHandler.getBeerPoints()}\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return(\r\n            <section className = \"profileScreen\">\r\n                <div className=\"row\">\r\n                    {content}\r\n                    <div className=\"column\">\r\n                        <div className = \"checkinDiv\">\r\n                            <Link to=\"/checkIns\">All check ins &rarr;</Link>\r\n                        </div>\r\n                        <h1>\r\n                            Recent activities\r\n                        </h1>\r\n                            <ul>\r\n                                {userCheckIns}\r\n                            </ul>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nfunction dateToString(date){\r\n    var dd = String(date.getDate()).padStart(2, '0');\r\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n    var yyyy = date.getFullYear();\r\n\r\n    return dd + '/' + mm + '/' + yyyy;\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport '../css/User.scss'\r\nimport profilePic from '../../assets/profilePic.png';\r\n\r\nclass User extends React.Component{ \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            clicked: false,\r\n            result : this.props.location.state.result\r\n        }\r\n    }\r\n\r\n    onNotJoinedButtonClick = async () => {\r\n        let result = this.state.result;\r\n        await this.props.solidCommunicator.inviteUserToSolib(result.url, result.inbox);\r\n\r\n        this.setState(\r\n            {\r\n                clicked : true\r\n            });\r\n    }\r\n\r\n    sendFriendShipRequest = async () => {\r\n        //TODO check if friendship request is already set\r\n        let result = this.state.result;\r\n        await this.props.solidCommunicator.sendFriendshipRequest(result.url, result.appLocation);\r\n\r\n        this.setState(\r\n            {\r\n                clicked : true}\r\n            );  \r\n    }\r\n\r\n    render(){\r\n        let result = this.props.location.state.result;\r\n        let button;\r\n\r\n        if(!this.state.clicked){\r\n            if(result.appLocation){\r\n                button = (<button onClick = {this.sendFriendShipRequest}>Send friendship request</button>);\r\n            }else{\r\n                button = (<button onClick = {this.onNotJoinedButtonClick}>Invite to Social linked beer</button>);\r\n            }\r\n        }else{\r\n            button = (<button disabled= {true}>Request send</button>)\r\n        }\r\n\r\n        return(\r\n            <section className = \"userPageNew\">\r\n                <div className = \"userPageHead\">              \r\n                    <h1>\r\n                        {result.name}\r\n                    </h1>\r\n                    <img src = {result.imageUrl ? result.imageUrl : profilePic} alt = \"\"/>\r\n                </div>\r\n                <div className = \"userButtonDiv\">\r\n                    {button}\r\n                </div>\r\n                <div className = \"userInfo\">\r\n                    <p>Uri : {result.url}</p>\r\n                    <p>Has social linked beer account?: {result.appLocation ? \"Yes\" : \"No\"}</p>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport \"../css/Inbox.scss\";\r\n\r\nclass Inbox extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    declineFriendShipRequest = (index, message) => {\r\n        this.props.modelHolder.spliceAtIndex(index);\r\n        this.props.solidCommunicator.declineFriendSchipRequest(message);\r\n    };\r\n\r\n    acceptFriendShipRequest = (index, message) => {\r\n        this.props.modelHolder.spliceAtIndex(index);\r\n        this.props.solidCommunicator.acceptFriendSchipRequest(message);\r\n    };\r\n\r\n    declineGroupRequest = (index, message) => {\r\n        this.props.modelHolder.spliceAtIndex(index);\r\n        this.props.solidCommunicator.declineGroupRequest(message);\r\n    };\r\n\r\n    acceptGroupRequest = (index, message) => {\r\n        this.props.modelHolder.spliceAtIndex(index);\r\n        this.props.solidCommunicator.acceptGroupRequest(message);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.solidCommunicator.getInboxContents();\r\n    }\r\n\r\n    render(){\r\n        let items = this.props.modelHolder.getInboxMessages().map((message, index)=> {\r\n            let buttonDiv;\r\n\r\n            if(message.getType() === \"FriendshipRequest\"){\r\n                buttonDiv = (<div className = \"buttonDiv\">\r\n                    <button onClick = {() => this.declineFriendShipRequest(index,message)}>Decline</button>\r\n                    <button onClick = {() => this.acceptFriendShipRequest(index, message)}>Accept</button>\r\n                </div>)\r\n            }else if(message.getType() === \"GroupInvitation\"){\r\n                buttonDiv = (<div className = \"buttonDiv\">\r\n                    <button onClick = {() => this.declineGroupRequest(index,message)}>Decline</button>\r\n                    <button onClick = {() => this.acceptGroupRequest(index, message)}>Accept</button>\r\n                </div>)\r\n            }\r\n\r\n            return (<li key = {message.getUri()}>\r\n                <h4>{message.getType()}</h4>\r\n                <p>{message.getFrom() ? \"from :\" + message.getFrom(): \"fetching file\"}</p>\r\n                <p>{message.getDesc()}</p>\r\n                {buttonDiv}\r\n            </li>)\r\n        })\r\n\r\n        return(\r\n            <section className = \"inbox\">\r\n                <h1>\r\n                    Inbox\r\n                </h1>\r\n\r\n                <ul>\r\n                    {items}\r\n                </ul>\r\n                \r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inbox;\r\n","import React from 'react';\r\nimport '../css/BeerCheckInScreen.scss';\r\n\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Select from \"react-select\";\r\n\r\nclass BeerCheckInOverlay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    onDivClick = (e) => {\r\n        e.stopPropagation();\r\n    }\r\n    \r\n    render() {\r\n        let rating;\r\n        let text;\r\n\r\n        if (this.props.addReview) {\r\n            rating = (<Rating\r\n                name=\"beerRating\"\r\n                value={this.props.beerRating}\r\n                precision={0.5}\r\n                onChange={(event, newValue) => {\r\n                    this.props.setBeerRating(newValue);\r\n                }}\r\n                />\r\n            )\r\n\r\n            text = (\r\n                <textarea\r\n                    value={this.props.beerReview}\r\n                    onChange={event => {\r\n                        this.props.onBeerReviewChange(event.target.value)\r\n                    }\r\n                    }/>\r\n\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div onClick={this.props.onOverLayCancelClick} id=\"overlay\" style={this.props.overlay ? { display: \"block\" } : { display: \"none\" }}>\r\n                <div id=\"text\" onClick={this.onDivClick}>\r\n                    <h5>\r\n                        check in beer\r\n                    </h5>\r\n                    <button onClick = {this.props.onAddReviewClick}>{this.props.addReview ? \"dont add review\": \"Add review\"}</button>\r\n                    {rating}\r\n                    {text}\r\n                    <br />\r\n                    <button onClick = {this.props.checkInBeer}>check in beer</button>\r\n                    <Select\r\n                        isMulti = {true}\r\n                        onChange = {this.props.onSelect}\r\n                        options = {this.props.groupsOptions}\r\n                        value = {this.props.selectedOptions}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerCheckInOverlay;","import Observable from \"./Observable\";\r\n\r\nclass Brewer extends Observable{\r\n    constructor( url){\r\n        super();\r\n\r\n        this._url = url;\r\n        this._beers = [];\r\n    }\r\n\r\n    loadInBrewerInformation(name, groep, opgericht, owners, provincie, email, taxID, telephone, postalCode, streetAddress, addressRegion, addressLocality){\r\n        this._name = name;\r\n        this._groep = groep;\r\n        this._opgericht = opgericht;\r\n        this._owners = owners;\r\n        this._provincie = provincie;\r\n        this._email = email;\r\n        this._taxid = taxID;\r\n        this._telephone = telephone;\r\n        this._postalcode = postalCode;\r\n        this._streetAdress = streetAddress;\r\n        this._addressRegion = addressRegion;\r\n        this._addressLocality = addressLocality;\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    addBeers(beers){\r\n        this._beers = this._beers.concat(beers);\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getUrl(){\r\n        return this._url;\r\n    }\r\n\r\n    update(){\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getGroep(){\r\n        return this._groep;\r\n    }\r\n}\r\n\r\nexport default Brewer;","import React from 'react';\r\nimport '../css/BeerDetailScreen.scss';\r\nimport BeerCheckInOverlay from '../../component/BeerCheckInOverlay';\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport Brewer from \"../../model/HolderComponents/Brewer\";\r\n\r\nclass BeerDetailScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            beer: this.props.modelHolder.getBeer(),\r\n            overlay : false,\r\n            beerReview : \"\",\r\n            beerRating : 2.5,\r\n            addReview: false,\r\n            selectedOptions : [{value: this.props.modelHolder.getUser().getCheckInLocation(), label : \"Public\"}]\r\n        };\r\n\r\n        this.props.modelHolder.setBrewer(new Brewer(this.state.beer.getBrewer()));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.solidCommunicator.fetchBeer(this.props.modelHolder.getBeer()).then(res => {});\r\n    }\r\n\r\n    onPostBeerReview = async () => {\r\n        await this.props.solidCommunicator.postBeerReview(this.state.addReview,\r\n            this.state.beer,\r\n            this.state.beerRating,\r\n            this.state.beerReview,\r\n            this.state.selectedOptions.map(res => {return res.value})\r\n        );\r\n\r\n        this.setState({\r\n            overlay: false,\r\n            beerReview : \"\",\r\n            beerRating : 2.5,\r\n            addReview: false,\r\n            selectedOptions : [{value: this.props.modelHolder.getUser().getCheckInLocation(), label : \"Public\"}]\r\n        })\r\n    }\r\n\r\n    onCheckInClick= () => {\r\n        this.setState({\r\n            overlay : true\r\n        });\r\n    }\r\n\r\n    onOverLayCancelClick= () => {\r\n        this.setState({\r\n            overlay : false\r\n        });\r\n    }\r\n\r\n    setBeerRating = (rating) => {\r\n        this.setState({\r\n            beerRating : rating\r\n        });\r\n    }\r\n\r\n    onBeerReviewChange = (text) => {\r\n        this.setState({\r\n            beerReview : text\r\n        });\r\n    }\r\n    \r\n    onAddReviewClick = () => {\r\n        this.setState({\r\n            addReview: !this.state.addReview,\r\n            beerRating: 2.5,\r\n            beerReview: \"\"\r\n        })\r\n    };\r\n\r\n    onSelectGroup = (e) => {\r\n        this.setState({\r\n            selectedOptions : e\r\n        })\r\n    };\r\n\r\n    render() {\r\n        let beer = this.state.beer;\r\n        let brewerName = beer._brewer.replace(\"https://\", \"\").replace(/\\..*/, \"\");\r\n\r\n        let groups = this.props.modelHolder.getGroups().map(res => {\r\n            return {value: res.getCheckInLocation(), label : res.getName()}\r\n        });\r\n\r\n        groups.push({value: this.props.modelHolder.getUser().getCheckInLocation(), label : \"Public\"});\r\n\r\n        return (\r\n            <section className=\"beerDetailScreen\">\r\n                <h1>\r\n                    {beer._name}\r\n                </h1>\r\n                <p>\r\n                    {beer._description}\r\n                </p>\r\n                <div>\r\n                    <button onClick= {this.onCheckInClick}>Check in beer</button>\r\n                </div>\r\n                <p>\r\n                    <Link to={`/brewer/${brewerName}`}>\r\n                        brewer\r\n                    </Link>\r\n                </p>\r\n                <p>\r\n                    containers: {beer._containers}\r\n                </p>\r\n\r\n                <BeerCheckInOverlay\r\n                 overlay = {this.state.overlay}\r\n                 beerReview = {this.state.beerReview}\r\n                 beerRating = {this.state.beerRating}\r\n                 onOverLayCancelClick = {this.onOverLayCancelClick}\r\n                 setBeerRating = {this.setBeerRating}\r\n                 onBeerReviewChange = {this.onBeerReviewChange}\r\n                 onAddReviewClick = {this.onAddReviewClick}\r\n                 addReview = {this.state.addReview}\r\n                 checkInBeer = {this.onPostBeerReview}\r\n                 groupsOptions = {groups}\r\n                 onSelect = {this.onSelectGroup}\r\n                 selectedOptions = {this.state.selectedOptions}\r\n                />\r\n                \r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerDetailScreen;\r\n","import React from \"react\";\r\nimport \"../css/BrewerPage.scss\"\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass BrewerPage extends React.Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            brewer: this.props.modelHolder.getBrewer()\r\n        }\r\n\r\n        this.getBrewer();\r\n    }\r\n\r\n    getBrewer = () => {\r\n        this.props.solidCommunicator.getBrewerInformation(this.state.brewer).then(res => {\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let section;\r\n        let brewer = this.state.brewer;\r\n        let beers;\r\n\r\n        if (brewer.getGroep()) {\r\n            section = (\r\n                <div>\r\n                    <h1>\r\n                        {this.state.brewer._name}\r\n                    </h1>\r\n                    <p>{brewer._groep}</p>\r\n                    <p>{brewer._opgericht}</p>\r\n                    <p>{brewer._owners.join(\", \")}</p>\r\n                    <p>{brewer._provincie}</p>\r\n                    <p>{brewer._email}</p>\r\n                    <p>{brewer._taxid}</p>\r\n                    <p>{brewer._telephone}</p>\r\n                    <p>{brewer._url}</p>\r\n                    <p>{brewer._postalcode}</p>\r\n                    <p>{brewer._streetAdress}</p>\r\n                    <p>{brewer._addressRegion}</p>\r\n                    <p>{brewer._addressLocality}</p>\r\n                </div>\r\n            )\r\n\r\n            if (brewer._beers) {\r\n                beers = brewer._beers.map(listItem => {\r\n                    return ( <li key = {listItem._location}>\r\n                            <Link to={{\r\n                                pathname: `/beer/${listItem._name}`,\r\n                                state: {\r\n                                    beer : listItem\r\n                                }\r\n                            }} onClick={this.props.onLinkClick}>\r\n                                {listItem._name}\r\n                            </Link>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        }\r\n\r\n        return (\r\n            <section className=\"brewerPage\">\r\n                {section}\r\n\r\n                <br/>\r\n                <br/>\r\n\r\n                <h3>Beers</h3>\r\n                <ul>\r\n                    {beers}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BrewerPage;","import React from 'react';\r\nimport \"../css/GroupDetail.scss\";\r\nimport BeerCheckInComponent from \"../../component/BeerCheckInComponent\";\r\nimport {Icon} from \"semantic-ui-react\";\r\n\r\nclass GroupDetail extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            group: this.props.modelHolder.getGroupFromIndex(this.props.match.params.id)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let userCheckIns = this.state.group.getCheckInHandler().getUserCheckIns();\r\n        userCheckIns = userCheckIns.map(checkIn => {\r\n            return (\r\n                <BeerCheckInComponent key={checkIn._fileLocation} checkin={checkIn}/>\r\n            )\r\n        });\r\n\r\n        let groupMembers = this.state.group.getMembers();\r\n        groupMembers.push(this.state.group.getLeader());\r\n        groupMembers.sort((a, b) => {\r\n            return b.points - a.points;\r\n        })\r\n\r\n        groupMembers = groupMembers.map(res => {\r\n            let name;\r\n\r\n            if (this.state.group.getLeader()) {\r\n                name = (<p>{res === this.state.group.getLeader() ? <b>leader: </b> : undefined}\r\n                    {res.member + \" [\" + res.points + \"]\"}\r\n                </p>);\r\n            }\r\n\r\n            return (<li key={res}>\r\n                    {name}\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <section className=\"groupDetailScreen\">\r\n                <h1>{this.state.group.getName()}</h1>\r\n                <div className=\"groupDetailSection\">\r\n                    <div className=\"participants\">\r\n                        <Icon name=\"star\"/>\r\n                        <h2>\r\n                            Users\r\n                        </h2>\r\n                        <ul>\r\n                            {groupMembers}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"checkInsGroup\">\r\n                        <h2>\r\n                            Checkins\r\n                        </h2>\r\n                        <ul>\r\n                            {userCheckIns}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GroupDetail;","import React from 'react';\r\n\r\nimport {Switch, Route, withRouter, Redirect} from \"react-router-dom\";\r\n\r\n/**\r\n * Imported Pages\r\n */\r\nimport Home from './page/Home'\r\nimport LogIn from './page/LogIn'\r\nimport Groups from './page/Groups';\r\nimport Friends from './page/Friends';\r\nimport FriendsPage from './page/FriendPage';\r\nimport CheckIns from './page/CheckIns';\r\nimport BeerResults from './page/BeerResults';\r\nimport Profile from './page/Profile';\r\nimport UserPage from './page/User';\r\nimport Inbox from './page/Inbox';\r\nimport BeerDetailScreen from './page/BeerDetailScreen';\r\nimport BrewerPage from './page/BrewerPage';\r\nimport GroupDetail from \"./page/GroupDetail\";\r\n\r\nclass AppRoutes extends React.Component {\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route exact path=\"/\"\r\n                       component={Home}\r\n                       isLoggedIn={this.props.loggedIn}\r\n                       solidCommunicator={this.props.solidCommunicator}/>\r\n                <PrivateRoute path=\"/user\"\r\n                              component={UserPage}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path=\"/beer/:id\"\r\n                              component={BeerDetailScreen}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path=\"/brewer/:id\"\r\n                              component={BrewerPage}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute exact path=\"/friend\"\r\n                              component={Friends}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              modelHolder={this.props.modelHolder}\r\n                              solidCommunicator={this.props.solidCommunicator}/>\r\n                <PrivateRoute path=\"/friend/:id\"\r\n                              component={FriendsPage}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path=\"/beerresults\"\r\n                              component={BeerResults}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              onLinkClick={this.props.clearSearchQuery}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path=\"/groups/:id\"\r\n                              component={GroupDetail}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              modelHolder={this.props.modelHolder}\r\n                              solidCommunicator={this.props.solidCommunicator}/>\r\n                <PrivateRoute exact path=\"/groups\"\r\n                              component={Groups}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              modelHolder={this.props.modelHolder}\r\n                              solidCommunicator={this.props.solidCommunicator}/>\r\n                <PrivateRoute path='/profile'\r\n                              component={Profile}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path='/checkIns'\r\n                              component={CheckIns}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path='/inbox'\r\n                              component={Inbox}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRouteLogIn path=\"/login\"\r\n                                   component={LogIn}\r\n                                   isLoggedIn={this.props.loggedIn}\r\n                                   onLoggedIn={this.props.onLoggedIn}/>\r\n            </Switch>)\r\n    }\r\n}\r\n\r\nconst PrivateRoute = ({component: Component, isLoggedIn, ...rest}) => (\r\n    <Route {...rest} render={(props) => (\r\n        isLoggedIn\r\n            ? <Component {...props} {...rest}/>\r\n            : <Redirect to='/'/>\r\n    )}/>\r\n)\r\n\r\nconst PrivateRouteLogIn = ({component: Component, isLoggedIn, onLoggedIn, ...rest}) => (\r\n    <Route {...rest} render={(props) => (\r\n        !isLoggedIn\r\n            ? <Component onLoggedIn={onLoggedIn} {...props} />\r\n            : <Redirect to='/profile'/>\r\n    )}/>\r\n)\r\n\r\nexport default withRouter(AppRoutes);","import React from 'react';\r\nimport '../css/AclErrorPage.scss';\r\n\r\nclass AclErrorPage extends React.Component{\r\n    render(){\r\n        //TODO geef detailed instuctie om het op te lossen.\r\n\r\n        return (<section className = \"aclErrorPage\">\r\n            <h1>\r\n             The application does not have correct access. please give the application read, write, append and control access. \r\n            </h1>\r\n        </section>)\r\n    }\r\n}\r\n\r\nexport default AclErrorPage;","import React from 'react';\r\nimport '../css/FetchingPage.scss';\r\n\r\nclass FetchingPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className= \"rendering\">\r\n                <h1>Fetching data</h1>\r\n                <div id=\"fetchinAnimation\"></div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FetchingPage;","import Observable from \"./Observable\";\r\n\r\nclass User extends Observable{\r\n    constructor(uri){\r\n        super();\r\n        this._uri = uri\r\n        this._name =  this.getUserName(uri);\r\n        this._imageUrl = undefined;\r\n        this._startDate = undefined;\r\n        this._appFolder = undefined;\r\n        this._beerDrinkerFoler = undefined;\r\n        this._checkInFolder = undefined;\r\n    }\r\n\r\n    setUri(uri){\r\n        this._uri = uri;\r\n\r\n        if(!this._name){\r\n            this._name = this.getUserName(uri);\r\n        }\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    loadInUserValues(name, imageURL, appFolder,beerDrinkerFolder, checkInFolder){\r\n        if(name){\r\n            this._name = name;\r\n        }\r\n\r\n        this._imageUrl = imageURL;\r\n        this._appFolder = appFolder;\r\n        this._beerDrinkerFoler = beerDrinkerFolder;\r\n        this._checkInFolder = checkInFolder;\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    loadInAppData(startDate){\r\n        this._startDate = startDate;\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getUri(){\r\n        return this._uri;\r\n    }\r\n\r\n    getUserName(uri){\r\n        return  uri.replace(\"https://\", \"\").replace(/\\..*/, \"\");\r\n    }\r\n\r\n    getAppFolder(){\r\n        return this._appFolder;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n\r\n    getBeginDate(){\r\n        if(this._startDate){\r\n            return new Date(this._startDate.getTime());\r\n        }else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getImageUrl(){\r\n        return this._imageUrl;\r\n    }\r\n\r\n    getBeerDrinkerFolder(){\r\n        return this._beerDrinkerFoler;\r\n    }\r\n\r\n    getCheckInLocation(){\r\n        return this._checkInFolder;\r\n    }\r\n}\r\n\r\nexport default User;","import CheckInHandler from \"./HolderComponents/CheckInHandler\";\r\nimport User from \"./HolderComponents/User\";\r\nimport Observable from \"./HolderComponents/Observable\";\r\n\r\nclass ModelHolder extends Observable {\r\n    constructor() {\r\n        super();\r\n        this._user = new User(\"\");\r\n        this._checkInHandler = new CheckInHandler();\r\n        this._friends = [];\r\n\r\n        this._brewer = undefined;\r\n        this._slectedBeer = undefined;\r\n\r\n        this._beers = [];\r\n        this._groups = [];\r\n        this._inboxMessages = [];\r\n\r\n        this._checkInHandler.subscribe(this);\r\n        this._user.subscribe(this);\r\n    }\r\n\r\n    setInboxMessages(inboxMessages){\r\n        this._inboxMessages.forEach(res => {\r\n            res.unsubscribe(this);\r\n        });\r\n\r\n        this._inboxMessages = inboxMessages;\r\n\r\n        this._inboxMessages.forEach(res => {\r\n            res.subscribe(this);\r\n        });\r\n    }\r\n\r\n    getInboxMessages(){\r\n        return this._inboxMessages;\r\n    }\r\n\r\n    spliceAtIndex(index){\r\n        this._inboxMessages.splice(index, 1);\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    addFriends(newFriends) {\r\n        newFriends.forEach(res => {\r\n            res.subscribe(this);\r\n        })\r\n\r\n        this._friends = this._friends.concat(newFriends)\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    addFriend(newFriend) {\r\n        newFriend.subscribe(this);\r\n        this._friends.push(newFriend);\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getFriendFromIndex(index) {\r\n        return this._friends[index];\r\n    }\r\n\r\n    getFriends() {\r\n        return this._friends;\r\n    }\r\n\r\n    clearAll() {\r\n        this._user.unsubscribe(this);\r\n        this._checkInHandler.unsubscribe(this);\r\n        this._checkInHandler.clearAll();\r\n\r\n        if (this._slectedBeer) {\r\n            this._slectedBeer.unsubscribe(this);\r\n        }\r\n\r\n        if (this._brewer) {\r\n            this._brewer.unsubscribe(this);\r\n        }\r\n\r\n        this._friends.forEach(res => {\r\n            res.unsubscribe(this);\r\n            res.clearAll();\r\n        });\r\n\r\n        this._groups.forEach(res => {\r\n            res.unsubscribe(this);\r\n            res.clearAll();\r\n        });\r\n\r\n        this._beers.forEach(res => {\r\n            res.unsubscribe(this);\r\n        });\r\n\r\n        this._inboxMessages.forEach(res => {\r\n            res.unsubscribe(this);\r\n        });\r\n\r\n        this._user = new User(\"\");\r\n        this._checkInHandler = new CheckInHandler();\r\n        this._friends = [];\r\n        this._groups = [];\r\n        this._beers = [];\r\n        this._inboxMessages = [];\r\n        this._brewer = undefined;\r\n        this._slectedBeer = undefined;\r\n    }\r\n\r\n    getUser() {\r\n        return this._user;\r\n    }\r\n\r\n    getCheckInHandler() {\r\n        return this._checkInHandler;\r\n    }\r\n\r\n    setGroups(groups) {\r\n        this._groups.forEach(res => {\r\n            res.unsubscribe(this);\r\n        })\r\n\r\n        this._groups = groups;\r\n\r\n        this._groups.forEach(res => {\r\n            res.subscribe(this);\r\n        })\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    addGroup(group) {\r\n        this._groups.push(group);\r\n        group.subscribe(this);\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getGroups() {\r\n        return this._groups;\r\n    }\r\n\r\n    getBrewer() {\r\n        return this._brewer;\r\n    }\r\n\r\n    setBrewer(brewer) {\r\n        if (this._brewer) {\r\n            this._brewer.unsubscribe();\r\n        }\r\n\r\n        this._brewer = brewer;\r\n        this._brewer.subscribe(this);\r\n    }\r\n\r\n    getBeers() {\r\n        return this._beers;\r\n    }\r\n\r\n    setBeers(beers) {\r\n        this._beers = beers;\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getBeer() {\r\n        return this._slectedBeer;\r\n    }\r\n\r\n    setBeer(beer) {\r\n        if (this._slectedBeer) {\r\n            this.unsubscribe(this)\r\n        }\r\n\r\n        this._slectedBeer = beer;\r\n        beer.subscribe(this);\r\n\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    update() {\r\n        this.updateSubscribers();\r\n    }\r\n\r\n    getFriendFromUri(uri) {\r\n        for (let i = 0; i < this._friends.length; i++) {\r\n            if (this._friends[i].getUri() === uri) {\r\n                return this._friends[i];\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getGroupFromIndex(index) {\r\n        return this._groups[index];\r\n    }\r\n\r\n    getGroupFromCheckInLocationUri(uri){\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            if (this._groups[i].getCheckInLocation() === uri) {\r\n                return this._groups[i];\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport default ModelHolder;","/**\n * Libs\n */\nimport React from 'react';\nimport solidAuth from 'solid-auth-client';\nimport { Link, withRouter } from \"react-router-dom\";\nimport SolidCommunicator from './solid/SolidCommunicator';\n\n/**\n * Components\n */\nimport NavBar from './component/NavBar';\nimport AppRoutes from './routes/AppRoutes';\nimport AclErrorPage from './routes/extrapage/AclErrorPage';\nimport FetchingPage from './routes/extrapage/FetchingPage';\n\n/**\n * Errors\n */\nimport AccessError from './error/AccessError';\n\n/**\n * Assests\n */\nimport './css/App.scss';\nimport Knipsel from './assets/Knipsel.png';\nimport Logo from './assets/logo.png';\nimport ModelHolder from \"./model/ModelHolder\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      searchQuery: '',\n      modelHolder: new ModelHolder(),\n      solidCommunicator: undefined,\n      accessError: false,\n      fetchingFiles: false\n    };\n\n    this.state.modelHolder.subscribe(this);\n  }\n\n  componentDidMount() {\n    this.checkLoggedIn();\n  }\n\n  update = () => {\n    this.setState({\n      modelHolder : this.state.modelHolder\n    })\n  };\n\n  clearSearchQuery = () => {\n    this.setState({\n      searchQuery: ''\n    })\n  };\n\n  checkLoggedIn = async () => {\n    let session = await solidAuth.currentSession();\n    //TODO error handling\n\n    if (session) {\n      this.setState({\n        fetchingFiles: true\n      });\n\n      //make new user\n      this.state.modelHolder.getUser().setUri(session.webId);\n\n      try {\n        let solidCommunicator = await SolidCommunicator.build(this.state.modelHolder);\n\n        this.setState({\n          solidCommunicator: solidCommunicator,\n          loggedIn: true,\n          fetchingFiles: false\n        });\n\n        this.props.history.push(`/profile`)\n      } catch (e) {\n        if (e instanceof AccessError) {\n          this.setState({\n            accessError: true,\n            fetchingFiles: false\n          })\n        } else {\n          throw e; // let others bubble up\n        }\n      }\n    }\n  };\n\n  onClickLogOut = () => {\n    solidAuth.logout().then(res => {\n      this.state.modelHolder.clearAll();\n\n      this.setState({\n        loggedIn: false,\n        userObject: undefined,\n        accessError : false\n      });\n    });\n  };\n\n  onLoggedIn = () => {\n    this.checkLoggedIn();\n  };\n\n  onBeerSearch = (text) => {\n    let location = this.props.location.pathname;\n\n    this.setState({\n      searchQuery: text\n    });\n\n    if (text) {\n      if (location !== \"/beerresults\") {\n        this.props.history.push(\"/beerresults\");\n      }\n\n      /**\n       * Vindt hier de bier\n       */\n    } else {\n      this.props.history.goBack();\n    }\n  };\n\n  render() {\n    let navBar;\n    let app;\n\n    if(this.state.fetchingFiles){\n      navBar = (\n        <NavBar onSearchBarButtonClick={this.onSearchBarButtonClick}>\n          <Link to=\"/\" onClick={this.onClickLogOut}/>\n        </NavBar>)\n    }else if(this.state.accessError){\n      navBar = (\n        <NavBar onSearchBarButtonClick={this.onSearchBarButtonClick}>\n          <Link to=\"/\" onClick={this.onClickLogOut}>Log out</Link>\n        </NavBar>)\n    } else if (this.state.loggedIn) {\n      navBar = (\n        <NavBar onSearchBarButtonClick={this.onSearchBarButtonClick}\n          onBeerSearch={this.onBeerSearch}\n          loggedIn={this.state.loggedIn}\n          searchQuery={this.state.searchQuery}>\n          <Link to=\"/profile\">Profile</Link>\n          <Link to=\"/friend\">Friends</Link>\n          <Link to=\"/groups\">Groups</Link>\n          <Link to=\"/inbox\">Inbox</Link>\n          <Link to=\"/\" onClick={this.onClickLogOut}>Log out</Link>\n        </NavBar>\n      )\n    } else {\n      navBar = (\n        <NavBar onBeerSearch={this.onBeerSearch} loggedIn={this.state.loggedIn}>\n          <Link to=\"/LogIn\">Log in</Link>\n        </NavBar>\n      )\n    }\n\n    if(this.state.fetchingFiles){\n      app = (<FetchingPage/>);\n    }else if (this.state.accessError) {\n      app = (<AclErrorPage/>);  \n    } else {\n      app = (<AppRoutes\n        loggedIn={this.state.loggedIn}\n        modelHolder={this.state.modelHolder}\n        solidCommunicator={this.state.solidCommunicator}\n        clearSearchQuery={this.clearSearchQuery}\n        onLoggedIn={this.onLoggedIn}\n      />)\n    }\n\n    return (\n      <div id=\"AppRoot\">\n        <header>\n          <Link to=\"/\">\n            <div>\n              <img src={Logo} alt=\"\" />\n              <h1>\n                Linked social beer\n              </h1>\n            </div>\n          </Link>\n        </header>\n\n        {navBar}\n        {app}\n        <footer>\n          <span>\n            This application is powered by\n            </span>\n          <a href=\"https://solid.inrupt.com\">\n            <img alt=\"Solid inrupt\" src={Knipsel} />\n          </a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n <HashRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}