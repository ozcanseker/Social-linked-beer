{"version":3,"sources":["assets/profilePic.png","assets/logo.png","../node_modules/@trust/webcrypto/src/algorithms sync","model/User.js","model/Friend.js","network/SolidCommunicator.js","page/Home.js","page/LogIn.js","page/Groups.js","page/Friends.js","page/FriendPage.js","page/CheckIns.js","page/BeerResults.js","page/Profile.js","page/User.js","component/NavBar.js","page/BeerDetailScreen.js","App.js","serviceWorker.js","index.js","assets/Knipsel.png"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","User","uri","name","imageUrl","friends","startDate","beerPoints","this","subscribers","subscriber","push","index","Friend","pictureurl","fileClient","require","authClient","$rdf","SOLID","Namespace","PIM","VCARD","TERMS","RDF","SOLIDLINKEDBEER","FOAF","getGroupFile","url","friendsurl","graph","friendsgroup","sym","add","serialize","undefined","getAppDataInit","bn","blankNode","Date","createSolidResource","options","a","fetch","method","headers","SolidCommunicator","user","subscribe","callBack","readFile","userttt","parse","any","profile","nameFN","imageURL","value","userTTl","err","checkSession","session","webId","getUserCard","storeProfileCard","getPPILocation","ppiObject","getStorePublic","storagePublic","getApplicationLocation","ppi","store","applicationLocation","getFriends","appData","appdata","makeUser","solidCommunicator","appdataLocation","appdatattl","startdate","points","friendsLocation","ttlFriends","group","query","each","length","fetchFriend","friend","console","log","friendNamedNode","friendttl","profileCardTTl","publicProfileIndex","storePublicTypeIndex","publicTypeIndexTTL","storePublicProfileIndex","app","appQuery","createAppNodeForPublicTypeIndex","publicTypeIndex","publicLocation","appLocation","createFolder","makeAppFolderStructure","newTTLpublicTypeindex","updateFile","aclUri","body","groupurl","groupurlFile","createFile","appDataFile","inboxUrlacl","inboxUrl","reviewUrlacl","reviewUrl","Home","className","src","Knipsel","alt","React","Component","LogIn","props","onChangeCheckBox","setState","loginAsBrewer","state","onButtonClick","solidAuth","popupLogin","popupUri","then","currentSession","onLoggedIn","history","typeLogIn","type","onChange","onClick","href","Groups","Friends","inputText","target","getUserFile","res","error","pathname","result","friendsElements","map","key","to","placeholder","style","color","FriendPage","getFriendFromIndex","match","params","BeerResults","list","elements","listItem","onLinkClick","Profile","profilePic","toString","location","NavBar","onInput","onBeerSearch","input","cldn","Children","toArray","children","child","loggedIn","searchQuery","onSearchBarButtonClick","BeerDetailScreen","App","clearSearchQuery","checkLoggedIn","build","obj","userObject","onClickLogOut","logout","text","goBack","navBar","Logo","exact","path","component","isLoggedIn","FriendsPage","CheckIns","PrivateRoute","rest","render","PrivateRouteLogIn","withRouter","Boolean","window","hostname","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c657b4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilePic.b6681619.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.bc392ac4.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 423;","class User {\r\n    constructor(uri, name, imageUrl, friends, startDate, beerPoints){\r\n        this.uri = uri\r\n        this.name = name;\r\n        this.imageUrl = imageUrl;\r\n\r\n        this.startDate = startDate;\r\n        this.beerPoints = beerPoints;\r\n\r\n        this.friends = friends;\r\n\r\n        //mvc\r\n        this.subscribers = [];\r\n    }\r\n\r\n    subscribe(subscriber){\r\n        this.subscribers.push(subscriber);\r\n    }\r\n\r\n    getFriends(){\r\n        return this.friends;\r\n    }\r\n\r\n    getFriendFromIndex(index){\r\n        return this.friends[index];\r\n    }\r\n}\r\n\r\nexport default User;","class Friend {\r\n    constructor(uri, name, pictureurl){\r\n        this.name = name;\r\n        this.uri = uri;\r\n        this.pictureurl = pictureurl;\r\n    }\r\n}\r\n\r\nexport default Friend;","import User from '../model/User'\r\nimport Friend from '../model/Friend'\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst $rdf = require('rdflib');\r\n\r\nconst SOLID = $rdf.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\nconst PIM = $rdf.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\nconst VCARD = $rdf.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst TERMS = $rdf.Namespace('http://purl.org/dc/terms/');\r\nconst RDF = $rdf.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nconst SOLIDLINKEDBEER = $rdf.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nconst FOAF = $rdf.Namespace('http://xmlns.com/foaf/0.1/');\r\n\r\nclass SolidCommunicator {\r\n    constructor(user){\r\n        this.user = user;\r\n        user.subscribe(this);\r\n    }\r\n\r\n    static async build(){\r\n        //get the session of the user logged in\r\n        const session = await fileClient.checkSession();\r\n        //make a named node of the session webid of the user\r\n        const profile = $rdf.sym(session.webId);\r\n\r\n        //get a store of the profile card of the logged in user\r\n        let storeProfileCard = await this.getUserCard(session);\r\n        \r\n        //store for the Public Profile Index\r\n        let ppiObject = await this.getPPILocation(profile, storeProfileCard);\r\n\r\n        //String that shows the location of the public storage of the pod\r\n        let storagePublic = await this.getStorePublic(profile, storeProfileCard);     \r\n\r\n        //locatie voor de applicatie\r\n        let applicationLocation = await this.getApplicationLocation(ppiObject.ppi , ppiObject.store, storagePublic);\r\n\r\n        let friends = await this.getFriends(applicationLocation);\r\n        let appdata = await this.appData(applicationLocation);\r\n\r\n        //make new user\r\n        let user = this.makeUser(profile, storeProfileCard, friends, appdata);\r\n        let solidCommunicator = new SolidCommunicator(user);\r\n        return {user: user, solidCommunicator: solidCommunicator};\r\n    }  \r\n\r\n    async getUserFile(url, callBack){\r\n      let userttt = await fileClient.readFile(url);\r\n      let graph = $rdf.graph();\r\n\r\n      try{\r\n        $rdf.parse(userttt, graph, url, \"text/turtle\");\r\n\r\n        let query = graph.any(undefined, undefined, FOAF('PersonalProfileDocument'));\r\n\r\n        if(query){\r\n          let profile = $rdf.sym(url);\r\n          let nameFN =  graph.any(profile,VCARD('fn'));\r\n          let imageURL =  graph.any(profile,VCARD('hasPhoto')); \r\n  \r\n          nameFN = nameFN ? nameFN.value : undefined;\r\n          imageURL = imageURL ? imageURL.value : undefined;\r\n          \r\n          let result = {\r\n            userTTl: userttt,\r\n            url : url,\r\n            name: nameFN,\r\n            imageUrl : imageURL\r\n          }\r\n\r\n          callBack(result, false);\r\n        }else{\r\n          callBack(undefined, \"not a profile card\");\r\n        }\r\n\r\n      }catch(err){\r\n        callBack(undefined, \"Not a linked data file\");\r\n      }    \r\n    }\r\n\r\n    static async appData(url){\r\n      let appdataLocation = url + 'appdata.ttl';\r\n\r\n      let appdatattl = await fileClient.readFile(appdataLocation);\r\n      let graph = $rdf.graph();\r\n      $rdf.parse(appdatattl, graph, appdataLocation, \"text/turtle\");\r\n\r\n      let blankNode = graph.any(undefined, SOLIDLINKEDBEER('startdate'));\r\n\r\n      let startdate = graph.any(blankNode, SOLIDLINKEDBEER('startdate'));\r\n      let points = graph.any(blankNode, SOLIDLINKEDBEER('points'));\r\n      \r\n      return {startdate: startdate.value, points: points.value}\r\n    }\r\n\r\n    static async getFriends(applicationLocation){\r\n      let friendsLocation = applicationLocation + \"friends.ttl\";\r\n      let ttlFriends = await fileClient.readFile(friendsLocation);\r\n      let group = $rdf.sym(friendsLocation + \"#Friends\");\r\n\r\n      let friends = [];\r\n\r\n      let graph = $rdf.graph();\r\n      $rdf.parse(ttlFriends, graph, friendsLocation, \"text/turtle\");\r\n      graph.add(group, VCARD('hasMember'), $rdf.sym(\"https://ozcanseker.inrupt.net/profile/card#me\"));\r\n\r\n\r\n      let query = graph.each(group, VCARD('hasMember'), undefined); \r\n\r\n      for (let index = 0; index < query.length; index++) {\r\n        let friend = await this.fetchFriend(query[index]);\r\n        friends.push(friend);\r\n        console.log(friend);\r\n      }\r\n\r\n      return friends;\r\n    }\r\n\r\n    static async fetchFriend(friendNamedNode){\r\n      let friendttl = await fileClient.readFile(friendNamedNode.value);\r\n      let graph = $rdf.graph();\r\n      $rdf.parse(friendttl, graph, friendNamedNode.value, \"text/turtle\");\r\n\r\n      let nameFN =  graph.any(friendNamedNode, VCARD('fn'));\r\n      let imageURL =  graph.any(friendNamedNode, VCARD('hasPhoto')); \r\n\r\n      nameFN = nameFN ? nameFN.value : undefined;\r\n      imageURL = imageURL ? imageURL.value : undefined;\r\n\r\n      return new Friend(friendNamedNode.value, nameFN, imageURL);\r\n    }\r\n\r\n    static async getUserCard(session){\r\n        const profileCardTTl = await fileClient.fetch(session.webId); \r\n        const storeProfileCard = $rdf.graph(); \r\n        $rdf.parse(profileCardTTl, storeProfileCard, session.webId, \"text/turtle\");\r\n        return storeProfileCard;\r\n    }\r\n            \r\n    static async getPPILocation(profile, storeProfileCard){\r\n        const publicProfileIndex = storeProfileCard.any(profile, SOLID(\"publicTypeIndex\"));\r\n        const storePublicTypeIndex = $rdf.graph();\r\n        const publicTypeIndexTTL = await fileClient.fetch(publicProfileIndex.value);\r\n        $rdf.parse(publicTypeIndexTTL, storePublicTypeIndex, publicProfileIndex.value, \"text/turtle\");\r\n        return {store : storePublicTypeIndex, ppi : publicProfileIndex};\r\n    }\r\n\r\n    static getStorePublic(profile, storeProfileCard){\r\n        let locationStorage = storeProfileCard.any(profile, PIM(\"storage\"));\r\n        return locationStorage.value + \"public/\";\r\n    }\r\n\r\n    static makeUser(profile, storeProfileCard, friends, appdata){\r\n        let nameFN =  storeProfileCard.any(profile,VCARD('fn'));\r\n        let imageURL =  storeProfileCard.any(profile,VCARD('hasPhoto')); \r\n\r\n        nameFN = nameFN ? nameFN.value : undefined;\r\n        imageURL = imageURL ? imageURL.value : undefined;\r\n\r\n        return new User(profile.value, nameFN, imageURL, friends, appdata.startdate , appdata.points);\r\n    }\r\n\r\n    static async getApplicationLocation(publicProfileIndex, storePublicProfileIndex, storagePublic){\r\n        let app = $rdf.sym(publicProfileIndex.value + \"#SocialLinkedBeer\");\r\n        let appQuery = storePublicProfileIndex.any(app, SOLID(\"instance\"));\r\n\r\n        if(!appQuery){\r\n            //make a new entery in the ppi and make a file for you application\r\n            return await this.createAppNodeForPublicTypeIndex(storePublicProfileIndex, publicProfileIndex, storagePublic, app);\r\n        }else{\r\n            //get the applocation\r\n            return appQuery.value;\r\n        }\r\n    }\r\n\r\n    static async createAppNodeForPublicTypeIndex(store, publicTypeIndex, publicLocation, app){\r\n        //TODO check if there is a file here otherwise make a new file\r\n\r\n        let appLocation = publicLocation + \"sociallinkedbeer4/\"\r\n        await fileClient.createFolder(appLocation);\r\n\r\n        await this.makeAppFolderStructure(appLocation);\r\n\r\n        appLocation = $rdf.sym(appLocation);\r\n        \r\n        store.add(publicTypeIndex, TERMS('references'), app);\r\n        store.add(app, RDF('type'), SOLID('TypeRegistration'));\r\n        store.add(app, SOLID('instance'), appLocation);\r\n        \r\n        let newTTLpublicTypeindex = await $rdf.serialize(undefined, store, publicTypeIndex.value, 'text/turtle');\r\n\r\n        await fileClient.updateFile(publicTypeIndex.value, newTTLpublicTypeindex, \"text/turtle\"); \r\n\r\n        return appLocation.value;\r\n    }\r\n\r\n    static async makeAppFolderStructure(url){\r\n        let body;\r\n\r\n        //top folder\r\n        let aclUri = url + '.acl';\r\n\r\n        await fileClient.createFolder(url);\r\n        body = getAclAppFolder();\r\n        await createSolidResource(aclUri, {body});\r\n\r\n        //friends\r\n        let groupurlFile = url + 'friends.ttl';\r\n        let groupurl = groupurlFile + \"#Friends\";\r\n\r\n        await fileClient.createFile(groupurlFile, getGroupFile(groupurlFile, groupurl, \"text/turtle\")); \r\n\r\n        //appData \r\n        let appDataFile = url + 'appdata.ttl';\r\n        await fileClient.createFile(appDataFile, getAppDataInit(appDataFile), \"text/turtle\");\r\n        \r\n        //inboxfolder\r\n        let inboxUrl = url + 'inbox/';\r\n        let inboxUrlacl = inboxUrl + '.acl';   \r\n        body = getACLInboxFolder();\r\n\r\n        await fileClient.createFolder(inboxUrl);\r\n        await createSolidResource(inboxUrlacl, {body});\r\n\r\n        //check in folder        \r\n        let reviewUrl = url + 'checkins/';\r\n        let reviewUrlacl = reviewUrl + '.acl';\r\n\r\n        await fileClient.createFolder(reviewUrl);\r\n        body = getACLCheckInFolder();\r\n        await createSolidResource(reviewUrlacl, {body});                  \r\n    }\r\n}\r\n\r\nfunction getGroupFile(url, friendsurl){\r\n    let graph = $rdf.graph();\r\n    \r\n    let guy1 = $rdf.sym(\"https://ozcanseker.solid.community/profile/card#me\");\r\n    let friendsgroup = $rdf.sym(friendsurl);\r\n  \r\n    graph.add(friendsgroup, RDF('type'), VCARD('Group'));\r\n    graph.add(friendsgroup, VCARD('hasUID'), $rdf.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:ABGroup\"));\r\n\r\n    // graph.add(friendsgroup, VCARD('hasMember'), guy1);\r\n  \r\n    let newTTLpublicTypeindex = $rdf.serialize(undefined, graph, url, 'text/turtle');\r\n    return newTTLpublicTypeindex;\r\n  }\r\n\r\n  function getAppDataInit(url){\r\n    let graph = $rdf.graph();\r\n    \r\n    let bn = $rdf.blankNode();\r\n\r\n    graph.add(bn, SOLIDLINKEDBEER('startdate'), new Date());\r\n    graph.add(bn, SOLIDLINKEDBEER('points'), 0);\r\n  \r\n    let ttl = $rdf.serialize(undefined, graph, url, 'text/turtle');\r\n    return ttl;\r\n  }\r\n  \r\n  function getACL(){\r\n    return \"@prefix : <#>.\\n\" +\r\n    \"@prefix n0: <http://www.w3.org/ns/auth/acl#>.\\n\" +\r\n    \"@prefix c: </profile/card#>.\\n\" +\r\n    \"@prefix c0: <https://ozcanseker.solid.community/profile/card#>.\\n\" +\r\n    \"@prefix n1: <http://xmlns.com/foaf/0.1/>.\\n\" +\r\n    \r\n    \":ControlReadWrite\\n\" +\r\n        \"a n0:Authorization;\\n\" +\r\n        \"n0:accessTo <test7.ttl>;\\n\" +\r\n        \"n0:agent c:me, c0:me, <https://ozcan.inrupt.net/profile/card#me>;\\n\" +\r\n        \"n0:mode n0:Control, n0:Read, n0:Write.\";  \r\n  }\r\n  \r\n  function getAclAppFolder(){\r\n    return \"@prefix : <#>.\\n\" + \r\n    \"@prefix n0: <http://www.w3.org/ns/auth/acl#>.\\n\" + \r\n    \"@prefix app: <./>.\\n\" + \r\n    \"@prefix c: </profile/card#>.\\n\" + \r\n    \r\n    \":ControlReadWrite\\n\" + \r\n        \"a n0:Authorization;\\n\" + \r\n        \"n0:accessTo app:;\\n\" + \r\n        \"n0:agent c:me;\\n\" + \r\n        \"n0:default app:;\\n\" + \r\n        \"n0:mode n0:Control, n0:Read, n0:Write.\\n\";\r\n  }\r\n  \r\n  function getACLInboxFolder(){\r\n    return \"@prefix : <#>.\\n\" + \r\n      \"@prefix n0: <http://www.w3.org/ns/auth/acl#>.\\n\" +\r\n      \"@prefix inbox: <./>.\\n\" +\r\n      \"@prefix n1: <http://xmlns.com/foaf/0.1/>.\\n\" +\r\n      \"@prefix c: </profile/card#>.\\n\" +\r\n  \r\n      \":Append\\n\" +\r\n        \"a n0:Authorization;\\n\" +\r\n        \"n0:accessTo inbox:;\\n\" +\r\n        \"n0:agentClass n1:Agent;\\n\" +\r\n        \"n0:default inbox:;\\n\" +\r\n        \"n0:mode n0:Append.\\n\" +\r\n      \":ControlReadWrite\\n\" +\r\n        \"a n0:Authorization;\\n\" +\r\n        \"n0:accessTo inbox:;\\n\" +\r\n        \"n0:agent c:me;\\n\" +\r\n        \"n0:default inbox:;\\n\" +\r\n        \"n0:mode n0:Control, n0:Read, n0:Write.\\n\";\r\n  }\r\n  \r\n  function getACLCheckInFolder(){\r\n    return \"@prefix : <#>.\\n\" + \r\n      \"@prefix n0: <http://www.w3.org/ns/auth/acl#>.\\n\" +\r\n      \"@prefix inbox: <./>.\\n\" +\r\n      \"@prefix n1: <http://xmlns.com/foaf/0.1/>.\\n\" +\r\n      \"@prefix c: </profile/card#>.\\n\" +\r\n  \r\n      \":Append\\n\" +\r\n        \"a n0:Authorization;\\n\" +\r\n        \"n0:accessTo inbox:;\\n\" +\r\n        \"n0:agentClass n1:Agent;\\n\" +\r\n        \"n0:default inbox:;\\n\" +\r\n        \"n0:mode n0:Read.\\n\" +\r\n      \":ControlReadWrite\\n\" +\r\n        \"a n0:Authorization;\\n\" +\r\n        \"n0:accessTo inbox:;\\n\" +\r\n        \"n0:agent c:me;\\n\" +\r\n        \"n0:default inbox:;\\n\" +\r\n        \"n0:mode n0:Control, n0:Read, n0:Write.\\n\";\r\n  }\r\n  \r\n  async function createSolidResource(url, options){\r\n      authClient.fetch(url, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'text/turtle'\r\n        },\r\n        ...options\r\n  });}\r\n\r\nexport default SolidCommunicator;\r\n\r\n// export default SolidCommunicator;\r\n\r\n// const SOLID = $rdf.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\n\r\n// const BEERCOUNTER = $rdf.Namespace(\"https://ozcanseker.inrupt.net/vocabulary#\");\r\n// const PIM = $rdf.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\n\r\n// let BEERCOUNTERRECORD = $rdf.sym(\"https://ozcanseker.inrupt.net/vocabulary#BeerCounterRecord\");\r\n\r\n// class SolidCommuncator{\r\n\r\n//     /**\r\n//      * \r\n//      * @param {string} webid \r\n//      * @param {string} applocation \r\n//      * @param {store:rdflib} appStore \r\n//      * @param {BeerCounter} beerCounter \r\n//      */\r\n//     constructor(webid, applocation, appStore, beerCounter){\r\n//         this.webid = webid;\r\n//         this.applocation = applocation;\r\n//         this.appStore = appStore;\r\n\r\n//         //subscribe to model\r\n//         this.beerCounter = beerCounter;\r\n//         this.beerCounter.subscribe(this);\r\n        \r\n//         //for the networking\r\n//         this.queryList = [];\r\n//         this.networking = false;\r\n//     }\r\n\r\n//     update(){\r\n//         let query = {\r\n//             date : this.beerCounter.getDateToday(),\r\n//             amount : this.beerCounter.getBeerCount()\r\n//         }\r\n\r\n//         this.queryList.push(query);\r\n\r\n//         if(!this.networking){\r\n//             this.startSendingFile();\r\n//         }\r\n//     }\r\n\r\n//     async startSendingFile(){\r\n//         this.networking = true;\r\n\r\n//         while(this.queryList.length > 0){\r\n//             let query = this.queryList.shift();\r\n//             let date = query.date;\r\n//             let blankNode = this.appStore.any(null, null, stringToDate(date));\r\n\r\n//             if(blankNode){\r\n//                 let statment = this.appStore.any(blankNode, RDF('value'), null);   \r\n//                 statment.value = query.amount + \"\";     \r\n//             }else{ \r\n//                 blankNode = $rdf.blankNode();\r\n//                 this.appStore.add(blankNode, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//                 this.appStore.add(blankNode, TERMS('created'), stringToDate(date));\r\n//                 this.appStore.add(blankNode, RDF('value'), query.amount);\r\n//             }\r\n//         }\r\n\r\n//         let appStoreTTL = await $rdf.serialize(undefined, this.appStore, 'text/turtle');\r\n//         console.log(this.applocation);\r\n//         await fileClient.updateFile(this.applocation, appStoreTTL);\r\n\r\n//         if(this.queryList.length > 0){\r\n//             this.startSendingFile();\r\n//         }else{\r\n//             this.networking = false;\r\n//         }\r\n//     }\r\n\r\n//     static async build(beerCounter){\r\n//         //get the session of the user logged in\r\n//         const session = await fileClient.checkSession();\r\n//         //make a named node of the session webid of the user\r\n//         const profile = $rdf.sym(session.webId);\r\n\r\n//         //get a store of the profile card of the logged in user\r\n//         let storeProfileCard = await this.getUserCard(session);\r\n        \r\n//         //store for the Public Profile Index\r\n//         let ppiObject = await this.getPPILocation(profile, storeProfileCard);\r\n\r\n//         //String that shows the location of the public storage of the pod\r\n//         let storagePublic = await this.getStorePublic(profile, storeProfileCard);        \r\n\r\n//         //Gets the location for the application or make a new enty in the Public profile index for the application.\r\n//         //also makes an empty file at the application location\r\n//         //string\r\n//         let applicationLocation = await this.getApplicationLocation(ppiObject.ppi , ppiObject.store, storagePublic);\r\n\r\n//         //get the application file in store form\r\n//         let appStore = await this.getAppStore(applicationLocation);\r\n\r\n//         //make a few example nodes to fill up the file\r\n//         //let newAppFile = await this.addExampleNodes(appStore, applicationLocation);\r\n//         //await fileClient.updateFile(applicationLocation.value, newAppFile);\r\n\r\n//         //update the model BeerCounter with data from the file.\r\n//         let map = this.getDatesAndCountsFromStore(appStore);\r\n//         beerCounter.setCountsPerDate(map);\r\n\r\n//         return new SolidCommuncator(session.webId, applicationLocation, appStore, beerCounter);\r\n//     }  \r\n\r\n//     static async getAppStore(applicationLocation){\r\n//         let appStore = $rdf.graph();\r\n//         let appTTL = await fileClient.fetch(applicationLocation);\r\n//         await $rdf.parse(appTTL, appStore, applicationLocation , \"text/turtle\");\r\n//         return appStore;\r\n//     }\r\n\r\n\r\n//    \r\n\r\n//     \r\n//     static getDatesAndCountsFromStore(store){\r\n//         let blankNodes = store.each(null , null, BEERCOUNTER('BeerCounterRecord'));\r\n//         let map = new Map();\r\n\r\n//         blankNodes.forEach(element => {\r\n//             let value = store.any(element, RDF('value'));\r\n//             let date = store.any(element, TERMS('created'));\r\n//             date = dateToString(new Date(date.value));\r\n\r\n//             map.set(date, value.value);\r\n//         });\r\n\r\n//         return map;\r\n//     }\r\n\r\n//    \r\n\r\n//     static async addExampleNodes(appStore, applocation){\r\n//         applocation = $rdf.sym(applocation);\r\n//         let bnode = $rdf.blankNode();\r\n//         let bnode1 = $rdf.blankNode();\r\n//         let bnode2 = $rdf.blankNode();\r\n//         let bnode3 = $rdf.blankNode();\r\n\r\n//         appStore.add(applocation, TERMS('references'), bnode);\r\n//         appStore.add(applocation, TERMS('references'), bnode1);\r\n//         appStore.add(applocation, TERMS('references'), bnode2);\r\n//         appStore.add(applocation, TERMS('references'), bnode3);\r\n\r\n//         appStore.add(bnode, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//         appStore.add(bnode, RDF('value'), 4);        \r\n//         appStore.add(bnode, TERMS('created'), stringToDate(\"17/09/2019\"));  \r\n\r\n//         appStore.add(bnode1, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//         appStore.add(bnode1, RDF('value'), 5);        \r\n//         appStore.add(bnode1, TERMS('created'), stringToDate(\"16/09/2019\"));  \r\n        \r\n//         appStore.add(bnode2, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//         appStore.add(bnode2, RDF('value'), 16);        \r\n//         appStore.add(bnode2, TERMS('created'), stringToDate(\"15/09/2019\"));  \r\n\r\n//         appStore.add(bnode3, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//         appStore.add(bnode3, RDF('value'), 2);\r\n//         appStore.add(bnode3, TERMS('created'), stringToDate(\"14/09/2019\"));  \r\n\r\n//         // let query = appStore.each(undefined, undefined, BEERCOUNTER('BeerCounterRecord'));\r\n//         // let query2 = appStore.each(query[0], undefined);\r\n\r\n//         let newAppFile = await $rdf.serialize(undefined, appStore,'text/turtle');\r\n//         return newAppFile;\r\n//     }\r\n// }\r\n\r\n// function dateToString(date){\r\n//     var dd = String(date.getDate()).padStart(2, '0');\r\n//     var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n//     var yyyy = date.getFullYear();\r\n\r\n//     return dd + '/' + mm + '/' + yyyy;\r\n// }\r\n\r\n// function stringToDate(dateString){\r\n//     let array = dateString.split('/');\r\n//     let date = new Date(Date.UTC(array[2], array[1] - 1, array[0]));    \r\n//     return date;\r\n// }\r\n\r\n// export default SolidCommuncator;","import React from 'react';\r\nimport Knipsel from '../assets/Knipsel.png'\r\nimport '../css/Home.scss'\r\n\r\nclass Home extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <section className = \"home\">\r\n                <h3>\r\n                    This is an application that is powered by Solid.<br/> \r\n                    Log in with your pod to use the application\r\n                </h3>\r\n                <img src= {Knipsel} alt = \"Inrupt logo\"/>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport '../css/LogIn.scss'\r\n\r\nimport solidAuth from 'solid-auth-client'\r\n\r\nclass LogIn extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {\r\n            loginAsBrewer : false\r\n        }\r\n    }\r\n\r\n    onChangeCheckBox = () =>{\r\n        this.setState({\r\n            loginAsBrewer : !this.state.loginAsBrewer\r\n        })\r\n    }\r\n\r\n    onButtonClick = () => {\r\n        let popupUri = './popup.html';\r\n        solidAuth.popupLogin({ popupUri }).then(() => {\r\n            solidAuth.currentSession().then( session => {\r\n                console.log(session);\r\n                this.props.onLoggedIn();\r\n                this.props.history.push(`/profile`)\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let typeLogIn;\r\n        \r\n        if(this.state.loginAsBrewer){\r\n            typeLogIn = <p>Brewer</p>\r\n        }else{\r\n            typeLogIn = <p>Beer Drinker</p>\r\n        }\r\n\r\n\r\n        return(\r\n            <section id = {this.state.loginAsBrewer ? \"logInBrewer\" : \"logInBeerDrinker\"}>\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" onChange= {this.onChangeCheckBox}/>\r\n                    <span className=\"slider\"></span>\r\n                </label>\r\n\r\n                {typeLogIn}\r\n                <button onClick = {this.onButtonClick}>Log in</button>\r\n                <p><a href= \"https://inrupt.net\">register</a></p>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LogIn;\r\n","import React from 'react';\r\n\r\nclass Groups extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <h1>\r\n                Groups\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Groups;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Friends extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputText : \"https://ozcanseker.inrupt.net/profile/card#me\",\r\n            error : undefined\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            inputText: e.target.value\r\n        })        \r\n    }\r\n\r\n    onButtonClick = () => {\r\n        this.props.solidCommunicator.getUserFile(this.state.inputText, (res, error) => {\r\n\r\n            if(error){\r\n                this.setState({\r\n                    error : error\r\n                })\r\n            }else{\r\n                this.props.history.push({\r\n                    pathname:\"/user\",\r\n                    state:{\r\n                        result: res\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let friends = this.props.user.getFriends();        \r\n        let friendsElements = friends.map((friend, index) => {\r\n            return <li>\r\n                <Link key = {friend.uri} to= {`/friend/${index}`}>\r\n                    <p>\r\n                        name : {friend.name}\r\n                    </p>\r\n                </Link>\r\n            </li> \r\n        });\r\n\r\n        return(\r\n            <div>\r\n                <h1>\r\n                    Friends\r\n                </h1>\r\n                <br/>\r\n                <input type = \"text\" placeholder =\"profilecard link\" value = {this.state.inputText} onChange = {this.onChange}></input>\r\n                <button onClick = {this.onButtonClick}>Search on the web</button>\r\n\r\n                <p style = {{color: \"red\"}}>{this.state.error}</p>\r\n\r\n                <ul>\r\n                    {friendsElements}\r\n                </ul>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\n\r\n\r\nclass FriendPage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        let friend = this.props.user.getFriendFromIndex(this.props.match.params.id);\r\n\r\n        return (\r\n            <h1>\r\n                {friend.name}\r\n            </h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FriendPage;","import React from 'react';\r\n\r\nclass Friends extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <h1>\r\n                Check-Ins\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport '../css/BeerResults.scss'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass BeerResults extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.list = [\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n        ]\r\n    }\r\n\r\n\r\n    render(){\r\n        let elements = this.list.map(listItem => {\r\n                return (\r\n                    <li>\r\n                        <Link to = \"/beer/hertogJan\" onClick = {this.props.onLinkClick}>\r\n                            {listItem.name}\r\n                        </Link>\r\n                    </li>\r\n                )\r\n        })\r\n\r\n        return(\r\n            <div>\r\n                <h1>Beer Results</h1>\r\n                <ul>\r\n                    {elements}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerResults;\r\n\r\n","import React from 'react';\r\nimport '../css/Profile.scss'\r\nimport profilePic from '../assets/profilePic.png'\r\n\r\nclass Profile extends React.Component{\r\n    render(){\r\n        let user = this.props.user;\r\n\r\n        return(\r\n            <section className = \"profileScreen\">\r\n                \r\n                <div className=\"row\">\r\n                    <div className=\"leftColum\">\r\n                        <h1>\r\n                            {user.name}\r\n                        </h1>\r\n                        <img src = {user.imageUrl ? user.imageUrl : profilePic} alt = \"\"/>\r\n                        <p>\r\n                            check-ins : {user.beerPoints}\r\n                        </p>\r\n                        <p>\r\n                            reviews : 2\r\n                        </p>\r\n                        <p>\r\n                            Begin date : {user.startDate.toString()}\r\n                        </p>\r\n                        <p>\r\n                            beerbonus points : 15\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <h1>\r\n                            Recent activities\r\n                        </h1>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\nclass User extends React.Component{\r\n\r\n    render(){\r\n        console.log(this.props);\r\n        let result = this.props.location.state.result\r\n\r\n        return(\r\n            <section className = \"home\">\r\n                <h3>\r\n                    {result.name}\r\n                    <button>Send friendship request</button>\r\n                </h3>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport '../css/NavBar.scss'\r\n\r\nclass NavBar extends React.Component{\r\n    onInput = (e) => {\r\n        this.props.onBeerSearch(e.target.value);\r\n    }\r\n\r\n    render(){\r\n        let cldn =React.Children.toArray( this.props.children);\r\n        let input;\r\n\r\n        cldn = cldn.map((child, index) => {            \r\n            if(index !== cldn.length - 1){\r\n                return (\r\n                    <li key = {child.props.to} className = \"navBarOptionContainer\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }else{\r\n                return(\r\n                    <li key = {child.props.to} className = \"navBarOptionContainerLast\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }            \r\n        });\r\n\r\n        if(this.props.loggedIn){\r\n            input = (<li className = \"navBarSearch\">\r\n                <input  placeholder = \"search for beers\" value = {this.props.searchQuery} onChange = {this.onInput} />\r\n                <input type = \"button\" value = \"x\" onClick = {this.props.onSearchBarButtonClick}/>\r\n            </li>)\r\n        }\r\n\r\n        return(\r\n            <nav>\r\n                <ul id = \"navBar\">\r\n                    {cldn}\r\n                    {input}\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nclass BeerDetailScreen extends React.Component{\r\n\r\n    render(){\r\n        console.log();\r\n\r\n        return(\r\n            <h1>\r\n               {this.props.match.params.id}\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerDetailScreen;\r\n","/**\n * Libs\n */\nimport React from 'react';\nimport solidAuth from 'solid-auth-client'\nimport {Switch, Route, Link, withRouter, Redirect} from \"react-router-dom\";\nimport SolidCommunicator from './network/SolidCommunicator'\n\n/**\n * Imported Pages\n */\nimport Home from './page/Home'\nimport LogIn from './page/LogIn'\nimport Groups from './page/Groups';\nimport Friends from './page/Friends';\nimport FriendsPage from './page/FriendPage';\nimport CheckIns from './page/CheckIns';\nimport BeerResults from './page/BeerResults';\nimport Profile from './page/Profile';\nimport User from './page/User';\n\n/**\n * Components\n */\nimport NavBar from './component/NavBar';\n\n/**\n * Assests\n */\nimport './css/App.scss';\nimport Knipsel from './assets/Knipsel.png'\nimport Logo from './assets/logo.png'\nimport BeerDetailScreen from './page/BeerDetailScreen';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      loggedIn : false,\n      searchQuery : '',\n      userObject: undefined,\n      solidCommunicator : undefined\n    }\n  }\n\n  componentDidMount(){\n    this.checkLoggedIn();\n  }\n\n  clearSearchQuery = () => {\n      this.setState({\n        searchQuery : ''\n      },)\n  }\n\n  checkLoggedIn = () => {\n    solidAuth.currentSession().then( session => {\n      if(session){\n\n        SolidCommunicator.build().then(obj => {\n\n          obj.user.subscribe(this);\n\n          this.setState({\n            userObject : obj.user,\n            solidCommunicator : obj.solidCommunicator, \n            loggedIn: true,\n          })\n        });\n\n        this.props.history.push(`/profile`)\n      }\n    })\n  }\n\n  onClickLogOut = () => {\n    solidAuth.logout();\n\n    this.setState({\n      loggedIn : false,\n      userObject : undefined\n    });\n  }\n\n  onLoggedIn = () => {\n    this.checkLoggedIn();\n  }\n\n  onBeerSearch = (text) => {\n    let location = this.props.location.pathname;\n\n    this.setState({\n      searchQuery : text\n    })\n\n    if(text){\n      if(location !== \"/beerresults\"){\n        this.props.history.push(\"/beerresults\");\n      }\n\n      /**\n       * Vindt hier de bier\n       */\n    }else{\n      this.props.history.goBack();\n    }\n  }\n\n\n  render(){\n    let navBar;\n\n    if(this.state.loggedIn){\n      navBar = (\n         <NavBar onSearchBarButtonClick = {this.onSearchBarButtonClick} \n                 onBeerSearch = {this.onBeerSearch} \n                 loggedIn = {this.state.loggedIn} \n                 searchQuery = {this.state.searchQuery}>\n          <Link to = \"/profile\">Profile</Link>\n          <Link to = \"/checkIns\">Check ins</Link>\n          <Link to = \"/friend\">Friends</Link>\n          <Link to = \"/groups\">Groups</Link>\n          <Link to = \"/\" onClick = {this.onClickLogOut}>Log out</Link>\n        </NavBar>\n      )\n    }else{\n      navBar = (\n         <NavBar onBeerSearch = {this.onBeerSearch} loggedIn = {this.state.loggedIn}>\n          <Link to = \"/LogIn\">Log in</Link>\n        </NavBar>\n      )\n    }\n\n    return (\n      <div id = \"AppRoot\">\n        <header>\n          <Link to = \"/\">\n            <div>\n              <img src= {Logo} alt = \"\"/>\n              <h1>\n              Linked social beer\n              </h1>\n           </div>\n          </Link>\n        </header>\n\n        {navBar}\n          <Switch>\n              <Route exact path=\"/\" component={Home} isLoggedIn = {this.state.loggedIn}/>\n              <PrivateRoute path=\"/user\" component={User} isLoggedIn = {this.state.loggedIn}/> \n              <PrivateRoute path=\"/beer/:id\" component={BeerDetailScreen} isLoggedIn = {this.state.loggedIn}/> \n              <PrivateRoute path=\"/friend/:id\" component={FriendsPage} isLoggedIn = {this.state.loggedIn} user = {this.state.userObject}/>                       \n              <PrivateRoute exact path=\"/friend\" component={Friends} isLoggedIn = {this.state.loggedIn} user = {this.state.userObject} solidCommunicator = {this.state.solidCommunicator}/>\n              <PrivateRoute path=\"/beerresults\" component={BeerResults} isLoggedIn = {this.state.loggedIn} onLinkClick = {this.clearSearchQuery}/>\n              <PrivateRoute path=\"/groups\" component={Groups} isLoggedIn = {this.state.loggedIn}/>\n              <PrivateRoute path='/profile' component={Profile} isLoggedIn = {this.state.loggedIn} user = {this.state.userObject}/>\n              <PrivateRoute path='/checkIns' component={CheckIns} isLoggedIn = {this.state.loggedIn}/>\n              <PrivateRouteLogIn path=\"/login\" component={LogIn} isLoggedIn = {this.state.loggedIn} onLoggedIn = {this.onLoggedIn}/>\n          </Switch>\n          <footer>\n            <span>\n              This application is powered by\n            </span>\n              <a href=\"https://solid.inrupt.com\">\n              <img alt = \"Solid inrupt\" src={Knipsel} /> \n            </a>\n          </footer>\n      </div>\n    );\n  }\n}\n\nconst PrivateRoute = ({ component: Component, isLoggedIn ,...rest }) => (\n  <Route {...rest} render={(props) => (\n    isLoggedIn\n    ?   <Component {...props} {...rest}/>\n    : <Redirect to='/' />\n  )} />\n)\n\nconst PrivateRouteLogIn = ({ component: Component, isLoggedIn, onLoggedIn ,...rest }) => (\n  <Route {...rest} render={(props) => (\n    !isLoggedIn\n      ? <Component onLoggedIn = {onLoggedIn} {...props} />\n      : <Redirect to='/profile' />\n  )} />\n)\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Knipsel.4dafcfef.png\";"],"sourceRoot":""}