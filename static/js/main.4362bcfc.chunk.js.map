{"version":3,"sources":["assets/Knipsel.png","assets/logo.png","../node_modules/@trust/webcrypto/src/algorithms sync","model/HolderComponents/Observable.js","model/HolderComponents/CheckIn.js","solid/rdf/Constants.js","solid/rdf/Prefixes.js","solid/SolidMethods.js","solid/rdf/SolidTtlTemplates.js","solid/solidCommunicatorInits/PodFolderBuilder.js","error/AccessError.js","solid/solidCommunicatorInits/AccessChecker.js","model/HolderComponents/CheckInHandler.js","model/HolderComponents/Friend.js","model/HolderComponents/Group.js","solid/solidCommunicatorInits/SolidCommunicatorBuilder.js","solid/solidCommunicatorInits/PreApplicationHandelings.js","model/HolderComponents/Beer.js","model/HolderComponents/Brewer.js","solid/SolidCommunicator.js","component/NavBar.js","routes/page/Home.js","routes/page/LogIn.js","component/GroupMakerOverlay.js","routes/page/Groups.js","routes/page/Friends.js","component/BeerCheckInComponent.js","routes/page/FriendPage.js","routes/page/CheckIns.js","routes/page/BeerResults.js","routes/page/Profile.js","routes/page/User.js","routes/page/Inbox.js","component/BeerCheckInOverlay.js","routes/page/BeerDetailScreen.js","routes/page/BrewerPage.js","routes/AppRoutes.js","routes/extrapage/AclErrorPage.js","routes/extrapage/FetchingPage.js","model/HolderComponents/User.js","model/ModelHolder.js","App.js","serviceWorker.js","index.js","assets/profilePic.png"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Observable","this","_subscribers","map","subscriber","update","push","filter","subscriberList","CheckIn","fileLocation","_fileLocation","userWebId","userName","beerLocation","beerName","checkInTime","rating","review","_type","_userWebId","_userName","_beerLocation","_beerName","_checkInTime","_rating","_review","upDateSubScribers","APPLICATION_NAME_PTI","APPFOLDER_NAME","CHECKIN_FOLDER","BEERDRINKERFOLDER","CONTENT_TYPE_TURTLE","INBOX_FOLDER","APPDATA_FILE","FRIENDS_FILE","APPDATA_FILENAME","FRIENDS_FILENAME","FRIENDSGROUPNAME","FRIENDSSENTGROUPNAME","GROUPFOLDER","GROUP_MEMBERS","GROUP_DATA_FILE","BEERREVIEWFILENAME","FRIENDSHIPREQUEST_ACCEPTED_NAME","rdfLib","require","SOLID","Namespace","PIM","VCARD","TERMS","RDF","SOLIDLINKEDBEER","FOAF","LDP","DBPEDIA","SCHEMA","ACL","fileClient","authClient","postSolidFile","folder","filename","body","a","fetch","method","headers","putSolidFile","url","getUserFile","userttt","graph","status","text","parse","any","undefined","profile","sym","publicProfileIndex","readFile","value","ppiTTL","ppigraph","app","appQuery","nameFN","imageURL","inbox","result","name","imageUrl","appLocation","loadFriendData","friend","getUri","userDetails","setUserDetails","friendAppdataLocation","then","friendsAppdata","blankNode","startdate","points","setAppData","Date","getCheckInHandler","setBeerPoints","getTenUserCheckIns","getBeerDrinkerFolder","res","setReviesCheckInsAndUserCheckIns","reviews","checkIns","userBeerCheckIns","beerDrinkerFolder","checkinLocation","readFolder","fileContents","files","reverse","i","length","loadValuesInCheckInFile","beerCheckIn","includes","getAllUserCheckIns","beerdrinkerFolder","getFileLocation","ttlFile","namedNode","webId","userId","beerlocation","beername","checkinTime","loadInAttributes","getInviteToLSBInvitation","urlInvitee","invitation","postLocation","add","getFriendShipRequest","getDeclineFriendshipRequest","from","getAcceptFriendshipRequest","description","beerCheckInTemplate","time","beerReviewInTemplate","getGroupAppDataTTL","urlFile","friends","groupName","friendsgroup","forEach","getGroupAclTTL","groupLocation","groupAppDataLocation","groupAcl","webIdOwner","owner","ownerAgent","members","resource","getGroupCheckInsAclTTL","buildFolders","storePublicProfileIndex","storagePublic","createAppNodeForPublicTypeIndex","applocation","makeAppFolderStructure","sleep","ms","Promise","setTimeout","checkFolderIntegrity","appfolder","groupFolder","groupFolderAcl","getAclGroupFolder","store","publicTypeIndex","publicLocation","findEmptyFolder","appLocationNN","rdflib","newTTLpublicTypeindex","makeRandomString","characters","charactersLength","charAt","Math","floor","random","appFolderUrl","aclUrl","getAclAppFolder","beerDrinkerUrl","getFriendsFile","friendsUrl","appDataFileAcl","appDataFile","getAppDataInit","getAclAppData","getACLInboxFolder","inboxUrl","inboxUrlacl","reviewUrlacl","reviewUrl","getACLSubmittersFriends","bn","appUrl","webIdUserLoggedIn","agent","friendsgroupRequested","_public","resourceUrl","group1","fgroup1","fgroup2","AccessError","args","message","checkacess","storeProfileCard","readAcess","match","Write","Append","Control","CheckInHandler","_checkInsAmount","_beerReviewsAmount","_beerPoints","_userCheckIns","_allCheckinsGotten","checkIn","subscribe","bool","amount","beerPoints","beerReviews","userCheckins","unsubscribe","concat","Friend","uri","_profileUri","_name","_imageUrl","_beerDrinkerFolder","_startDate","_checkInHandler","clearAll","pictureurl","getUserName","replace","getTime","Group","checkInsLocation","groupDataLocation","createdByMe","_url","_checkInsLocation","_groupDataLocation","_createdByMe","naam","buildSolidCommunicator","modelHolder","solidCommunicator","returnObject","user","getUser","checkInHandler","webIdNN","getUserCard","getPPILocation","ppiObject","getStorePublic","getApplicationLocation","ppi","applicationLocation","sc","getUserDetails","loadInUserValues","setFileLocations","getAppData","loadInAppData","parseInt","loadInAppStore","addUserCheckIns","setBeerReviewsAmount","setCheckInsAmount","getFriends","addFriends","loadInFriendsStore","group","sentGroup","friendsStore","getGroups","setGroups","groupsLocation","groups","folders","groupCheckInsLocation","loadGroupInformation","groupDataFile","getGroupDataFile","groupDataGraph","setName","getUrl","webIdUrl","profileCardTTl","storePublicTypeIndex","publicTypeIndexTTL","appdataLocation","appdatattl","friendsLocation","ttlFriends","query","each","index","friendGroup","friendsRequestedGroup","FriendsStore","inboxContent","acceptedRequests","file","checkAcceptedFriendShipRequests","declinedRequests","checkDeclinedFriendShipRequests","friendsGroup","friendsSent","friendGraph","filettl","removeMatches","addFriend","serialize","friendsTtl","deleteFile","Beer","type","style","brewer","location","_style","_brewer","_location","containers","_description","_containers","Brewer","_beers","groep","opgericht","owners","provincie","email","taxID","telephone","postalCode","streetAddress","addressRegion","addressLocality","_groep","_opgericht","_owners","_provincie","_email","_taxid","_telephone","_postalcode","_streetAdress","_addressRegion","_addressLocality","beers","SolidCommunicator","_modelHolder","_user","_friendsStore","_friendGroup","_friendsRequestedGroup","preApplicationHandelings","_appStore","_blankNodeAppStore","_checkInFolder","_appStoreLocation","fetchFile","fileTTL","blanknode","query1","query2","console","log","fileName","getName","invitationTTL","SolidTemplates","checkIfUserIsFriend","fileNameName","friendsFile","friendsTTL","declineTTL","acceptedTTL","beersIndexTTl","beer","beerTTl","container","updateInformation","hasReview","date","checkingFolder","addBeerReviewToAmount","addBeerPoints","sendBeerPoints","addToCheckInsAmount","BeerCheckIn","getUTCDate","beerPointsQueryNow","appTTL","brewerTTl","taxid","beerIndex","blankNodeAdress","postalcode","streetaddress","addressregion","addresslocality","loadInBrewerInformation","fetchBeerData","addBeers","getAllCheckInsGotten","setUserCheckIns","setAllCheckInsGotten","beerdrinkerUrl","groupUrlAcl","groupUrl","appdataName","checkInsAcl","checkins","groupAclTtl","NavBar","onInput","props","onBeerSearch","target","input","cldn","React","Children","toArray","children","child","key","to","className","loggedIn","placeholder","searchQuery","onChange","onClick","onSearchBarButtonClick","Component","Home","src","Knipsel","alt","color","LogIn","onChangeCheckBox","setState","loginAsBrewer","state","onButtonClick","solidAuth","popupLogin","popupUri","currentSession","session","onLoggedIn","history","onRegisterClick","window","assign","typeLogIn","activeClass","join","GroupMakerOverlay","onDivClick","stopPropagation","onOverLayCancelClick","overlay","display","makeGroup","isMulti","options","valuesSelector","selectedFriends","onSelect","Groups","onMakeGroupClick","makeNewGroup","onSelectFriend","onGroupNameChange","friendsComs","label","href","onAddReviewClick","addReview","checkInBeer","onPostBeerReview","Friends","inputText","toUpperCase","friendUri","friendUri2","friendUri3","friendUri4","pathname","error","friendsElements","BeerCheckInComponent","context","checkin","FriendPage","getFriendFromIndex","params","content","imgUrl","getImageUrl","userCheckIns","getUserCheckIns","getStartDate","profilePic","getCheckInsAmount","getBeerReviewsAmount","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","dateToString","getBeerPoints","getAllCheckIns","getAllCheckInsLoggedInUser","BeerResults","onLinkClick","setBeer","setBeers","elements","getBeers","listItem","Profile","getBeginDate","User","onNotJoinedButtonClick","inviteUserToSolib","clicked","sendFriendShipRequest","sendFriendshipRequest","button","disabled","Inbox","declineFriendShipRequest","array","messages","splice","declineFriendSchipRequest","acceptFriendShipRequest","acceptFriendSchipRequest","getInboxContents","items","buttonDiv","BeerCheckInOverlay","Rating","beerRating","precision","event","newValue","setBeerRating","beerReview","onBeerReviewChange","BeerDetailScreen","postBeerReview","onCheckInClick","getBeer","setBrewer","getBrewer","fetchBeer","brewerName","BrewerPage","getBrewerInformation","section","getGroep","AppRoutes","exact","path","component","isLoggedIn","UserPage","FriendsPage","clearSearchQuery","CheckIns","PrivateRoute","rest","render","PrivateRouteLogIn","withRouter","AclErrorPage","FetchingPage","_uri","_appFolder","_beerDrinkerFoler","appFolder","startDate","ModelHolder","_friends","_slectedBeer","_groups","newFriends","newFriend","App","checkLoggedIn","fetchingFiles","setUri","build","accessError","onClickLogOut","logout","userObject","goBack","navBar","Logo","Boolean","hostname","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4362bcfc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Knipsel.4dafcfef.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.a311d3af.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 484;","class Observable {\r\n    constructor(){\r\n        this._subscribers = [];\r\n    }\r\n\r\n    upDateSubScribers(){\r\n        this._subscribers.map(subscriber => subscriber.update());\r\n    }\r\n\r\n    subscribe(subscriber){\r\n        this._subscribers.push(subscriber);\r\n    }\r\n\r\n    unsubscribe(subscriber){\r\n        this._subscribers.filter(subscriberList  => {\r\n            return subscriberList !== subscriber;\r\n        });\r\n    }\r\n}\r\n\r\nexport default Observable;","import Observable from \"./Observable\";\r\n\r\nclass CheckIn extends Observable{\r\n    constructor(fileLocation){\r\n        super();\r\n        this._fileLocation = fileLocation;\r\n    }\r\n\r\n    getFileLocation(){\r\n        return this._fileLocation;\r\n    }\r\n\r\n    loadInAttributes(userWebId, userName, beerLocation, beerName, checkInTime, rating, review){\r\n        this._type  = rating? \"BeerReview\" : \"BeerCheckIn\";\r\n        this._userWebId = userWebId;\r\n        this._userName = userName;\r\n        this._beerLocation = beerLocation;\r\n        this._beerName = beerName;\r\n        this._checkInTime = checkInTime;\r\n        this._rating = rating;\r\n        this._review = review;\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n}\r\n\r\nexport default CheckIn;","/**\r\n * App folder names\r\n * @type {string}\r\n */\r\nexport const APPLICATION_NAME_PTI = \"SocialLinkedBeer\";\r\nexport const APPFOLDER_NAME = \"sociallinkedbeer\";\r\nexport const CHECKIN_FOLDER = \"checkins/\";\r\nexport const BEERDRINKERFOLDER = \"beerdrinker/\";\r\nexport const CONTENT_TYPE_TURTLE = \"text/turtle\";\r\nexport const INBOX_FOLDER = 'inbox/';\r\n\r\nexport const APPDATA_FILE = 'appdata.ttl';\r\nexport const FRIENDS_FILE = \"friends.ttl\";\r\nexport const APPDATA_FILENAME = 'appdata';\r\nexport const FRIENDS_FILENAME = \"friends\";\r\n\r\nexport const FRIENDSGROUPNAME = \"Friends\";\r\nexport const FRIENDSSENTGROUPNAME = \"FriendsRequested\";\r\n\r\nexport const GROUPFOLDER = \"groups/\";\r\nexport const GROUP_MEMBERS = \"Members\";\r\nexport const GROUP_DATA_FILENAME = \"groupdata\";\r\nexport const GROUP_DATA_FILE = \"groupdata.ttl\";\r\n\r\n/**\r\n * Text\r\n * @type {string}\r\n */\r\nexport const APPLICATION_INVITAION_NAME = \"Social_Linked_Beer_app_invitation_\";\r\nexport const APPLICATION_INVITAION_DESC = \" invites you to drink a beer with him on https://ozcanseker.github.io/Social-linked-beer/ .\";\r\n\r\nexport const BEERREVIEWFILENAME = \"_BeerReview\";\r\nexport const BEERCHECKINFILENAME = \"_BeerCheckIn\";\r\n\r\nexport const FRIENDSSHIPREQUEST_NAME = \"Social_Linked_Beer_friendshiprequest_from_\";\r\nexport const FRIENDSSHIPREQUEST_DESC = \" invites you to share your stories with him.\";\r\n\r\nexport const FRIENDSHIPREQUEST_ACCEPTED_NAME = \"Social_Linked_Beer_FriendschipRequestAccepted_from_\";\r\nexport const FRIENDSHIPREQUEST_ACCEPTED_DESC = \" accepted your friendship request.\";\r\n\r\nexport const FRIENDSHIPREQUEST_DECLINED_NAME = \"Social_Linked_Beer_FriendschipRequestDecline_from_\";\r\nexport const FRIENDSHIPREQUEST_DECLINED_DESC = \" declined your friendship request.\";\r\n\r\n","const rdfLib = require('rdflib');\r\n\r\nexport const SOLID = rdfLib.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\nexport const PIM = rdfLib.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\nexport const VCARD = rdfLib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nexport const TERMS = rdfLib.Namespace('http://purl.org/dc/terms/');\r\nexport const RDF = rdfLib.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nexport const SOLIDLINKEDBEER = rdfLib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nexport const FOAF = rdfLib.Namespace('http://xmlns.com/foaf/0.1/');\r\nexport const LDP = rdfLib.Namespace('http://www.w3.org/ns/ldp#');\r\nexport const DBPEDIA = rdfLib.Namespace('http://dbeerpedia.com/def#');\r\nexport const SCHEMA = rdfLib.Namespace('http://schema.org/');\r\nexport const ACL = rdfLib.Namespace(\"http://www.w3.org/ns/auth/acl#\");\r\n\r\n\r\n\r\n","import CheckIn from \"../model/HolderComponents/CheckIn\";\r\nimport {\r\n    APPDATA_FILE,\r\n    APPLICATION_NAME_PTI,\r\n    BEERDRINKERFOLDER,\r\n    BEERREVIEWFILENAME,\r\n    CHECKIN_FOLDER\r\n} from \"./rdf/Constants\";\r\nimport {FOAF, LDP, SOLID, SOLIDLINKEDBEER, VCARD} from \"./rdf/Prefixes\";\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst rdfLib = require('rdflib');\r\n\r\nexport async function postSolidFile(folder, filename, body) {\r\n    authClient.fetch(folder, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'text/turtle',\r\n            'Link': '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"',\r\n            'SLUG': filename\r\n        },\r\n        body: body\r\n    });\r\n}\r\n\r\nexport async function putSolidFile(url, body) {\r\n    authClient.fetch(url, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'text/turtle'\r\n        },\r\n        body: body\r\n    });\r\n}\r\n\r\n/**\r\n * // let body = `INSERT DATA { <${this.state.webId+\"#comment\"}> <${SOLIDLINKEDBEER('points6').value}> <${8}> }`;\r\n // let appDataFile;\r\n // appendSolidResource(appDataFile, {body})\r\n * @param {*} url\r\n * @param {*} body\r\n */\r\nexport async function appendSolidResource(url, body) {\r\n    authClient.fetch(url, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/sparql-update'\r\n        },\r\n        body: body\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n * @param url\r\n * @returns {Promise<{appLocation: (*), imageUrl: (*), name: (*), inbox: (*), url: *}>}\r\n */\r\nexport async function getUserFile(url) {\r\n    let inbox;\r\n\r\n    //get url resource\r\n    let userttt = await authClient.fetch(url);\r\n    let graph = rdfLib.graph();\r\n\r\n    if (userttt.status === 403) {\r\n        throw new Error(\"403: user unauthorized\");\r\n    } else if (userttt.status > 400) {\r\n        throw new Error(\"Something went wrong, check if the profile card is correct\");\r\n    }\r\n\r\n    userttt = await userttt.text();\r\n\r\n    try {\r\n        //parse to check if it is ttl\r\n        rdfLib.parse(userttt, graph, url, \"text/turtle\");\r\n    } catch (err) {\r\n        throw new Error(\"Not a correct profile linked data file\");\r\n    }\r\n\r\n    //check if it is a profile card\r\n    let query = graph.any(undefined, undefined, FOAF('PersonalProfileDocument'));\r\n\r\n    if (query) {\r\n        let profile = rdfLib.sym(url);\r\n\r\n        //check if user has ppi\r\n        const publicProfileIndex = graph.any(profile, SOLID(\"publicTypeIndex\"));\r\n\r\n        if (publicProfileIndex) {\r\n            let ppiTTL = await fileClient.readFile(publicProfileIndex.value);\r\n            let ppigraph = rdfLib.graph();\r\n            rdfLib.parse(ppiTTL, ppigraph, publicProfileIndex.value, \"text/turtle\");\r\n\r\n            let app = rdfLib.sym(publicProfileIndex.value + \"#\" + APPLICATION_NAME_PTI);\r\n            let appQuery = ppigraph.any(app, SOLID(\"instance\"));\r\n\r\n            //get name and Image\r\n            let nameFN = graph.any(profile, VCARD('fn'));\r\n            let imageURL = graph.any(profile, VCARD('hasPhoto'));\r\n\r\n            if (!appQuery) {\r\n                inbox = graph.any(profile, LDP('inbox'));\r\n            }\r\n\r\n            //applocation is not of beerdrinker\r\n            let result = {\r\n                url: url,\r\n                name: nameFN ? nameFN.value : undefined,\r\n                imageUrl: imageURL ? imageURL.value : undefined,\r\n                appLocation: appQuery ? appQuery.value : undefined,\r\n                inbox: inbox ? inbox.value : undefined\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            throw new Error(\"no ppi\");\r\n        }\r\n    } else {\r\n        throw new Error(\"not a profile card\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param friend\r\n */\r\nexport async function loadFriendData(friend) {\r\n    //getUserFile\r\n    let userDetails = await getUserFile(friend.getUri());\r\n    friend.setUserDetails(userDetails.name, userDetails.imageUrl, userDetails.appLocation + BEERDRINKERFOLDER);\r\n\r\n    //appdatafile\r\n    let friendAppdataLocation = userDetails.appLocation + BEERDRINKERFOLDER + APPDATA_FILE;\r\n\r\n    fileClient.readFile(friendAppdataLocation).then(friendsAppdata => {\r\n        let graph = rdfLib.graph();\r\n        rdfLib.parse(friendsAppdata, graph, friendAppdataLocation, \"text/turtle\");\r\n\r\n        let blankNode = graph.any(undefined, SOLIDLINKEDBEER('startdate'));\r\n\r\n        let startdate = graph.any(blankNode, SOLIDLINKEDBEER('startdate'));\r\n        let points = graph.any(blankNode, SOLIDLINKEDBEER('points'));\r\n\r\n        friend.setAppData(new Date(startdate.value));\r\n        friend.getCheckInHandler().setBeerPoints(points.value);\r\n    });\r\n\r\n    getTenUserCheckIns(friend.getBeerDrinkerFolder()).then(res => {\r\n        friend.getCheckInHandler().setReviesCheckInsAndUserCheckIns(res.reviews, res.checkIns, res.userBeerCheckIns)\r\n    });\r\n}\r\n\r\nexport async function getTenUserCheckIns(beerDrinkerFolder) {\r\n    let checkinLocation = beerDrinkerFolder + CHECKIN_FOLDER;\r\n    let fileContents = (await fileClient.readFolder(checkinLocation)).files.reverse();\r\n    let userBeerCheckIns = [];\r\n\r\n    let checkIns = 0;\r\n    let reviews = 0;\r\n\r\n    for (let i = 0; i < fileContents.length; i++) {\r\n        if (i < 10) {\r\n            let beerCheckIn = new CheckIn(fileContents[i].url);\r\n            loadValuesInCheckInFile(beerCheckIn);\r\n            userBeerCheckIns.push(beerCheckIn);\r\n        }\r\n\r\n        if (fileContents[i].url.includes(BEERREVIEWFILENAME)) {\r\n            reviews++;\r\n        } else {\r\n            checkIns++;\r\n        }\r\n\r\n    }\r\n\r\n    return {userBeerCheckIns: userBeerCheckIns, reviews: reviews, checkIns: checkIns};\r\n}\r\n\r\nexport async function getAllUserCheckIns(beerdrinkerFolder) {\r\n    let checkinLocation = beerdrinkerFolder + CHECKIN_FOLDER;\r\n    let fileContents = (await fileClient.readFolder(checkinLocation)).files.reverse();\r\n    let userBeerCheckIns = [];\r\n\r\n    let checkIns = 0;\r\n    let reviews = 0;\r\n\r\n    for (let i = 0; i < fileContents.length; i++) {\r\n        let beerCheckIn = new CheckIn(fileContents[i].url);\r\n        loadValuesInCheckInFile(beerCheckIn);\r\n        userBeerCheckIns.push(beerCheckIn);\r\n\r\n        if (fileContents[i].url.includes(BEERREVIEWFILENAME)) {\r\n            reviews++;\r\n        } else {\r\n            checkIns++;\r\n        }\r\n\r\n    }\r\n\r\n    return userBeerCheckIns;\r\n}\r\n\r\nexport async function loadValuesInCheckInFile(beerCheckIn) {\r\n    fileClient.readFile(beerCheckIn.getFileLocation()).then(ttlFile => {\r\n        let graph = rdfLib.graph();\r\n        let namedNode = rdfLib.sym(beerCheckIn.getFileLocation());\r\n        rdfLib.parse(ttlFile, graph, beerCheckIn.getFileLocation(), \"text/turtle\");\r\n\r\n        let webId = graph.any(namedNode, SOLIDLINKEDBEER('webId'));\r\n        let userId = graph.any(namedNode, SOLIDLINKEDBEER('username'));\r\n        let beerlocation = graph.any(namedNode, SOLIDLINKEDBEER('beerLocation'));\r\n        let beername = graph.any(namedNode, SOLIDLINKEDBEER('beerName'));\r\n        let checkinTime = graph.any(namedNode, SOLIDLINKEDBEER('checkInTime'));\r\n        let rating = graph.any(namedNode, SOLIDLINKEDBEER('rating'));\r\n        let review = graph.any(namedNode, SOLIDLINKEDBEER('review'));\r\n\r\n        beerCheckIn.loadInAttributes(\r\n            webId.value,\r\n            userId ? userId.value : undefined,\r\n            beerlocation.value,\r\n            beername.value,\r\n            checkinTime.value,\r\n            rating ? rating.value : undefined,\r\n            review ? review.value : undefined\r\n        );\r\n    });\r\n}","import * as rdfLib from \"rdflib\";\r\nimport {ACL, RDF, SCHEMA, SOLID, SOLIDLINKEDBEER, VCARD} from \"./Prefixes\";\r\nimport {GROUP_MEMBERS} from \"./Constants\";\r\n\r\nexport function getInviteToLSBInvitation(urlInvitee, invitation, postLocation, userWebId){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('Invitation'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('invitationTo'), rdfLib.sym('https://ozcanseker.github.io/Social-linked-beer/'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(urlInvitee));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getFriendShipRequest(urlInvitee, invitation, postLocation, userWebId){\r\n    //make friendrequest\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('FriendshipRequest'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(urlInvitee));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getDeclineFriendshipRequest(from , invitation, postLocation, userWebId){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('FriendschipRequestDecline'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(from));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getAcceptFriendshipRequest(from, description , postLocation, userWebId){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('FriendschipRequestAccepted'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(from));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), description);\r\n\r\n    //make a text file and send\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} postLocation \r\n * @param {string} userName \r\n * @param {string} webId \r\n * @param {url to webresresource} beerLocation \r\n * @param {string} beerName \r\n * @param {Date} time \r\n */\r\nexport function beerCheckInTemplate(postLocation, userName, webId, beerLocation, beerName, time){\r\n    let graph = rdfLib.graph();\r\n    let namedNode = rdfLib.sym(postLocation);\r\n\r\n    graph.add(namedNode, RDF('type'), SOLIDLINKEDBEER('CheckIn'));\r\n    graph.add(namedNode, SOLIDLINKEDBEER('webId'), rdfLib.sym(webId));\r\n    if(userName){\r\n        graph.add(namedNode, SOLIDLINKEDBEER('username'), userName);\r\n    }\r\n    graph.add(namedNode, SOLIDLINKEDBEER('beerLocation'), rdfLib.sym(beerLocation));\r\n    graph.add(namedNode, SOLIDLINKEDBEER('beerName'), beerName);\r\n    graph.add(namedNode, SOLIDLINKEDBEER('checkInTime'), time);\r\n\r\n    // //make a text file and send\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function beerReviewInTemplate(postLocation, userName, webId, beerLocation, beerName, time, rating, review){\r\n    let graph = rdfLib.graph();\r\n    let namedNode = rdfLib.sym(postLocation);\r\n\r\n    graph.add(namedNode, RDF('type'), SOLIDLINKEDBEER('CheckReview'));\r\n    graph.add(namedNode, SOLIDLINKEDBEER('webId'), rdfLib.sym(webId));\r\n    if(userName){\r\n        graph.add(namedNode, SOLIDLINKEDBEER('username'), userName);\r\n    }\r\n    graph.add(namedNode, SOLIDLINKEDBEER('beerLocation'), rdfLib.sym(beerLocation));\r\n    graph.add(namedNode, SOLIDLINKEDBEER('beerName'), beerName);\r\n    graph.add(namedNode, SOLIDLINKEDBEER('checkInTime'), time);\r\n    graph.add(namedNode, SOLIDLINKEDBEER('rating'), rating);\r\n    graph.add(namedNode, SOLIDLINKEDBEER('review'), review);\r\n\r\n    // //make a text file and send\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getGroupAppDataTTL(urlFile,friends, groupName){\r\n    let graph = rdfLib.graph();\r\n\r\n    let friendsgroup = rdfLib.sym(urlFile + \"#\" + GROUP_MEMBERS);\r\n\r\n    graph.add(friendsgroup, RDF('type'), VCARD('Group'));\r\n    graph.add(friendsgroup, VCARD('hasUID'), rdfLib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:ABGroup\"));\r\n\r\n    friends.forEach(res => {\r\n        graph.add(friendsgroup, VCARD('hasMember'), rdfLib.sym(res));\r\n    });\r\n\r\n    graph.add(friendsgroup, SCHEMA('name'), groupName);\r\n\r\n    return rdfLib.serialize(undefined, graph, urlFile, 'text/turtle');\r\n}\r\n\r\nexport function getGroupAclTTL(groupLocation, groupAppDataLocation, groupAcl, webIdOwner){\r\n    let graph = rdfLib.graph();\r\n    let owner = rdfLib.sym(groupAcl + \"#Owner\");\r\n    let ownerAgent = rdfLib.sym(webIdOwner);\r\n\r\n    let members = rdfLib.sym(groupAppDataLocation + \"#\" + GROUP_MEMBERS);\r\n    let resource = rdfLib.sym(groupLocation);\r\n\r\n    //owner\r\n    graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(owner, ACL('accessTo'), resource);\r\n    graph.add(owner, ACL('default'), resource);\r\n    graph.add(owner, ACL('agent'), ownerAgent);\r\n\r\n    graph.add(owner, ACL('mode'), ACL('Control'));\r\n    graph.add(owner, ACL('mode'), ACL('Read'));\r\n    graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n    //public\r\n    graph.add(members, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(members, ACL('accessTo'), resource);\r\n    graph.add(members, ACL('default'), resource);\r\n\r\n    graph.add(members, ACL('agentGroup'), members);\r\n\r\n    graph.add(members, ACL('mode'), ACL('Read'));\r\n\r\n    return rdfLib.serialize(undefined, graph, groupAcl, 'text/turtle');\r\n}\r\n\r\nexport function getGroupCheckInsAclTTL(groupLocation, groupAppDataLocation, groupAcl, webIdOwner){\r\n    let graph = rdfLib.graph();\r\n    let owner = rdfLib.sym(groupAcl + \"#Owner\");\r\n    let ownerAgent = rdfLib.sym(webIdOwner);\r\n\r\n    let members = rdfLib.sym(groupAppDataLocation + \"#\" + GROUP_MEMBERS);\r\n    let resource = rdfLib.sym(groupLocation);\r\n\r\n    //owner\r\n    graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(owner, ACL('accessTo'), resource);\r\n    graph.add(owner, ACL('default'), resource);\r\n    graph.add(owner, ACL('agent'), ownerAgent);\r\n\r\n    graph.add(owner, ACL('mode'), ACL('Control'));\r\n    graph.add(owner, ACL('mode'), ACL('Read'));\r\n    graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n    //public\r\n    graph.add(members, RDF('type'), ACL('Authorization'));\r\n\r\n    graph.add(members, ACL('accessTo'), resource);\r\n    graph.add(members, ACL('default'), resource);\r\n\r\n    graph.add(members, ACL('agentGroup'), members);\r\n    graph.add(members, ACL('mode'), ACL('Read'));\r\n    graph.add(members, ACL('mode'), ACL('Append'));\r\n\r\n    return rdfLib.serialize(undefined, graph, groupAcl, 'text/turtle');\r\n}","import {postSolidFile, putSolidFile} from \"../SolidMethods\";\r\n\r\nimport * as fileClient from \"solid-file-client\";\r\nimport authClient from \"solid-auth-client\";\r\nimport * as rdflib from \"rdflib\";\r\nimport {ACL, FOAF, RDF, SOLID, SOLIDLINKEDBEER, TERMS, VCARD} from \"../rdf/Prefixes\";\r\nimport {\r\n  APPDATA_FILE,\r\n  APPDATA_FILENAME,\r\n  APPFOLDER_NAME,\r\n  BEERDRINKERFOLDER,\r\n  CHECKIN_FOLDER,\r\n  CONTENT_TYPE_TURTLE,\r\n  FRIENDS_FILE,\r\n  FRIENDS_FILENAME, GROUPFOLDER,\r\n  INBOX_FOLDER\r\n} from \"../rdf/Constants\";\r\n\r\nexport async function buildFolders(publicProfileIndex, storePublicProfileIndex, storagePublic, app, webId) {\r\n  //TODO a whole lot of error checking. Checking for 400 error codes and stuff like that\r\n  let applocation = await createAppNodeForPublicTypeIndex(storePublicProfileIndex, publicProfileIndex, storagePublic, app);\r\n  await makeAppFolderStructure(applocation, webId);\r\n\r\n  //sleep zodat de server de requests kan verwerken\r\n  await sleep(2000);\r\n\r\n  return applocation;\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, ms)\r\n  })\r\n}\r\n\r\nexport async function checkFolderIntegrity(appfolder, webId) {\r\n  //TODO breidt dit uit\r\n\r\n  //Group\r\n  let groupFolder = appfolder + BEERDRINKERFOLDER + GROUPFOLDER;\r\n  let groupRes = await authClient.fetch(groupFolder);\r\n\r\n  if(groupRes.status === 404){\r\n    let groupFolderAcl = groupFolder + '.acl';\r\n    await fileClient.createFolder(groupFolder);\r\n    let body = getAclGroupFolder(groupFolder, groupFolderAcl, webId);\r\n    await putSolidFile(groupFolderAcl, body);\r\n  }\r\n}\r\n\r\n/**\r\n * Adds the applicatioin to the public type index\r\n * @param {store} store \r\n * @param {NN} publicTypeIndex \r\n * @param {string} publicLocation \r\n * @param {string} app \r\n */\r\nasync function createAppNodeForPublicTypeIndex(store, publicTypeIndex, publicLocation, app) {\r\n  //find empty folder\r\n  let appLocation = await findEmptyFolder(publicLocation);\r\n\r\n  //create a named node for the app\r\n  let appLocationNN = rdflib.sym(appLocation);\r\n\r\n  //add values to the pti\r\n  store.add(publicTypeIndex, TERMS('references'), app);\r\n  store.add(app, RDF('type'), SOLID('TypeRegistration'));\r\n  store.add(app, SOLID('instance'), appLocationNN);\r\n\r\n  //serialize and send the pti\r\n  let newTTLpublicTypeindex = await rdflib.serialize(undefined, store, publicTypeIndex.value, CONTENT_TYPE_TURTLE);\r\n  await putSolidFile(publicTypeIndex.value, newTTLpublicTypeindex);\r\n\r\n  return appLocation;\r\n}\r\n\r\n/**\r\n * Finds an empty folder for the application\r\n * @param {} publicLocation \r\n */\r\nasync function findEmptyFolder(publicLocation) {\r\n  //TODO improve this. You can check if the other folder holds up to your standards. A lot of possibilities\r\n  let appLocation = publicLocation + APPFOLDER_NAME + '/'\r\n\r\n  //see if there is a folder at the applocation\r\n  let res = await authClient.fetch(appLocation);\r\n\r\n  //make eiher a new random foldername or use the original\r\n  if (res.status % 400 < 100) {\r\n    return appLocation;\r\n  } else {\r\n    return appLocation = publicLocation + APPFOLDER_NAME + makeRandomString(10) + '/'\r\n  }\r\n}\r\n\r\n/**\r\n * Makes a random string\r\n * @param {int} length \r\n */\r\nfunction makeRandomString(length) {\r\n  var result = '';\r\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  var charactersLength = characters.length;\r\n  for (var i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Makes the folder struckture for the application\r\n * @param {string} appFolderUrl \r\n * @param {string} webId \r\n */\r\nasync function makeAppFolderStructure(appFolderUrl, webId) {\r\n  //TODO make all async\r\n  let body;\r\n\r\n  //top folder\r\n  let aclUrl = appFolderUrl + '.acl';\r\n\r\n  await fileClient.createFolder(appFolderUrl);\r\n  body = getAclAppFolder(appFolderUrl, aclUrl, webId);\r\n  await putSolidFile(aclUrl, body);\r\n\r\n  //beerdrinker\r\n  let beerDrinkerUrl = appFolderUrl + BEERDRINKERFOLDER;\r\n  await fileClient.createFolder(beerDrinkerUrl);\r\n\r\n  // friends\r\n  let friendsUrl = beerDrinkerUrl + FRIENDS_FILE;\r\n  body = getFriendsFile(friendsUrl, webId);\r\n\r\n  await postSolidFile(beerDrinkerUrl, FRIENDS_FILENAME, body);\r\n\r\n  //appData \r\n  let appDataFile = beerDrinkerUrl + APPDATA_FILE;\r\n  let appDataFileAcl = appDataFile + '.acl';\r\n  \r\n  body = getAppDataInit(appDataFile);\r\n  await postSolidFile(beerDrinkerUrl, APPDATA_FILENAME, body);\r\n  \r\n  body = getAclAppData(appDataFile, appDataFileAcl, webId, friendsUrl);\r\n  await putSolidFile(appDataFileAcl, body);\r\n\r\n  //inboxfolder\r\n  let inboxUrl = beerDrinkerUrl + INBOX_FOLDER;\r\n  let inboxUrlacl = inboxUrl + '.acl';\r\n  body = getACLInboxFolder(inboxUrl, inboxUrlacl, webId);\r\n\r\n  await fileClient.createFolder(inboxUrl);\r\n  await putSolidFile(inboxUrlacl, body);\r\n\r\n  //check in folder        \r\n  let reviewUrl = beerDrinkerUrl + CHECKIN_FOLDER;\r\n  let reviewUrlacl = reviewUrl + '.acl';\r\n\r\n  await fileClient.createFolder(reviewUrl);\r\n  body = getACLSubmittersFriends(reviewUrl, reviewUrlacl, webId, friendsUrl);\r\n  await putSolidFile(reviewUrlacl, body);\r\n\r\n  //check in folder\r\n  let groupFolder = beerDrinkerUrl + GROUPFOLDER;\r\n  let groupFolderAcl = groupFolder + '.acl';\r\n\r\n  //group folder\r\n  await fileClient.createFolder(groupFolder);\r\n  body = getAclGroupFolder(groupFolder, groupFolderAcl, webId);\r\n  await putSolidFile(groupFolderAcl, body);\r\n}\r\n\r\n/**\r\n * The init file for the appdata\r\n * @param {string} url \r\n */\r\nfunction getAppDataInit(url) {\r\n  let graph = rdflib.graph();\r\n\r\n  let bn = rdflib.blankNode();\r\n\r\n  graph.add(bn, SOLIDLINKEDBEER('startdate'), new Date());\r\n  graph.add(bn, SOLIDLINKEDBEER('points'), 0);\r\n\r\n  return rdflib.serialize(undefined, graph, url, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Makes the acl for the app folder\r\n * Only owner can see, write and control\r\n * @param {*} appUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n */\r\nfunction getAclAppFolder(appUrl, aclUrl, webIdUserLoggedIn) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let app = rdflib.sym(appUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), app);\r\n  graph.add(owner, ACL('default'), app);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Init for the friends file\r\n * @param {string} urlFile \r\n * @param {*} webId \r\n */\r\nfunction getFriendsFile(urlFile) {\r\n  let graph = rdflib.graph();\r\n\r\n  let friendsgroup = rdflib.sym(urlFile + \"#Friends\");\r\n  let friendsgroupRequested = rdflib.sym(urlFile + \"#FriendsRequested\");\r\n\r\n  graph.add(friendsgroup, RDF('type'), VCARD('Group'));\r\n  graph.add(friendsgroup, VCARD('hasUID'), rdflib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:ABGroup\"));\r\n\r\n  graph.add(friendsgroupRequested, RDF('type'), VCARD('Group'));\r\n  graph.add(friendsgroupRequested, VCARD('hasUID'), rdflib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:CDGroup\"));\r\n\r\n  return rdflib.serialize(undefined, graph, urlFile, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Get the acl for the inbox folder. Everyone can write but only owner can read\r\n * @param {} inboxUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n */\r\nfunction getACLInboxFolder(inboxUrl, aclUrl, webIdUserLoggedIn) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let _public = rdflib.sym(aclUrl + \"#Public\");\r\n  let inbox = rdflib.sym(inboxUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), inbox);\r\n  graph.add(owner, ACL('default'), inbox);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(_public, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(_public, ACL('accessTo'), inbox);\r\n  graph.add(_public, ACL('default'), inbox);\r\n  graph.add(_public, ACL('agentClass'), FOAF(\"Agent\"));\r\n\r\n  graph.add(_public, ACL('mode'), ACL('Append'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Acl check in folder. Friend and user can read\r\n * @param {*} resourceUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n * @param {*} friendsUrl \r\n */\r\nfunction getACLSubmittersFriends(resourceUrl, aclUrl, webIdUserLoggedIn, friendsUrl) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let group1 = rdflib.sym(aclUrl + \"#Friends\");\r\n  let resource = rdflib.sym(resourceUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //group who get acess\r\n  let fgroup1 = rdflib.sym(friendsUrl + \"#Friends\");\r\n  let fgroup2 = rdflib.sym(friendsUrl + \"#FriendsRequested\");\r\n\r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), resource);\r\n  graph.add(owner, ACL('default'), resource);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(group1, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(group1, ACL('accessTo'), resource);\r\n  graph.add(group1, ACL('default'), resource);\r\n\r\n  graph.add(group1, ACL('agentGroup'), fgroup1);\r\n  graph.add(group1, ACL('agentGroup'), fgroup2);\r\n\r\n  graph.add(group1, ACL('mode'), ACL('Read'));\r\n  graph.add(group1, ACL('mode'), ACL('Append'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Acl app file. Friend and user can read\r\n * @param {*} resourceUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n * @param {*} friendsUrl \r\n */\r\nfunction getAclAppData(resourceUrl, aclUrl, webIdUserLoggedIn, friendsUrl) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let group1 = rdflib.sym(aclUrl + \"#Friends\");\r\n  let resource = rdflib.sym(resourceUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //group who get acess\r\n  let fgroup1 = rdflib.sym(friendsUrl + \"#Friends\");\r\n  let fgroup2 = rdflib.sym(friendsUrl + \"#FriendsRequested\");\r\n\r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), resource);\r\n  graph.add(owner, ACL('default'), resource);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(group1, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(group1, ACL('accessTo'), resource);\r\n  graph.add(group1, ACL('default'), resource);\r\n\r\n  graph.add(group1, ACL('agentGroup'), fgroup1);\r\n  graph.add(group1, ACL('agentGroup'), fgroup2);\r\n\r\n  graph.add(group1, ACL('mode'), ACL('Read'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\nfunction getAclGroupFolder(appUrl, aclUrl, webIdUserLoggedIn) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let app = rdflib.sym(appUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), app);\r\n  graph.add(owner, ACL('default'), app);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}","class AccessError extends Error {\r\n    constructor(...args) {\r\n        super(...args);\r\n\r\n        this.message = \"Access file is not correct\";\r\n    }\r\n}\r\n\r\nexport default AccessError;","import * as rdfLib from \"rdflib\"\r\n\r\nimport AccessError from '../../error/AccessError'\r\nimport {ACL} from '../rdf/Prefixes'\r\n\r\nexport function checkacess(storeProfileCard){\r\n    let blankNode = storeProfileCard.any(undefined, ACL('origin'),rdfLib.sym(\"https://ozcanseker.github.io\"));\r\n    let readAcess = storeProfileCard.match(blankNode, ACL('mode'), ACL('Read'));\r\n    let Write = storeProfileCard.match(blankNode, ACL('mode'),ACL('Write'));\r\n    let Append = storeProfileCard.match(blankNode, ACL('mode'),ACL('Append'));\r\n    let Control = storeProfileCard.match(blankNode, ACL('mode'),ACL('Control'));\r\n\r\n    if(!readAcess.length){\r\n        throw new AccessError(\"Read access\");\r\n    }\r\n\r\n    if(!Write.length){\r\n        throw new AccessError(\"Write access\");\r\n    }\r\n\r\n    if(!Append.length){\r\n        throw new AccessError(\"Append access\");\r\n    }\r\n\r\n    if(!Control.length){\r\n        throw new AccessError(\"Control access\");\r\n    }\r\n}","import Observable from \"./Observable\";\r\n\r\nclass CheckInHandler extends Observable {\r\n    constructor() {\r\n        super();\r\n\r\n        this._checkInsAmount = 0;\r\n        this._beerReviewsAmount = 0;\r\n        this._beerPoints = 0;\r\n        this._userCheckIns = [];\r\n        this._allCheckinsGotten = false;\r\n    }\r\n\r\n    setReviesCheckInsAndUserCheckIns(reviews, checkIns, userBeerCheckIns){\r\n        this._beerReviewsAmount = reviews;\r\n        this._checkInsAmount = checkIns;\r\n\r\n        userBeerCheckIns.forEach(checkIn => {\r\n            checkIn.subscribe(this);\r\n        });\r\n\r\n        this._userCheckIns = userBeerCheckIns;\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    setAllCheckInsGotten(bool){\r\n        this._allCheckinsGotten = bool;\r\n    }\r\n\r\n    getAllCheckInsGotten(){\r\n        return this._allCheckinsGotten;\r\n    }\r\n\r\n    addBeerPoints(amount) {\r\n        this._beerPoints += amount;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    setBeerPoints(beerPoints) {\r\n        this._beerPoints = beerPoints;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getBeerPoints() {\r\n        return this._beerPoints;\r\n    }\r\n\r\n    setBeerReviewsAmount(beerReviews) {\r\n        this._beerReviewsAmount = beerReviews;\r\n        this.upDateSubScribers()\r\n    }\r\n\r\n    getBeerReviewsAmount() {\r\n        return this._beerReviewsAmount;\r\n    }\r\n\r\n    addBeerReviewToAmount() {\r\n        this._beerReviewsAmount++;\r\n        this.upDateSubScribers()\r\n    }\r\n\r\n    setCheckInsAmount(checkIns) {\r\n        this._checkInsAmount = checkIns;\r\n        this.upDateSubScribers()\r\n    }\r\n\r\n    getCheckInsAmount() {\r\n        return this._checkInsAmount;\r\n    }\r\n\r\n    addToCheckInsAmount() {\r\n        this._checkInsAmount++;\r\n        this.upDateSubScribers()\r\n    }\r\n\r\n    setUserCheckIns(userCheckins) {\r\n        this._userCheckIns.forEach(res => {\r\n            res.unsubscribe(this);\r\n        })\r\n\r\n        userCheckins.forEach(checkIn => {\r\n            checkIn.subscribe(this);\r\n        });\r\n\r\n        this._userCheckIns = userCheckins;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    clearAll(){\r\n        this._userCheckIns.forEach(res => {\r\n            res.unsubscribe(this);\r\n        })\r\n    }\r\n\r\n    addUserCheckIns(userCheckins) {\r\n        userCheckins.forEach(checkIn => {\r\n            checkIn.subscribe(this);\r\n        })\r\n\r\n        this._userCheckIns = userCheckins.concat(this._userCheckIns);\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getUserCheckIns() {\r\n        return this._userCheckIns;\r\n    }\r\n\r\n    update() {\r\n        this.upDateSubScribers();\r\n    }\r\n}\r\n\r\nexport default CheckInHandler;","import Observable from \"./Observable\";\r\nimport CheckInHandler from \"./CheckInHandler\";\r\n\r\nclass Friend extends Observable{\r\n    constructor(uri){\r\n        super();\r\n        this._profileUri = uri;\r\n\r\n        this._name = undefined;\r\n        this._imageUrl = undefined;\r\n        this._beerDrinkerFolder = undefined;\r\n        this._startDate = undefined;\r\n\r\n        this._checkInHandler = new CheckInHandler();\r\n        this._checkInHandler.subscribe(this);\r\n    }\r\n\r\n    clearAll(){\r\n        this._checkInHandler.unsubscribe(this);\r\n        this._checkInHandler.clearAll();\r\n    }\r\n\r\n    setUserDetails(name, pictureurl, beerDrinkerFolder){\r\n        this._name = name ? name : this.getUserName(this._profileUri);\r\n\r\n        this._imageUrl = pictureurl;\r\n        this._beerDrinkerFolder = beerDrinkerFolder;\r\n\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    setAppData(startdate){\r\n        this._startDate = startdate;\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    update(){\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getCheckInHandler(){\r\n        return this._checkInHandler;\r\n    }\r\n\r\n    getUserName(uri){\r\n        return  uri.replace(\"https://\", \"\").replace(/\\..*/, \"\");\r\n    }\r\n\r\n    getBeerDrinkerFolder(){\r\n        return this._beerDrinkerFolder;\r\n    }\r\n\r\n    getUri(){\r\n        return this._profileUri;\r\n    }\r\n\r\n    getImageUrl(){\r\n        return this._imageUrl;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n\r\n    getStartDate(){\r\n        if(this._startDate){\r\n            //send a copy of the date back and not the date itself\r\n            return new Date(this._startDate.getTime())\r\n        }else{\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Friend;","import CheckInHandler from \"./CheckInHandler\";\r\nimport Observable from \"./Observable\";\r\n\r\nclass Group extends Observable{\r\n    constructor(url, checkInsLocation, groupDataLocation, createdByMe){\r\n        super();\r\n\r\n        this._url = url;\r\n        this._name = url;\r\n        this._checkInsLocation = checkInsLocation;\r\n        this._groupDataLocation = groupDataLocation;\r\n\r\n        this._createdByMe = createdByMe;\r\n\r\n        this._checkInHandler = new CheckInHandler();\r\n    }\r\n\r\n    setName(naam){\r\n        this._name = naam;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getCheckInHandler(){\r\n        return this._checkInHandler;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n\r\n    getUrl(){\r\n        return this._url;\r\n    }\r\n\r\n    getCheckInLocation(){\r\n        return this._checkInsLocation;\r\n    }\r\n\r\n    getGroupDataFile(){\r\n        return this._groupDataLocation;\r\n    }\r\n\r\n    clearAll(){\r\n        this._checkInHandler.clearAll();\r\n    }\r\n\r\n    update(){\r\n        this.upDateSubScribers();\r\n    }\r\n}\r\n\r\nexport default Group;","import {buildFolders, checkFolderIntegrity} from './PodFolderBuilder';\r\nimport {getTenUserCheckIns, loadFriendData} from \"../SolidMethods\";\r\nimport {checkacess} from './AccessChecker';\r\nimport {PIM, SCHEMA, SOLID, SOLIDLINKEDBEER, VCARD} from \"../rdf/Prefixes\";\r\n\r\nimport * as fileClient from \"solid-file-client\";\r\nimport * as rdfLib from \"rdflib\";\r\nimport {\r\n    APPDATA_FILE,\r\n    APPLICATION_NAME_PTI,\r\n    BEERDRINKERFOLDER, CHECKIN_FOLDER, CONTENT_TYPE_TURTLE,\r\n    FRIENDS_FILE,\r\n    FRIENDSGROUPNAME,\r\n    FRIENDSSENTGROUPNAME, GROUP_DATA_FILE, GROUPFOLDER\r\n} from \"../rdf/Constants\";\r\nimport Friend from \"../../model/HolderComponents/Friend\";\r\nimport Group from \"../../model/HolderComponents/Group\";\r\n\r\nexport async function buildSolidCommunicator(modelHolder, solidCommunicator) {\r\n    let returnObject = {};\r\n    let user = modelHolder.getUser();\r\n    let checkInHandler = modelHolder.getCheckInHandler();\r\n\r\n    //make a named node of the session webid of the user\r\n    //namednode\r\n    const webIdNN = rdfLib.sym(user.getUri());\r\n\r\n    //get a store of the profile card of the logged in user\r\n    //store\r\n    let storeProfileCard = await getUserCard(webIdNN.uri);\r\n\r\n    //check the acess before trying to make an application\r\n    checkacess(storeProfileCard);\r\n\r\n    //store for the Public Profile Index\r\n    //object with store and nn\r\n    let ppiObject = await getPPILocation(webIdNN, storeProfileCard);\r\n\r\n    //String that shows the location of the public storage of the pod\r\n    //string \r\n    let storagePublic = getStorePublic(webIdNN, storeProfileCard);\r\n\r\n    //locatie voor de applicatie\r\n    //string\r\n    let applicationLocation = await getApplicationLocation(ppiObject.ppi, ppiObject.store, storagePublic, webIdNN.value);\r\n\r\n    //returnobject\r\n    returnObject.sc = {};\r\n\r\n    let userDetails = getUserDetails(webIdNN, storeProfileCard);\r\n    user.loadInUserValues(userDetails.name, userDetails.imageURL, applicationLocation, applicationLocation + BEERDRINKERFOLDER);\r\n    solidCommunicator.setFileLocations();\r\n\r\n    getAppData(user.getBeerDrinkerFolder()).then(res => {\r\n        user.loadInAppData(new Date(res.startdate));\r\n        modelHolder.getCheckInHandler().setBeerPoints(parseInt(res.points));\r\n        solidCommunicator.loadInAppStore(res.store, res.blankNode);\r\n    });\r\n\r\n    getTenUserCheckIns(user.getBeerDrinkerFolder()).then(res => {\r\n        checkInHandler.addUserCheckIns(res.userBeerCheckIns);\r\n        checkInHandler.setBeerReviewsAmount(res.reviews);\r\n        checkInHandler.setCheckInsAmount(res.checkIns);\r\n    });\r\n\r\n    getFriends(user.getBeerDrinkerFolder()).then(res => {\r\n        modelHolder.addFriends(res.friends);\r\n        solidCommunicator.loadInFriendsStore(res.group, res.sentGroup, res.friendsStore);\r\n    });\r\n\r\n    getGroups(user.getBeerDrinkerFolder()).then(res => {\r\n        modelHolder.setGroups(res);\r\n    })\r\n}\r\n\r\nasync function getGroups(beerDrinkerFolder){\r\n    let groupsLocation = beerDrinkerFolder + GROUPFOLDER;\r\n    let res = await fileClient.readFolder(groupsLocation);\r\n    let groups = [];\r\n\r\n    let myGroups = res.folders;\r\n\r\n    myGroups.forEach(res => {\r\n        let url = res.url;\r\n        let groupCheckInsLocation = url + CHECKIN_FOLDER;\r\n        let groupDataLocation = url + GROUP_DATA_FILE;\r\n\r\n        let group = new Group(res.url, groupCheckInsLocation, groupDataLocation,true);\r\n\r\n        loadGroupInformation(group);\r\n        groups.push(group);\r\n    })\r\n\r\n    return groups;\r\n}\r\n\r\nasync function loadGroupInformation(group){\r\n    let groupDataFile = group.getGroupDataFile();\r\n\r\n    let res = await fileClient.fetch(groupDataFile);\r\n    let groupDataGraph = rdfLib.graph();\r\n    rdfLib.parse(res, groupDataGraph, groupDataFile, CONTENT_TYPE_TURTLE);\r\n\r\n    let blankNode = groupDataGraph.any(null, SCHEMA('name'));\r\n    let name = groupDataGraph.any(blankNode, SCHEMA('name'));\r\n    group.setName(name.value);\r\n\r\n    getTenUserCheckIns(group.getUrl()).then(res => {\r\n        group.getCheckInHandler().setReviesCheckInsAndUserCheckIns(res.reviews, res.checkIns, res.userBeerCheckIns);\r\n    })\r\n}\r\n\r\n/**\r\n * Get the user profile card in the form of a rdflib graph.\r\n *\r\n * @param webIdUrl the uri for the profile card\r\n * @returns {Promise<void>} graph of user VCARD\r\n */\r\nasync function getUserCard(webIdUrl) {\r\n    const profileCardTTl = await fileClient.fetch(webIdUrl);\r\n    const storeProfileCard = rdfLib.graph();\r\n    rdfLib.parse(profileCardTTl, storeProfileCard, webIdUrl, \"text/turtle\");\r\n\r\n    return storeProfileCard;\r\n}\r\n\r\nasync function getPPILocation(profile, storeProfileCard) {\r\n    const publicProfileIndex = storeProfileCard.any(profile, SOLID(\"publicTypeIndex\"));\r\n\r\n    const storePublicTypeIndex = rdfLib.graph();\r\n    const publicTypeIndexTTL = await fileClient.fetch(publicProfileIndex.value);\r\n    rdfLib.parse(publicTypeIndexTTL, storePublicTypeIndex, publicProfileIndex.value, \"text/turtle\");\r\n\r\n    return {store: storePublicTypeIndex, ppi: publicProfileIndex};\r\n}\r\n\r\nfunction getStorePublic(profile, storeProfileCard) {\r\n    let locationStorage = storeProfileCard.any(profile, PIM(\"storage\"));\r\n    return locationStorage.value + \"public/\";\r\n}\r\n\r\nasync function getApplicationLocation(publicProfileIndex, storePublicProfileIndex, storagePublic, webId) {\r\n    let app = rdfLib.sym(publicProfileIndex.value + \"#\" + APPLICATION_NAME_PTI);\r\n    let appQuery = storePublicProfileIndex.any(app, SOLID(\"instance\"));\r\n\r\n    if (appQuery) {\r\n        await checkFolderIntegrity(appQuery.value, webId);\r\n        return appQuery.value;\r\n    } else {\r\n        return await buildFolders(publicProfileIndex, storePublicProfileIndex, storagePublic, app, webId);\r\n    }\r\n}\r\n\r\nfunction getUserDetails(profile, storeProfileCard) {\r\n    let nameFN = storeProfileCard.any(profile, VCARD('fn'));\r\n    let imageURL = storeProfileCard.any(profile, VCARD('hasPhoto'));\r\n\r\n    nameFN = nameFN ? nameFN.value : undefined;\r\n    imageURL = imageURL ? imageURL.value : undefined;\r\n\r\n    return {name: nameFN, imageURL: imageURL};\r\n}\r\n\r\nasync function getAppData(beerDrinkerFolder) {\r\n    //TODO one place to save all urls\r\n    let appdataLocation = beerDrinkerFolder + APPDATA_FILE;\r\n\r\n    let appdatattl = await fileClient.readFile(appdataLocation);\r\n    let graph = rdfLib.graph();\r\n    rdfLib.parse(appdatattl, graph, appdataLocation, \"text/turtle\");\r\n\r\n    let blankNode = graph.any(undefined, SOLIDLINKEDBEER('startdate'));\r\n\r\n    let startdate = graph.any(blankNode, SOLIDLINKEDBEER('startdate'));\r\n    let points = graph.any(blankNode, SOLIDLINKEDBEER('points'));\r\n\r\n    return {startdate: startdate.value, points: points.value, store: graph, blankNode: blankNode};\r\n}\r\n\r\nasync function getFriends(beerDrinkerFolder) {\r\n    let friendsLocation = beerDrinkerFolder + FRIENDS_FILE;\r\n    let ttlFriends = await fileClient.readFile(friendsLocation);\r\n\r\n    let group = rdfLib.sym(friendsLocation + \"#\" + FRIENDSGROUPNAME);\r\n    let sentGroup = rdfLib.sym(friendsLocation + \"#\" + FRIENDSSENTGROUPNAME);\r\n    let friends = [];\r\n\r\n    let graph = rdfLib.graph();\r\n    rdfLib.parse(ttlFriends, graph, friendsLocation, CONTENT_TYPE_TURTLE);\r\n\r\n    let query = graph.each(group, VCARD('hasMember'), undefined);\r\n\r\n    for (let index = 0; index < query.length; index++) {\r\n        let friend = new Friend(query[index].value);\r\n        loadFriendData(friend);\r\n\r\n        if (friend) {\r\n            friends.push(friend);\r\n        }\r\n    }\r\n\r\n    return {friends: friends, friendsStore: graph, group: group, sentGroup: sentGroup};\r\n}\r\n\r\n","import { postSolidFile, putSolidFile, getUserFile, loadFriendData } from \"../SolidMethods\";\r\nimport {FRIENDS_FILE, FRIENDSHIPREQUEST_ACCEPTED_NAME, INBOX_FOLDER} from \"../rdf/Constants\";\r\nimport {SOLIDLINKEDBEER, VCARD} from \"../rdf/Prefixes\";\r\nimport Friend from \"../../model/HolderComponents/Friend\";\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst rdfLib = require('rdflib');\r\n\r\nexport async function preApplicationHandelings(beerDrinkerFolder, friendGroup, friendsRequestedGroup, FriendsStore, modelHolder){\r\n    let inbox = beerDrinkerFolder + INBOX_FOLDER;\r\n    let inboxContent = await fileClient.readFolder(inbox);\r\n\r\n    //add friend from friend requested to friends\r\n    let acceptedRequests = inboxContent.files.filter(file => {\r\n        return file.name.includes(FRIENDSHIPREQUEST_ACCEPTED_NAME);\r\n    })\r\n\r\n    if(acceptedRequests.length !== 0){\r\n        checkAcceptedFriendShipRequests(beerDrinkerFolder, acceptedRequests, friendGroup, friendsRequestedGroup, FriendsStore, modelHolder);\r\n    }\r\n\r\n    //delete user from friends requested if they declined\r\n    let declinedRequests = inboxContent.files.filter(file => {\r\n        return file.name.includes(\"Social_Linked_Beer_FriendschipRequestDecline\");\r\n    })\r\n\r\n    if(declinedRequests.length !== 0){\r\n        await checkDeclinedFriendShipRequests(beerDrinkerFolder, declinedRequests, friendsRequestedGroup, FriendsStore);\r\n    }\r\n}\r\n\r\n/**\r\n * Check if there are accepted friendschip requests\r\n * @param {*} beerdrinkerFolder\r\n * @param {*} acceptedRequests\r\n * @param {*} scValues\r\n * @param {*} user\r\n */\r\nasync function checkAcceptedFriendShipRequests(beerdrinkerFolder, acceptedRequests, friendsGroup, friendsSent, friendGraph, modelHolder){\r\n    //get some values\r\n    let postLocation = beerdrinkerFolder + FRIENDS_FILE;\r\n\r\n    for(let i = 0; i < acceptedRequests.length; i++){\r\n        //make a graph and get file\r\n        let graph = rdfLib.graph();\r\n        let filettl = await fileClient.readFile(acceptedRequests[i].url);\r\n        rdfLib.parse(filettl, graph, acceptedRequests[i].url, \"text/turtle\");\r\n\r\n        //get the blanknode from the message\r\n        let friend = graph.any(undefined, SOLIDLINKEDBEER('from'));\r\n        friend = graph.any(friend, SOLIDLINKEDBEER('from'));\r\n\r\n        //add from friend requested to friend\r\n        friendGraph.add(friendsGroup, VCARD('hasMember'), friend);\r\n        friendGraph.removeMatches(friendsSent, VCARD('hasMember'), friend);\r\n\r\n        //get the friend from the internet\r\n        friend = new Friend(friend.value);\r\n        loadFriendData(friend);\r\n\r\n        //adding friend\r\n        modelHolder.addFriend(friend);\r\n    }\r\n\r\n    //update the original friend file\r\n    let friendsTtl = await rdfLib.serialize(undefined, friendGraph, postLocation, 'text/turtle');\r\n    //TODO post new file for user so that he know friendship is accepted\r\n    await putSolidFile(postLocation, friendsTtl);\r\n\r\n    acceptedRequests.forEach(res => {\r\n        //delete the original message\r\n        fileClient.deleteFile(res.url);\r\n    })\r\n}\r\n\r\nasync function checkDeclinedFriendShipRequests(beerDrinkerFolder, declinedRequests, friendsSent, friendGraph){\r\n    let postLocation = beerDrinkerFolder + FRIENDS_FILE;\r\n\r\n    for(let i = 0; i < declinedRequests.length; i++){\r\n        let graph = rdfLib.graph();\r\n        let filettl = await fileClient.readFile(declinedRequests[i].url);\r\n\r\n        rdfLib.parse(filettl, graph, declinedRequests[i].url, \"text/turtle\");\r\n\r\n        //get blank node from friend sent\r\n        let friend = graph.any(undefined, SOLIDLINKEDBEER('from'));\r\n        friend = graph.any(friend, SOLIDLINKEDBEER('from'));\r\n\r\n        //remove friend from the friendssent file\r\n        friendGraph.removeMatches(friendsSent, VCARD('hasMember'), friend);\r\n    }\r\n\r\n    //post new friend solid file\r\n    let friendsTtl = await rdfLib.serialize(undefined, friendGraph, postLocation, 'text/turtle');\r\n    putSolidFile(postLocation, friendsTtl);\r\n\r\n    declinedRequests.forEach(res => {\r\n        //delete the original message\r\n        fileClient.deleteFile(res.url);\r\n    })\r\n//     //TODO post new file for user so that he know friendship is declined\r\n}","import Observable from \"./Observable\";\r\n\r\nclass Beer extends Observable{\r\n    constructor(name, type, style, brewer, location){\r\n        super();\r\n\r\n        this._name = name;\r\n        this._type = type;\r\n        this._style = style;\r\n        this._brewer = brewer;\r\n        this._location = location;\r\n    }\r\n\r\n    getBrewer(){\r\n        return this._brewer;\r\n    }\r\n\r\n    updateInformation(name, type, style, brewer, description, containers){\r\n        this._name = name;\r\n        this._type = type;\r\n        this._style = style;\r\n        this._brewer = brewer;\r\n        this._description = description;\r\n        this._containers = containers;\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getUrl(){\r\n        return this._location;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n}\r\n\r\nexport default Beer;","import Observable from \"./Observable\";\r\n\r\nclass Brewer extends Observable{\r\n    constructor( url){\r\n        super();\r\n\r\n        this._url = url;\r\n        this._beers = [];\r\n    }\r\n\r\n    loadInBrewerInformation(name, groep, opgericht, owners, provincie, email, taxID, telephone, postalCode, streetAddress, addressRegion, addressLocality){\r\n        this._name = name;\r\n        this._groep = groep;\r\n        this._opgericht = opgericht;\r\n        this._owners = owners;\r\n        this._provincie = provincie;\r\n        this._email = email;\r\n        this._taxid = taxID;\r\n        this._telephone = telephone;\r\n        this._postalcode = postalCode;\r\n        this._streetAdress = streetAddress;\r\n        this._addressRegion = addressRegion;\r\n        this._addressLocality = addressLocality;\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    addBeers(beers){\r\n        this._beers = this._beers.concat(beers);\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getUrl(){\r\n        return this._url;\r\n    }\r\n\r\n    update(){\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getGroep(){\r\n        return this._groep;\r\n    }\r\n}\r\n\r\nexport default Brewer;","import {\r\n    loadFriendData,\r\n    getAllUserCheckIns,\r\n    getTenUserCheckIns,\r\n    getUserFile,\r\n    postSolidFile,\r\n    putSolidFile\r\n} from \"./SolidMethods\";\r\n\r\nimport * as SolidTemplates from './rdf/SolidTtlTemplates';\r\nimport {buildSolidCommunicator} from './solidCommunicatorInits/SolidCommunicatorBuilder'\r\nimport {preApplicationHandelings} from './solidCommunicatorInits/PreApplicationHandelings'\r\n\r\nimport Beer from '../model/HolderComponents/Beer'\r\nimport BeerCheckIn from '../model/HolderComponents/CheckIn'\r\nimport Brewer from \"../model/HolderComponents/Brewer\";\r\n\r\nimport * as fileClient from 'solid-file-client';\r\nimport * as rdfLib from 'rdflib';\r\n\r\nimport {\r\n    APPDATA_FILE,\r\n    APPDATA_FILENAME,\r\n    APPLICATION_INVITAION_DESC,\r\n    APPLICATION_INVITAION_NAME,\r\n    BEERCHECKINFILENAME,\r\n    BEERDRINKERFOLDER,\r\n    BEERREVIEWFILENAME,\r\n    CHECKIN_FOLDER,\r\n    FRIENDS_FILE,\r\n    FRIENDSHIPREQUEST_ACCEPTED_DESC,\r\n    FRIENDSHIPREQUEST_ACCEPTED_NAME,\r\n    FRIENDSHIPREQUEST_DECLINED_DESC,\r\n    FRIENDSHIPREQUEST_DECLINED_NAME,\r\n    FRIENDSSHIPREQUEST_DESC,\r\n    FRIENDSSHIPREQUEST_NAME,\r\n    GROUP_DATA_FILE,\r\n    GROUP_DATA_FILENAME,\r\n    GROUPFOLDER,\r\n    INBOX_FOLDER\r\n} from \"./rdf/Constants\";\r\nimport {DBPEDIA, FOAF, RDF, SCHEMA, SOLID, SOLIDLINKEDBEER, VCARD} from \"./rdf/Prefixes\";\r\nimport Friend from \"../model/HolderComponents/Friend\";\r\n\r\nclass SolidCommunicator {\r\n    /**\r\n     * Build the solid communicator\r\n     * @param {*} modelHolder\r\n     */\r\n    static async build(modelHolder) {\r\n        let solidCommunicator = new SolidCommunicator(modelHolder);\r\n\r\n        await buildSolidCommunicator(modelHolder, solidCommunicator);\r\n\r\n        //make new solidCommunicator\r\n        return solidCommunicator;\r\n    }\r\n\r\n    constructor(modelHolder) {\r\n        this._modelHolder = modelHolder;\r\n        this._user = modelHolder.getUser();\r\n    }\r\n\r\n    loadInFriendsStore(friendGroup, friendsRequestedGroup, friendsStore) {\r\n        this._friendsStore = friendsStore;\r\n        this._friendGroup = friendGroup;\r\n        this._friendsRequestedGroup = friendsRequestedGroup;\r\n\r\n        preApplicationHandelings(this._user.getBeerDrinkerFolder(), friendGroup, friendsRequestedGroup, friendsStore, this._modelHolder);\r\n    }\r\n\r\n    loadInAppStore(store, blankNode) {\r\n        this._appStore = store;\r\n        this._blankNodeAppStore = blankNode;\r\n    }\r\n\r\n    setFileLocations() {\r\n        this._beerDrinkerFolder = this._user.getBeerDrinkerFolder();\r\n        this._checkInFolder = this._beerDrinkerFolder + CHECKIN_FOLDER;\r\n        this._appStoreLocation = this._beerDrinkerFolder + APPDATA_FILE;\r\n    }\r\n\r\n    /**\r\n     * Get an user file\r\n     * @param {*} url\r\n     */\r\n    async getUserFile(url) {\r\n        return await getUserFile(url);\r\n    }\r\n\r\n    /**\r\n     * Get all content from the inbox.\r\n     * @returns {Promise<[]>}\r\n     */\r\n    async getInboxContents() {\r\n        let inbox = this._user.getBeerDrinkerFolder() + INBOX_FOLDER;\r\n        let res = await fileClient.readFolder(inbox);\r\n        let files = [];\r\n\r\n        for (let index = 0; index < res.files.length; index++) {\r\n            let file = await this.fetchFile(res.files[index].url);\r\n            files.push(file);\r\n        }\r\n\r\n        return files;\r\n    }\r\n\r\n    async fetchFile(url) {\r\n        let graph = rdfLib.graph();\r\n        let fileTTL = await fileClient.readFile(url);\r\n\r\n        await rdfLib.parse(fileTTL, graph, url, \"text/turtle\");\r\n\r\n        let blanknode = graph.any(undefined, RDF('type'));\r\n\r\n        let type = graph.any(blanknode, RDF('type'));\r\n        let description = graph.any(blanknode, SOLIDLINKEDBEER('description'));\r\n        let from = graph.any(blanknode, SOLIDLINKEDBEER('from'));\r\n\r\n        let file = {\r\n            type: type.value.replace(/.*#/, \"\"),\r\n            from: from.value,\r\n            description: description.value,\r\n            url: url\r\n        };\r\n\r\n        return file;\r\n    }\r\n\r\n    /**\r\n     * Check if user is already friend\r\n     * @param {*} url\r\n     */\r\n    checkIfUserIsFriend(url) {\r\n        let query1 = this._friendsStore.match(this._friendsRequestedGroup, VCARD('hasMember'), rdfLib.sym(url));\r\n        let query2 = this._friendsStore.match(this._friendGroup, VCARD('hasMember'), rdfLib.sym(url));\r\n\r\n        if (query1.length !== 0 || query2.length !== 0) {\r\n            console.log(\"already friend\");\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Send invitation to user for the application\r\n     * @param {*} urlInvitee\r\n     * @param {*} inbox\r\n     */\r\n    async inviteUserToSolib(urlInvitee, inbox) {\r\n        //name for file\r\n        let fileName = APPLICATION_INVITAION_NAME + (this._user.getName ? \"from_\" + this._user.getName() : \"\");\r\n        let invitation = this._user.getName() + APPLICATION_INVITAION_DESC;\r\n\r\n        //name of the location where it will be posted\r\n        let postLocation = inbox + fileName + \".ttl\";\r\n\r\n        //get ttl file for invitation\r\n        let invitationTTL = SolidTemplates.getInviteToLSBInvitation(urlInvitee, invitation, postLocation, this._user.getUri());\r\n\r\n        await postSolidFile(inbox, fileName, invitationTTL);\r\n    }\r\n\r\n    /**\r\n     * Sends a friendship request to user\r\n     * @param {*} urlInvitee\r\n     * @param {*} appLocation\r\n     */\r\n    async sendFriendshipRequest(urlInvitee, appLocation) {\r\n        if (!this.checkIfUserIsFriend(urlInvitee)) {\r\n            //get url without https and profile card.me\r\n            let fileNameName = this._user.getName();\r\n\r\n            //make a file name\r\n            let fileName = FRIENDSSHIPREQUEST_NAME + fileNameName;\r\n\r\n            //the invitation\r\n            let invitation = (this._user.getName() ? this._user.getName() : this._user.getUri()) + FRIENDSSHIPREQUEST_DESC;\r\n\r\n            //locations to be posted\r\n            let location = appLocation + BEERDRINKERFOLDER + INBOX_FOLDER;\r\n            let postLocation = location + fileName + \".ttl\";\r\n\r\n            //the ttl file\r\n            let invitationTTL = SolidTemplates.getFriendShipRequest(urlInvitee, invitation, postLocation, this._user.getUri());\r\n\r\n            //add friend to friend request send\r\n            let friendsFile = this._user.getBeerDrinkerFolder() + FRIENDS_FILE;\r\n            this._friendsStore.add(this._friendsRequestedGroup, VCARD('hasMember'), rdfLib.sym(urlInvitee));\r\n            let friendsTTL = await rdfLib.serialize(undefined, this._friendsStore, friendsFile, 'text/turtle');\r\n\r\n            // send files\r\n            await postSolidFile(location, fileName, invitationTTL);\r\n            await putSolidFile(friendsFile, friendsTTL);\r\n        }\r\n    }\r\n\r\n    async declineFriendSchipRequest(message) {\r\n        //send a declined friendship request to other pod\r\n        let result = await this.getUserFile(message.from);\r\n        let inbox = result.appLocation + BEERDRINKERFOLDER + INBOX_FOLDER;\r\n\r\n        //get file name and description string\r\n        let fileNameName = this._user.getName();\r\n        let fileName =  FRIENDSHIPREQUEST_DECLINED_NAME + fileNameName;\r\n        let invitation = (this._user.getName() ? this._user.getName() : this._user.getUri()) + FRIENDSHIPREQUEST_DECLINED_DESC;\r\n\r\n        //get the location is will be posted to\r\n        let postLocation = inbox + fileName + \".ttl\";\r\n\r\n        //make a text file and send\r\n        let declineTTL = SolidTemplates.getDeclineFriendshipRequest(message.from, invitation, postLocation, this._user.getUri());\r\n\r\n        //delete friendship request from own pod\r\n        await postSolidFile(inbox, fileName, declineTTL);\r\n        await fileClient.deleteFile(message.url);\r\n    }\r\n\r\n    async acceptFriendSchipRequest(message) {\r\n        //get user\r\n        let friend = new Friend(message.from);\r\n        await loadFriendData(friend);\r\n\r\n        let inbox = friend.getBeerDrinkerFolder() + INBOX_FOLDER;\r\n\r\n        //add user as friend\r\n        let friendsFile = this._user.getBeerDrinkerFolder() + FRIENDS_FILE;\r\n        this._friendsStore.add(this._friendGroup, VCARD('hasMember'), rdfLib.sym(message.from));\r\n        let friendsTTL = await rdfLib.serialize(undefined, this._friendsStore, friendsFile, 'text/turtle');\r\n        console.log(friendsTTL);\r\n\r\n        //get file name and description string\r\n        let fileNameName = this._user.getName();\r\n        let fileName = FRIENDSHIPREQUEST_ACCEPTED_NAME + fileNameName;\r\n        let description = this._user.getName() + FRIENDSHIPREQUEST_ACCEPTED_DESC;\r\n\r\n        //get the location is will be posted to\r\n        let postLocation = inbox + fileName + \".ttl\";\r\n\r\n        //make a text file and send\r\n        let acceptedTTL = SolidTemplates.getAcceptFriendshipRequest(message.from, description, postLocation, this._user.getUri());\r\n        console.log(acceptedTTL);\r\n\r\n        //send friendship accepted to user\r\n        await postSolidFile(inbox, fileName, acceptedTTL);\r\n        //delete friendship request from own pod\r\n        await fileClient.deleteFile(message.url);\r\n        //update FriendsFile\r\n        await putSolidFile(friendsFile, friendsTTL);\r\n\r\n        this._modelHolder.addFriend(friend);\r\n    }\r\n\r\n    async fetchBeerData() {\r\n        let url = \"https://testbrouwer.inrupt.net/public/brewerInformation/beers/beersIndex.ttl\";\r\n        let beersIndexTTl = await fileClient.readFile(url);\r\n\r\n        let graph = rdfLib.graph();\r\n        rdfLib.parse(beersIndexTTl, graph, url, \"text/turtle\");\r\n\r\n        let query = graph.each(undefined, RDF('type'), SOLIDLINKEDBEER('Beer'));\r\n        let beers = [];\r\n        query.forEach(blankNode => {\r\n            let brewer = graph.any(blankNode, SOLIDLINKEDBEER('brewedBy'));\r\n            let type = graph.any(blankNode, SOLIDLINKEDBEER('type'));\r\n            let name = graph.any(blankNode, SCHEMA('name'));\r\n            let style = graph.any(blankNode, SOLIDLINKEDBEER('style'));\r\n            let location = graph.any(blankNode, SOLID('instance'));\r\n\r\n            beers.push(new Beer(name.value, type.value, style.value, brewer.value, location.value));\r\n        })\r\n\r\n        return beers;\r\n    }\r\n\r\n    async fetchBeer(beer) {\r\n        let url = beer.getUrl();\r\n        let beerTTl = await fileClient.readFile(url);\r\n\r\n        let graph = rdfLib.graph();\r\n        rdfLib.parse(beerTTl, graph, url, \"text/turtle\");\r\n\r\n        let blankNode = graph.any(undefined, SOLIDLINKEDBEER('beerDescription'));\r\n\r\n        let brewer = graph.any(blankNode, SOLIDLINKEDBEER('brewedBy'));\r\n        let type = graph.any(blankNode, SOLIDLINKEDBEER('type'));\r\n        let name = graph.any(blankNode, SCHEMA('name'));\r\n        let style = graph.any(blankNode, SOLIDLINKEDBEER('style'));\r\n        let description = graph.any(blankNode, SOLIDLINKEDBEER('beerDescription'));\r\n        let containers = [];\r\n        graph.each(blankNode, SOLIDLINKEDBEER('container')).forEach(container => {\r\n            containers.push(container.value);\r\n        });\r\n\r\n        beer.updateInformation(name.value, type.value, style.value, brewer.value, description.value, containers);\r\n        return beer;\r\n    }\r\n\r\n    async postBeerReview(hasReview, beer, rating, review) {\r\n        let ttlFile;\r\n\r\n        let date = new Date();\r\n\r\n        let checkingFolder = this._checkInFolder;\r\n        let filename;\r\n        let postLocation;\r\n\r\n        if (hasReview) {\r\n            filename = date.getTime() + BEERREVIEWFILENAME;\r\n            postLocation = checkingFolder + filename + \".ttl\";\r\n            ttlFile = SolidTemplates.beerReviewInTemplate(postLocation,\r\n                this._user.getName(),\r\n                this._user.getUri(),\r\n                beer.getUrl(),\r\n                beer.getName(),\r\n                date,\r\n                rating,\r\n                review);\r\n\r\n            this._modelHolder.getCheckInHandler().addBeerReviewToAmount();\r\n            this._modelHolder.getCheckInHandler().addBeerPoints(10);\r\n            this.sendBeerPoints(10);\r\n        } else {\r\n            filename = date.getTime() + BEERCHECKINFILENAME;\r\n            postLocation = checkingFolder + filename + \".ttl\";\r\n            ttlFile = SolidTemplates.beerCheckInTemplate(postLocation,\r\n                this._user.getName(),\r\n                this._user.getUri(),\r\n                beer.getUrl(),\r\n                beer.getName(),\r\n                date);\r\n\r\n            this._modelHolder.getCheckInHandler().addToCheckInsAmount();\r\n            this._modelHolder.getCheckInHandler().addBeerPoints(5);\r\n            this.sendBeerPoints(5);\r\n        }\r\n\r\n        await postSolidFile(checkingFolder, filename, ttlFile);\r\n        let checkIn = new BeerCheckIn(postLocation);\r\n        checkIn.loadInAttributes(\r\n            this._user.getUri(),\r\n            this._user.getName(),\r\n            beer._location,\r\n            beer._name,\r\n            date.getUTCDate(),\r\n            hasReview ? rating : undefined,\r\n            hasReview ? review : undefined);\r\n        this._modelHolder.getCheckInHandler().addUserCheckIns([checkIn]);\r\n    }\r\n\r\n    async sendBeerPoints(amount) {\r\n        let beerPointsQueryNow = this._appStore.any(this._blankNodeAppStore, SOLIDLINKEDBEER(\"points\"));\r\n        beerPointsQueryNow.value = parseInt(beerPointsQueryNow.value) + amount + \"\";\r\n\r\n        let appTTL = await rdfLib.serialize(undefined, this._appStore, this._appStoreLocation, 'text/turtle');\r\n        putSolidFile(this._appStoreLocation, appTTL);\r\n    }\r\n\r\n    async getBrewerInformation(brewer) {\r\n        let url = brewer.getUrl();\r\n        let brewerTTl = await fileClient.fetch(url);\r\n\r\n        let graph = rdfLib.graph();\r\n        await rdfLib.parse(brewerTTl, graph, url, \"text/turtle\");\r\n\r\n        let blankNode = graph.any(undefined, RDF('type'));\r\n\r\n        let name = graph.any(blankNode, FOAF(\"name\")).value;\r\n        let groep = graph.any(blankNode, DBPEDIA(\"groep\")).value;\r\n        let opgericht = graph.any(blankNode, DBPEDIA(\"opgericht\")).value;\r\n        let owners = [];\r\n        graph.each(blankNode, DBPEDIA(\"owners\")).forEach(owner => {\r\n            owners.push(owner.value);\r\n        })\r\n        let provincie = graph.any(blankNode, DBPEDIA(\"provincie\")).value;\r\n        let email = graph.any(blankNode, SCHEMA(\"email\")).value;\r\n        let taxid = graph.any(blankNode, SCHEMA(\"taxID\")).value;\r\n        let telephone = graph.any(blankNode, SCHEMA(\"telephone\")).value;\r\n        let brewerUrl = graph.any(blankNode, SCHEMA(\"url\")).value;\r\n        let beerIndex = graph.any(blankNode, DBPEDIA('beersIndex'));\r\n\r\n        let blankNodeAdress = graph.any(blankNode, SCHEMA(\"address\"));\r\n\r\n        let postalcode = graph.any(blankNodeAdress, SCHEMA(\"postalCode\")).value;\r\n        let streetaddress = graph.any(blankNodeAdress, SCHEMA(\"streetAddress\")).value;\r\n        let addressregion = graph.any(blankNodeAdress, SCHEMA(\"addressRegion\")).value;\r\n        let addresslocality = graph.any(blankNodeAdress, SCHEMA(\"addressLocality\")).value;\r\n\r\n        brewer.loadInBrewerInformation(name,\r\n            groep,\r\n            opgericht,\r\n            owners,\r\n            provincie,\r\n            email,\r\n            taxid,\r\n            telephone,\r\n            postalcode,\r\n            streetaddress,\r\n            addressregion,\r\n            addresslocality);\r\n\r\n        this.fetchBeerData(beerIndex.value).then(res => {\r\n            brewer.addBeers(res);\r\n        });\r\n\r\n        return brewer;\r\n    }\r\n\r\n    async getAllCheckInsLoggedInUser() {\r\n        if (!this._modelHolder.getCheckInHandler().getAllCheckInsGotten()) {\r\n            this._modelHolder.getCheckInHandler().setUserCheckIns(\r\n                await getAllUserCheckIns(\r\n                    this._modelHolder.getUser().getBeerDrinkerFolder()\r\n                )\r\n            );\r\n\r\n            this._modelHolder.getCheckInHandler().setAllCheckInsGotten(true);\r\n        }\r\n    }\r\n\r\n    async makeNewGroup(beerdrinkerUrl, groupName, friends) {\r\n        let groupUrl = beerdrinkerUrl + GROUPFOLDER + groupName + \"/\";\r\n        let groupUrlAcl = groupUrl + \".acl\";\r\n        let appdataName = groupUrl + GROUP_DATA_FILE;\r\n\r\n        //maak folder aan\r\n        //iedereen die is toegevoegd kan lezen\r\n        //heeft eigen ttl file\r\n        await fileClient.createFolder(groupUrl);\r\n\r\n        //maak checkins folder aan\r\n        //iedereen die is toegevoegd kan posten\r\n        //heeft eigen ttl file.\r\n        let body = SolidTemplates.getGroupAppDataTTL(appdataName, friends, groupName);\r\n        await postSolidFile(groupUrl, GROUP_DATA_FILENAME, body);\r\n\r\n        //maak appdata file aan\r\n        //iedereen die is toegevoegd kan posten.\r\n        //hier zit de groep in voor de ttl files\r\n        let checkins = groupUrl + CHECKIN_FOLDER;\r\n        let checkInsAcl = checkins + \".acl\";\r\n\r\n        await fileClient.createFolder(checkins);\r\n        let groupAclTtl = SolidTemplates.getGroupCheckInsAclTTL(checkins, appdataName, checkInsAcl, this._user.getUri());\r\n        await putSolidFile(checkInsAcl, groupAclTtl);\r\n\r\n        groupAclTtl = SolidTemplates.getGroupAclTTL(groupUrl, appdataName, groupUrlAcl, this._user.getUri());\r\n        await putSolidFile(groupUrlAcl, groupAclTtl);\r\n    }\r\n}\r\n\r\nexport default SolidCommunicator;","import React from 'react';\r\nimport '../css/NavBar.scss'\r\n\r\nclass NavBar extends React.Component{\r\n    onInput = (e) => {\r\n        this.props.onBeerSearch(e.target.value);\r\n    }\r\n\r\n    render(){\r\n        let cldn =React.Children.toArray( this.props.children);\r\n        let input;\r\n\r\n        cldn = cldn.map((child, index) => {            \r\n            if(index !== cldn.length - 1){\r\n                return (\r\n                    <li key = {child.props.to} className = \"navBarOptionContainer\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }else{\r\n                return(\r\n                    <li key = {child.props.to} className = \"navBarOptionContainerLast\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }            \r\n        });\r\n\r\n        if(this.props.loggedIn){\r\n            input = (<li className = \"navBarSearch\">\r\n                <input  placeholder = \"search for beers\" value = {this.props.searchQuery} onChange = {this.onInput} />\r\n                <input type = \"button\" value = \"x\" onClick = {this.props.onSearchBarButtonClick}/>\r\n            </li>)\r\n        }\r\n\r\n        return(\r\n            <nav>\r\n                <ul id = \"navBar\">\r\n                    {cldn}\r\n                    {input}\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport Knipsel from '../../assets/Knipsel.png'\r\nimport '../css/Home.scss'\r\n\r\nclass Home extends React.Component{\r\n    render(){\r\n        return(\r\n            <section className = \"home\">\r\n                <h3>\r\n                    This is an application that is powered by Solid.<br/> \r\n                    Log in with your pod to use the application\r\n                </h3>\r\n                <br/>\r\n                <img src= {Knipsel} alt = \"Inrupt logo\"/>\r\n                <br/>\r\n                <h3 style = {{color : \"red\"}}>\r\n                    Carefull, This application is still in development and might mess up your pod.\r\n                    if you want to test it out, I recommend you make a new pod that you can delete\r\n                </h3>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport '../css/LogIn.scss'\r\n\r\nimport solidAuth from 'solid-auth-client'\r\n\r\nclass LogIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loginAsBrewer: false\r\n        }\r\n    }\r\n\r\n    onChangeCheckBox = () => {\r\n        this.setState({\r\n            loginAsBrewer: !this.state.loginAsBrewer\r\n        })\r\n    }\r\n\r\n    onButtonClick = () => {\r\n        let popupUri = './popup.html';\r\n        solidAuth.popupLogin({ popupUri }).then(() => {\r\n            solidAuth.currentSession().then(session => {\r\n                this.props.onLoggedIn();\r\n                this.props.history.push(`/profile`)\r\n            })\r\n        })\r\n    }\r\n\r\n    onRegisterClick = () => {\r\n        window.location.assign('https://inrupt.net/');\r\n    }\r\n\r\n    render() {\r\n        let typeLogIn;\r\n\r\n        if (this.state.loginAsBrewer) {\r\n            typeLogIn = <h1>Brewer</h1>\r\n        } else {\r\n            typeLogIn = <h1>Beer Drinker</h1>\r\n        }\r\n\r\n        let activeClass = this.state.loginAsBrewer ? \"logInBrewer\" : \"logInBeerDrinker\";\r\n\r\n        return (\r\n            <section className={[\"logInScreen \", activeClass].join(' ')}>\r\n                <div className=\"loginField\">\r\n                    {typeLogIn}\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" onChange={this.onChangeCheckBox} />\r\n                        <span className=\"slider\"></span>\r\n                    </label>\r\n\r\n                    <br />\r\n                    <div>\r\n                        <button onClick = {this.onRegisterClick}>Register</button>\r\n                        <button onClick = {this.onButtonClick}>Log in</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LogIn;\r\n","import React from 'react';\r\nimport Select from \"react-select\";\r\nimport \"../css/GroupMakerOverlay.scss\"\r\n\r\nclass GroupMakerOverlay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    onDivClick = (e) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.props.onOverLayCancelClick} id=\"overlayGroup\" style={this.props.overlay ? { display: \"block\" } : { display: \"none\" }}>\r\n                <div id=\"textGroup\" onClick={this.onDivClick}>\r\n                    <h5>\r\n                        makeGroup\r\n                    </h5>\r\n                    <span>group name</span> : <input value={this.props.groupName} onChange={this.props.onChange}/>\r\n                    <button onClick={this.props.makeGroup}>make new group</button>\r\n                    <Select\r\n                        isMulti = {true}\r\n                        options={this.props.valuesSelector}\r\n                        value = {this.props.selectedFriends}\r\n                        onChange = {this.props.onSelect}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GroupMakerOverlay;","import React from 'react';\r\nimport \"../css/Groups.scss\";\r\nimport GroupMakerOverlay from \"../../component/GroupMakerOverlay\";\r\n\r\nclass Groups extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            overlay : false,\r\n            groupName : \"b\",\r\n            selectedFriends : []\r\n        }\r\n    }\r\n\r\n    onMakeGroupClick= () => {\r\n        this.setState({\r\n            overlay : true\r\n        });\r\n    }\r\n\r\n    onOverLayCancelClick= () => {\r\n        this.setState({\r\n            overlay : false\r\n        });\r\n    }\r\n\r\n    makeGroup = () => {\r\n        if(this.state.groupName !== \"\"){\r\n            let beerDrinkerFolder = this.props.modelHolder.getUser().getBeerDrinkerFolder();\r\n            let friends = this.state.selectedFriends.map(res => {\r\n                return res.value;\r\n            })\r\n\r\n            this.props.solidCommunicator.makeNewGroup(beerDrinkerFolder, this.state.groupName, friends).then(res => {\r\n                this.setState({\r\n                    overlay : false,\r\n                    selectedFriends : [],\r\n                    groupName : \"\"\r\n                });\r\n            });\r\n            console.log(\"make group\");\r\n        }\r\n    }\r\n\r\n    onSelectFriend = (e) => {\r\n        this.setState({\r\n            selectedFriends : e\r\n        })\r\n    }\r\n\r\n    onGroupNameChange = (e) => {\r\n        let text  = e.target.value;\r\n        this.setState({\r\n            groupName : text\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let friendsComs = this.props.modelHolder.getFriends().map(res => {\r\n            return {value: res.getUri(), label : res.getName()}\r\n        })\r\n\r\n        let groups = this.props.modelHolder.getGroups().map(res => {\r\n            return (<li>\r\n                    <a href= \"https://google.com\">{res.getName()}</a>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return(\r\n            <section id = \"groupsPage\">\r\n                <h1>\r\n                    Groups\r\n                </h1>\r\n                <button className= \"makeNewGroup\" onClick={this.onMakeGroupClick}>makeNewGroup</button>\r\n                <GroupMakerOverlay\r\n                    overlay = {this.state.overlay}\r\n                    onOverLayCancelClick = {this.onOverLayCancelClick}\r\n                    onAddReviewClick = {this.onAddReviewClick}\r\n                    addReview = {this.state.addReview}\r\n                    checkInBeer = {this.onPostBeerReview}\r\n                    onChange = {this.onGroupNameChange}\r\n                    groupName = {this.state.groupName}\r\n                    valuesSelector = {friendsComs}\r\n                    selectedFriends = {this.state.selectedFriends}\r\n                    onSelect = {this.onSelectFriend}\r\n                    makeGroup = {this.makeGroup}\r\n                />\r\n\r\n                <ul>\r\n                    {groups}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Groups;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport '../css/Friends.scss'\r\n\r\nclass Friends extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputText : \"https://\",\r\n            error : undefined\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            inputText: e.target.value\r\n        })        \r\n    }\r\n\r\n    onButtonClick = async () => {\r\n        let friends = this.props.modelHolder.getFriends();\r\n\r\n        friends = friends.filter(friend => {\r\n            let text = this.state.inputText.toUpperCase();\r\n            let friendUri = friend.getUri().toUpperCase();\r\n            let friendUri2 = friend.getUri().toUpperCase().replace(\"#ME\", \"\").replace(\"#I\", \"\");\r\n            let friendUri3 = friendUri.replace(\"HTTPS://\", \"\");\r\n            let friendUri4 = friendUri2.replace(\"HTTPS://\", \"\");\r\n            \r\n            return  friendUri === text || friendUri2 === text || friendUri3 === text || friendUri4 === text;\r\n        });\r\n\r\n        if (friends.length !== 0){\r\n            //this is a mess and lazy programming but keep it in because i do not have time to change it.\r\n            let index = this.props.user.getFriends().map((profile, index) => {\r\n                if(friends[0].getUri() === profile.getUri()){\r\n                    return index;\r\n                }\r\n            }).filter(index => {return index})\r\n\r\n            this.props.history.push(`/friend/${index[0]}`);\r\n        } else if(this.props.modelHolder.getUser().getUri() === this.state.inputText){\r\n            this.props.history.push(\"/profile\");\r\n        }else{\r\n            try{\r\n                let result = await this.props.solidCommunicator.getUserFile(this.state.inputText);\r\n                \r\n                    this.props.history.push({\r\n                        pathname:\"/user\",\r\n                        state:{\r\n                            result: result\r\n                        }\r\n                    });\r\n            }catch(e){\r\n                this.setState({error : e.message})\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let friends = this.props.modelHolder.getFriends();\r\n        friends = friends.filter(friend => {\r\n            let text = this.state.inputText.toUpperCase();\r\n            if(friend.getName()){\r\n                return friend.getName().toUpperCase().includes(text) || friend.getUri().toUpperCase().includes(text);\r\n            }\r\n\r\n            return friend.getUri().toUpperCase().includes(text);\r\n        });\r\n        \r\n        let friendsElements = friends.map((friend, index) => {\r\n            return <li key = {friend.getUri()}>\r\n                <Link  to= {`/friend/${index}`}>\r\n                    <p>\r\n                        {friend.getName() ? friend.getName() : friend.getUri()}\r\n                    </p>\r\n                </Link>\r\n            </li> \r\n        });\r\n\r\n        return(\r\n            <section className = \"friends\">\r\n                <div className = \"searchFriends\">\r\n                    <h3>\r\n                        Make new friends\r\n                    </h3>\r\n                    <br/>\r\n                    <input type = \"text\" placeholder =\"profilecard link\" value = {this.state.inputText} onChange = {this.onChange}/>\r\n                    <button onClick = {this.onButtonClick}>Search on the web</button>\r\n                    <p style = {{color: \"red\"}}>{this.state.error}</p>\r\n                </div>\r\n\r\n                <div className = \"friendSection\">\r\n                    <h3>\r\n                        Friends\r\n                    </h3>\r\n                    <ul >\r\n                        {friendsElements}\r\n                    </ul>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from \"react\";\r\nimport \"../css/BeerCheckInComponent.scss\"\r\n\r\nclass BeerCheckInComponent extends React.Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n    }\r\n\r\n    render() {\r\n        let checkIn = this.props.checkin;\r\n        let rating;\r\n        let review;\r\n\r\n        if(checkIn._rating){\r\n            rating = <p>rating: {checkIn._rating}</p>\r\n        }\r\n\r\n        if(checkIn._review){\r\n            review = <p>review: {checkIn._review}</p>\r\n        }\r\n\r\n        return (\r\n            <li className= \"BeerCheckInComponent\">\r\n                <h5>\r\n                    {checkIn._userName ? checkIn._userName : checkIn._userWebId} is drinking a {checkIn._beerName}\r\n                </h5>\r\n                {rating}\r\n                {review}\r\n            </li>)\r\n    }\r\n}\r\n\r\nexport default BeerCheckInComponent;","import React from 'react';\r\nimport '../css/Profile.scss'\r\nimport profilePic from '../../assets/profilePic.png'\r\nimport {Link} from \"react-router-dom\";\r\nimport BeerCheckInComponent from \"../../component/BeerCheckInComponent\";\r\n\r\nclass FriendPage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            user : this.props.modelHolder.getFriendFromIndex(this.props.match.params.id)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let user = this.state.user;\r\n        let imgUrl = user.getImageUrl();\r\n        let userCheckIns = user.getCheckInHandler().getUserCheckIns()\r\n        let content;\r\n\r\n        userCheckIns = userCheckIns.map(checkIn => {\r\n            return (\r\n                <BeerCheckInComponent key = {checkIn._fileLocation} checkin = {checkIn}/>\r\n            )\r\n        })\r\n\r\n        if(user.getStartDate()){\r\n            content = (<div className=\"leftColum\">\r\n                <h1>\r\n                    {user.getName()}\r\n                </h1>\r\n                {/*TODO make image load faster*/}\r\n                <img src = {imgUrl ? imgUrl : profilePic} alt = \"\"/>\r\n                <p>\r\n                    check-ins : {user.getCheckInHandler().getCheckInsAmount()}\r\n                </p>\r\n                <p>\r\n                    reviews : {user.getCheckInHandler().getBeerReviewsAmount()}\r\n                </p>\r\n                <p>\r\n                    Begin date : {dateToString(user.getStartDate())}\r\n                </p>\r\n                <p>\r\n                    beerbonus points : {user.getCheckInHandler().getBeerPoints()}\r\n                </p>\r\n            </div>);\r\n        }\r\n\r\n        return(\r\n            <section className = \"profileScreen\">\r\n                \r\n                <div className=\"row\">\r\n                    {content}\r\n                    <div className=\"column\">\r\n\r\n                        <h1>\r\n                            Recent activities\r\n                        </h1>\r\n                        <ul>\r\n                            {userCheckIns}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n} \r\n\r\nfunction dateToString(date){\r\n    var dd = String(date.getDate()).padStart(2, '0');\r\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n    var yyyy = date.getFullYear();\r\n\r\n    return dd + '/' + mm + '/' + yyyy; \r\n}\r\n\r\nexport default FriendPage;","import React from 'react';\r\nimport '../css/CheckIns.scss'\r\nimport BeerCheckInComponent from \"../../component/BeerCheckInComponent\";\r\n\r\nclass Friends extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            res : []\r\n        }\r\n\r\n        this.getAllCheckIns();\r\n    }\r\n\r\n    getAllCheckIns = () => {\r\n        this.props.solidCommunicator.getAllCheckInsLoggedInUser();\r\n    }\r\n\r\n\r\n    render(){\r\n        let userCheckIns = this.props.modelHolder.getCheckInHandler().getUserCheckIns();\r\n\r\n        userCheckIns = userCheckIns.map(checkIn => {\r\n            return (\r\n                <BeerCheckInComponent key = {checkIn._fileLocation} checkin = {checkIn}/>\r\n            )\r\n        })\r\n\r\n        return(\r\n            <section id = \"beerCheckIns\">\r\n                <h1>\r\n                    Check-Ins\r\n                </h1>\r\n                <ul>\r\n                    {userCheckIns}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport '../css/BeerResults.scss';\r\nimport {Link, Redirect} from \"react-router-dom\";\r\n\r\nclass BeerResults extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.solidCommunicator.fetchBeerData().then(res => {\r\n            if (res) {\r\n                this.props.modelHolder.setBeers(res);\r\n            }\r\n        });\r\n    }\r\n\r\n    onLinkClick = (e) => {\r\n        this.props.modelHolder.setBeer(e);\r\n\r\n        this.props.onLinkClick();\r\n    }\r\n\r\n    render() {\r\n\r\n        let elements = this.props.modelHolder.getBeers().map(listItem => {\r\n            return (\r\n                <li key={listItem._location}>\r\n                    <Link to={`/beer/${listItem._name}`}\r\n                          onClick={() => {\r\n                              this.onLinkClick(listItem)\r\n                          }}>\r\n                        {listItem._name}\r\n                    </Link>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <section className=\"beerResults\">\r\n                <h1>Beer Results</h1>\r\n                <ul>\r\n                    {elements}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerResults;\r\n\r\n","import React from 'react';\r\nimport '../css/Profile.scss'\r\nimport profilePic from '../../assets/profilePic.png'\r\nimport BeerCheckInComponent from \"../../component/BeerCheckInComponent\";\r\nimport {Link, Redirect, withRouter} from \"react-router-dom\";\r\n\r\nclass Profile extends React.Component{\r\n    render(){\r\n        let user = this.props.modelHolder.getUser();\r\n        let imgUrl = user.getImageUrl();\r\n        let checkInHandler = this.props.modelHolder.getCheckInHandler();\r\n        let userCheckIns = checkInHandler.getUserCheckIns();\r\n        let content;\r\n\r\n\r\n        userCheckIns = userCheckIns.map(checkIn => {\r\n            return (\r\n                <BeerCheckInComponent key = {checkIn._fileLocation} checkin = {checkIn}/>\r\n            )\r\n        })\r\n\r\n        if(user.getBeginDate()){\r\n            content = (<div className=\"leftColum\">\r\n                    <h1>\r\n                        {user.getName()}\r\n                    </h1>\r\n                    {/*TODO make image load faster*/}\r\n                    <img src = {imgUrl ? imgUrl : profilePic} alt = \"\"/>\r\n                    <p>\r\n                        check-ins : {checkInHandler.getCheckInsAmount()}\r\n                    </p>\r\n                    <p>\r\n                        reviews : {checkInHandler.getBeerReviewsAmount()}\r\n                    </p>\r\n                    <p>\r\n                        Begin date : {dateToString(user.getBeginDate())}\r\n                    </p>\r\n                    <p>\r\n                        beerbonus points : {checkInHandler.getBeerPoints()}\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return(\r\n            <section className = \"profileScreen\">\r\n                <div className=\"row\">\r\n                    {content}\r\n                    <div className=\"column\">\r\n                        <div className = \"checkinDiv\">\r\n                            <Link to=\"/checkIns\">All check ins &rarr;</Link>\r\n                        </div>\r\n                        <h1>\r\n                            Recent activities\r\n                        </h1>\r\n                            <ul>\r\n                                {userCheckIns}\r\n                            </ul>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nfunction dateToString(date){\r\n    var dd = String(date.getDate()).padStart(2, '0');\r\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n    var yyyy = date.getFullYear();\r\n\r\n    return dd + '/' + mm + '/' + yyyy;\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport '../css/User.scss'\r\nimport profilePic from '../../assets/profilePic.png';\r\n\r\nclass User extends React.Component{ \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            clicked: false,\r\n            result : this.props.location.state.result\r\n        }\r\n\r\n        console.log(this.state.result.appLocation);\r\n        console.log(this.state.result.url);\r\n    }\r\n\r\n    onNotJoinedButtonClick = async () => {\r\n        let result = this.state.result;\r\n        await this.props.solidCommunicator.inviteUserToSolib(result.url, result.inbox);\r\n\r\n        this.setState(\r\n            {\r\n                clicked : true\r\n            });\r\n    }\r\n\r\n    sendFriendShipRequest = async () => {\r\n        //TODO check if friendship request is already set\r\n        let result = this.state.result;\r\n        await this.props.solidCommunicator.sendFriendshipRequest(result.url, result.appLocation);\r\n\r\n        this.setState(\r\n            {\r\n                clicked : true}\r\n            );  \r\n    }\r\n\r\n    render(){\r\n        let result = this.props.location.state.result;\r\n        let button;\r\n\r\n        if(!this.state.clicked){\r\n            if(result.appLocation){\r\n                button = (<button onClick = {this.sendFriendShipRequest}>Send friendship request</button>);\r\n            }else{\r\n                button = (<button onClick = {this.onNotJoinedButtonClick}>Invite to Social linked beer</button>);\r\n            }\r\n        }else{\r\n            button = (<button disabled= {true}>Request send</button>)\r\n        }\r\n\r\n        return(\r\n            <section className = \"userPageNew\">\r\n                <div className = \"userPageHead\">              \r\n                    <h1>\r\n                        {result.name}\r\n                    </h1>\r\n                    <img src = {result.imageUrl ? result.imageUrl : profilePic} alt = \"\"/>\r\n                </div>\r\n                <div className = \"userButtonDiv\">\r\n                    {button}\r\n                </div>\r\n                <div className = \"userInfo\">\r\n                    <p>Uri : {result.url}</p>\r\n                    <p>Has social linked beer account?: {result.appLocation ? \"Yes\" : \"No\"}</p>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport \"../css/Inbox.scss\";\r\n\r\nclass Inbox extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            messages : []\r\n        }\r\n    }\r\n\r\n    declineFriendShipRequest = (index, message) => {\r\n        let array = this.state.messages;\r\n        array.splice(index, 1);\r\n        this.setState({messages: array})\r\n\r\n        this.props.solidCommunicator.declineFriendSchipRequest(message);\r\n    }\r\n\r\n    acceptFriendShipRequest = (index, message) => {\r\n        let array = this.state.messages;\r\n        array.splice(index, 1);\r\n        this.setState({messages: array})\r\n\r\n        this.props.solidCommunicator.acceptFriendSchipRequest(message);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.solidCommunicator.getInboxContents().then(res => {\r\n            this.setState({messages : res})\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let items = this.state.messages.map((message, index)=> {\r\n            let buttonDiv;\r\n            \r\n            if(message.type === \"FriendshipRequest\"){\r\n                buttonDiv = (<div className = \"buttonDiv\">\r\n                    <button onClick = {() => this.declineFriendShipRequest(index,message)}>Decline</button>\r\n                    <button onClick = {() => this.acceptFriendShipRequest(index, message)}>Accept</button>\r\n                </div>)\r\n            }\r\n\r\n            return (<li key = {message.url}>\r\n                <h4>{message.type}</h4>\r\n                <p>from : {message.from}</p>\r\n                <p>{message.description}</p>\r\n                {buttonDiv}\r\n            </li>)\r\n        })\r\n\r\n        return(\r\n            <section className = \"inbox\">\r\n                <h1>\r\n                    Inbox\r\n                </h1>\r\n\r\n                <ul>\r\n                    {items}\r\n                </ul>\r\n                \r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inbox;\r\n","import React from 'react';\r\nimport '../css/BeerCheckInScreen.scss';\r\n\r\nimport Rating from '@material-ui/lab/Rating';\r\n\r\nclass BeerCheckInOverlay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    onDivClick = (e) => {\r\n        e.stopPropagation();\r\n    }\r\n    \r\n    render() {\r\n        let rating;\r\n        let text;\r\n\r\n        if (this.props.addReview) {\r\n            rating = (<Rating\r\n                name=\"beerRating\"\r\n                value={this.props.beerRating}\r\n                precision={0.5}\r\n                onChange={(event, newValue) => {\r\n                    this.props.setBeerRating(newValue);\r\n                }}\r\n                />\r\n            )\r\n\r\n            text = (\r\n                <textarea\r\n                    value={this.props.beerReview}\r\n                    onChange={event => {\r\n                        this.props.onBeerReviewChange(event.target.value)\r\n                    }\r\n                    }/>\r\n\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div onClick={this.props.onOverLayCancelClick} id=\"overlay\" style={this.props.overlay ? { display: \"block\" } : { display: \"none\" }}>\r\n                <div id=\"text\" onClick={this.onDivClick}>\r\n                    <h5>\r\n                        check in beer\r\n                    </h5>\r\n                    <button onClick = {this.props.onAddReviewClick}>{this.props.addReview ? \"dont add review\": \"Add review\"}</button>\r\n                    {rating}\r\n                    {text}\r\n                    <br />\r\n                    <button onClick = {this.props.checkInBeer}>check in beer</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerCheckInOverlay;","import React from 'react';\r\nimport '../css/BeerDetailScreen.scss';\r\nimport BeerCheckInOverlay from '../../component/BeerCheckInOverlay';\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport Brewer from \"../../model/HolderComponents/Brewer\";\r\n\r\nclass BeerDetailScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            beer: this.props.modelHolder.getBeer(),\r\n            overlay : false,\r\n            beerReview : \"\",\r\n            beerRating : 2.5,\r\n            addReview: false\r\n        }\r\n\r\n        console.log(this.state.beer);\r\n        this.props.modelHolder.setBrewer(new Brewer(this.state.beer.getBrewer()));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.solidCommunicator.fetchBeer(this.props.modelHolder.getBeer()).then(res => {});\r\n    }\r\n\r\n    onPostBeerReview = async () => {\r\n        await this.props.solidCommunicator.postBeerReview(this.state.addReview, this.state.beer, this.state.beerRating, this.state.beerReview);\r\n\r\n        this.setState({\r\n            overlay: false,\r\n            beerReview : \"\",\r\n            beerRating : 2.5,\r\n            addReview: false\r\n        })\r\n    }\r\n\r\n    onCheckInClick= () => {\r\n        this.setState({\r\n            overlay : true\r\n        });\r\n    }\r\n\r\n    onOverLayCancelClick= () => {\r\n        this.setState({\r\n            overlay : false\r\n        });\r\n    }\r\n\r\n    setBeerRating = (rating) => {\r\n        this.setState({\r\n            beerRating : rating\r\n        });\r\n    }\r\n\r\n    onBeerReviewChange = (text) => {\r\n        this.setState({\r\n            beerReview : text\r\n        });\r\n    }\r\n    \r\n    onAddReviewClick = () => {\r\n        this.setState({\r\n            addReview: !this.state.addReview,\r\n            beerRating: 2.5,\r\n            beerReview: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let beer = this.state.beer;\r\n        let brewerName = beer._brewer.replace(\"https://\", \"\").replace(/\\..*/, \"\");\r\n\r\n        return (\r\n            <section className=\"beerDetailScreen\">\r\n                <h1>\r\n                    {beer._name}\r\n                </h1>\r\n                <p>\r\n                    {beer._description}\r\n                </p>\r\n                <div>\r\n                    <button onClick= {this.onCheckInClick}>Check in beer</button>\r\n                </div>\r\n                <p>\r\n                    <Link to={`/brewer/${brewerName}`}>\r\n                        brewer\r\n                    </Link>\r\n                </p>\r\n                <p>\r\n                    containers: {beer._containers}\r\n                </p>\r\n\r\n                <BeerCheckInOverlay\r\n                 overlay = {this.state.overlay}\r\n                 beerReview = {this.state.beerReview}\r\n                 beerRating = {this.state.beerRating}\r\n                 onOverLayCancelClick = {this.onOverLayCancelClick}\r\n                 setBeerRating = {this.setBeerRating}\r\n                 onBeerReviewChange = {this.onBeerReviewChange}\r\n                 onAddReviewClick = {this.onAddReviewClick}\r\n                 addReview = {this.state.addReview}\r\n                 checkInBeer = {this.onPostBeerReview}\r\n                />\r\n                \r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerDetailScreen;\r\n","import React from \"react\";\r\nimport \"../css/BrewerPage.scss\"\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass BrewerPage extends React.Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            brewer: this.props.modelHolder.getBrewer()\r\n        }\r\n\r\n        this.getBrewer();\r\n    }\r\n\r\n    getBrewer = () => {\r\n        this.props.solidCommunicator.getBrewerInformation(this.state.brewer).then(res => {\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let section;\r\n        let brewer = this.state.brewer;\r\n        let beers;\r\n\r\n        if (brewer.getGroep()) {\r\n            section = (\r\n                <div>\r\n                    <h1>\r\n                        {this.state.brewer._name}\r\n                    </h1>\r\n                    <p>{brewer._groep}</p>\r\n                    <p>{brewer._opgericht}</p>\r\n                    <p>{brewer._owners.join(\", \")}</p>\r\n                    <p>{brewer._provincie}</p>\r\n                    <p>{brewer._email}</p>\r\n                    <p>{brewer._taxid}</p>\r\n                    <p>{brewer._telephone}</p>\r\n                    <p>{brewer._url}</p>\r\n                    <p>{brewer._postalcode}</p>\r\n                    <p>{brewer._streetAdress}</p>\r\n                    <p>{brewer._addressRegion}</p>\r\n                    <p>{brewer._addressLocality}</p>\r\n                </div>\r\n            )\r\n\r\n            if (brewer._beers) {\r\n                beers = brewer._beers.map(listItem => {\r\n                    return ( <li key = {listItem._location}>\r\n                            <Link to={{\r\n                                pathname: `/beer/${listItem._name}`,\r\n                                state: {\r\n                                    beer : listItem\r\n                                }\r\n                            }} onClick={this.props.onLinkClick}>\r\n                                {listItem._name}\r\n                            </Link>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        }\r\n\r\n        return (\r\n            <section className=\"brewerPage\">\r\n                {section}\r\n\r\n                <br/>\r\n                <br/>\r\n\r\n                <h3>Beers</h3>\r\n                <ul>\r\n                    {beers}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BrewerPage;","import React from 'react';\r\n\r\nimport {Switch, Route, withRouter, Redirect} from \"react-router-dom\";\r\n\r\n/**\r\n * Imported Pages\r\n */\r\nimport Home from './page/Home'\r\nimport LogIn from './page/LogIn'\r\nimport Groups from './page/Groups';\r\nimport Friends from './page/Friends';\r\nimport FriendsPage from './page/FriendPage';\r\nimport CheckIns from './page/CheckIns';\r\nimport BeerResults from './page/BeerResults';\r\nimport Profile from './page/Profile';\r\nimport UserPage from './page/User';\r\nimport Inbox from './page/Inbox';\r\nimport BeerDetailScreen from './page/BeerDetailScreen';\r\nimport BrewerPage from './page/BrewerPage';\r\n\r\nclass AppRoutes extends React.Component {\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route exact path=\"/\"\r\n                       component={Home}\r\n                       isLoggedIn={this.props.loggedIn}\r\n                       solidCommunicator={this.props.solidCommunicator}/>\r\n                <PrivateRoute path=\"/user\"\r\n                              component={UserPage}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}/>\r\n                <PrivateRoute path=\"/beer/:id\"\r\n                              component={BeerDetailScreen}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path=\"/brewer/:id\"\r\n                              component={BrewerPage}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute exact path=\"/friend\"\r\n                              component={Friends}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              modelHolder={this.props.modelHolder}\r\n                              solidCommunicator={this.props.solidCommunicator}/>\r\n                <PrivateRoute path=\"/friend/:id\"\r\n                              component={FriendsPage}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path=\"/beerresults\"\r\n                              component={BeerResults}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              onLinkClick={this.props.clearSearchQuery}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path=\"/groups\"\r\n                              component={Groups}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              modelHolder={this.props.modelHolder}\r\n                              solidCommunicator={this.props.solidCommunicator}/>\r\n                <PrivateRoute path='/profile'\r\n                              component={Profile}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path='/checkIns'\r\n                              component={CheckIns}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}\r\n                              modelHolder={this.props.modelHolder}/>\r\n                <PrivateRoute path='/inbox'\r\n                              component={Inbox}\r\n                              isLoggedIn={this.props.loggedIn}\r\n                              solidCommunicator={this.props.solidCommunicator}/>\r\n                <PrivateRouteLogIn path=\"/login\"\r\n                                   component={LogIn}\r\n                                   isLoggedIn={this.props.loggedIn}\r\n                                   onLoggedIn={this.props.onLoggedIn}/>\r\n            </Switch>)\r\n    }\r\n}\r\n\r\nconst PrivateRoute = ({component: Component, isLoggedIn, ...rest}) => (\r\n    <Route {...rest} render={(props) => (\r\n        isLoggedIn\r\n            ? <Component {...props} {...rest}/>\r\n            : <Redirect to='/'/>\r\n    )}/>\r\n)\r\n\r\nconst PrivateRouteLogIn = ({component: Component, isLoggedIn, onLoggedIn, ...rest}) => (\r\n    <Route {...rest} render={(props) => (\r\n        !isLoggedIn\r\n            ? <Component onLoggedIn={onLoggedIn} {...props} />\r\n            : <Redirect to='/profile'/>\r\n    )}/>\r\n)\r\n\r\nexport default withRouter(AppRoutes);","import React from 'react';\r\nimport '../css/AclErrorPage.scss';\r\n\r\nclass AclErrorPage extends React.Component{\r\n    render(){\r\n        //TODO geef detailed instuctie om het op te lossen.\r\n\r\n        return (<section className = \"aclErrorPage\">\r\n            <h1>\r\n             The application does not have correct access. please give the application read, write, append and control access. \r\n            </h1>\r\n        </section>)\r\n    }\r\n}\r\n\r\nexport default AclErrorPage;","import React from 'react';\r\nimport '../css/FetchingPage.scss';\r\n\r\nclass FetchingPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className= \"rendering\">\r\n                <h1>Fetching data</h1>\r\n                <div id=\"fetchinAnimation\"></div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FetchingPage;","import Observable from \"./Observable\";\r\n\r\nclass User extends Observable{\r\n    constructor(uri){\r\n        super();\r\n        this._uri = uri\r\n        this._name =  this.getUserName(uri);\r\n        this._imageUrl = undefined;\r\n        this._startDate = undefined;\r\n        this._appFolder = undefined;\r\n        this._beerDrinkerFoler = undefined;\r\n    }\r\n\r\n    setUri(uri){\r\n        this._uri = uri;\r\n\r\n        if(!this._name){\r\n            this._name = this.getUserName(uri);\r\n        }\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    loadInUserValues(name, imageURL, appFolder,beerDrinkerFolder){\r\n        if(name){\r\n            this._name = name;\r\n        }\r\n\r\n        this._imageUrl = imageURL;\r\n        this._appFolder = appFolder;\r\n        this._beerDrinkerFoler = beerDrinkerFolder;\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    loadInAppData(startDate){\r\n        this._startDate = startDate;\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getUri(){\r\n        return this._uri;\r\n    }\r\n\r\n    getUserName(uri){\r\n        return  uri.replace(\"https://\", \"\").replace(/\\..*/, \"\");\r\n    }\r\n\r\n    getAppFolder(){\r\n        return this._appFolder;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n\r\n    getBeginDate(){\r\n        if(this._startDate){\r\n            return new Date(this._startDate.getTime());\r\n        }else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getImageUrl(){\r\n        return this._imageUrl;\r\n    }\r\n\r\n    getBeerDrinkerFolder(){\r\n        return this._beerDrinkerFoler;\r\n    }\r\n}\r\n\r\nexport default User;","import CheckInHandler from \"./HolderComponents/CheckInHandler\";\r\nimport User from \"./HolderComponents/User\";\r\nimport Observable from \"./HolderComponents/Observable\";\r\n\r\nclass ModelHolder extends Observable{\r\n    constructor(){\r\n        super();\r\n        this._user = new User(\"\");\r\n        this._checkInHandler = new CheckInHandler();\r\n        this._friends = [];\r\n\r\n        this._brewer = undefined;\r\n        this._slectedBeer = undefined;\r\n\r\n        this._beers = [];\r\n        this._groups = [];\r\n\r\n        this._checkInHandler.subscribe(this);\r\n        this._user.subscribe(this);\r\n    }\r\n\r\n    addFriends(newFriends){\r\n        newFriends.forEach(res => {\r\n            res.subscribe(this);\r\n        })\r\n\r\n        this._friends = this._friends.concat(newFriends)\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    addFriend(newFriend){\r\n        newFriend.subscribe(this);\r\n        this._friends.push(newFriend);\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getFriendFromIndex(index){\r\n        return this._friends[index];\r\n    }\r\n\r\n    getFriends(){\r\n        return this._friends;\r\n    }\r\n\r\n    clearAll(){\r\n        this._user.unsubscribe(this);\r\n        this._checkInHandler.unsubscribe(this);\r\n        this._checkInHandler.clearAll();\r\n\r\n        if(this._slectedBeer){\r\n            this._slectedBeer.unsubscribe(this);\r\n        }\r\n\r\n        if(this._brewer){\r\n            this._brewer.unsubscribe(this);\r\n        }\r\n\r\n        this._friends.forEach(res => {\r\n            res.unsubscribe(this);\r\n            res.clearAll();\r\n        });\r\n\r\n        this._groups.forEach(res => {\r\n            res.unsubscribe(this);\r\n        });\r\n\r\n        this._beers.forEach(res => {\r\n            res.unsubscribe(this);\r\n        });\r\n\r\n        this._user = new User(\"\");\r\n        this._checkInHandler = new CheckInHandler();\r\n        this._friends = [];\r\n        this._groups = [];\r\n        this._beers = [];\r\n        this._brewer = undefined;\r\n        this._slectedBeer = undefined;\r\n    }\r\n\r\n    getUser(){\r\n        return this._user;\r\n    }\r\n\r\n    getCheckInHandler(){\r\n        return this._checkInHandler;\r\n    }\r\n\r\n    setGroups(groups){\r\n        this._groups.forEach(res => {\r\n            res.unsubscribe(this);\r\n        })\r\n\r\n        this._groups = groups;\r\n\r\n        this._groups.forEach(res => {\r\n            res.subscribe(this);\r\n        })\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getGroups(){\r\n        return this._groups;\r\n    }\r\n\r\n    getBrewer(){\r\n        return this._brewer;\r\n    }\r\n\r\n    setBrewer(brewer){\r\n        if(this._brewer){\r\n            this._brewer.unsubscribe();\r\n        }\r\n\r\n        this._brewer = brewer;\r\n        this._brewer.subscribe(this);\r\n    }\r\n\r\n    getBeers(){\r\n        return this._beers;\r\n    }\r\n\r\n    setBeers(beers){\r\n        this._beers = beers;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getBeer(){\r\n        return this._slectedBeer;\r\n    }\r\n\r\n    setBeer(beer){\r\n        if(this._slectedBeer){\r\n            this.unsubscribe(this)\r\n        }\r\n\r\n        this._slectedBeer = beer;\r\n        beer.subscribe(this);\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    update(){\r\n        this.upDateSubScribers();\r\n    }\r\n}\r\n\r\nexport default ModelHolder;","/**\n * Libs\n */\nimport React from 'react';\nimport solidAuth from 'solid-auth-client';\nimport { Link, withRouter } from \"react-router-dom\";\nimport SolidCommunicator from './solid/SolidCommunicator';\n\n/**\n * Components\n */\nimport NavBar from './component/NavBar';\nimport AppRoutes from './routes/AppRoutes';\nimport AclErrorPage from './routes/extrapage/AclErrorPage';\nimport FetchingPage from './routes/extrapage/FetchingPage';\n\n/**\n * Errors\n */\nimport AccessError from './error/AccessError';\n\n/**\n * Assests\n */\nimport './css/App.scss';\nimport Knipsel from './assets/Knipsel.png';\nimport Logo from './assets/logo.png';\nimport ModelHolder from \"./model/ModelHolder\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      searchQuery: '',\n      modelHolder: new ModelHolder(),\n      solidCommunicator: undefined,\n      accessError: false,\n      fetchingFiles: false\n    }\n\n    this.state.modelHolder.subscribe(this);\n  }\n\n  componentDidMount() {\n    this.checkLoggedIn();\n  }\n\n  update = () => {\n    this.setState({\n      modelHolder : this.state.modelHolder\n    })\n  }\n\n  clearSearchQuery = () => {\n    this.setState({\n      searchQuery: ''\n    })\n  }\n\n  checkLoggedIn = async () => {\n    let session = await solidAuth.currentSession();\n    //TODO error handling\n\n    if (session) {\n      this.setState({\n        fetchingFiles: true\n      });\n\n      //make new user\n      this.state.modelHolder.getUser().setUri(session.webId);\n\n      try {\n        let solidCommunicator = await SolidCommunicator.build(this.state.modelHolder);\n\n        this.setState({\n          solidCommunicator: solidCommunicator,\n          loggedIn: true,\n          fetchingFiles: false\n        })\n\n        this.props.history.push(`/beerresults`)\n      } catch (e) {\n        if (e instanceof AccessError) {\n          this.setState({\n            accessError: true,\n            fetchingFiles: false\n          })\n        } else {\n          throw e; // let others bubble up\n        }\n      }\n    }\n  }\n\n\n  onClickLogOut = () => {\n    solidAuth.logout().then(res => {\n      this.state.modelHolder.clearAll();\n\n      this.setState({\n        loggedIn: false,\n        userObject: undefined,\n        accessError : false\n      });\n    });\n  }\n\n  onLoggedIn = () => {\n    this.checkLoggedIn();\n  }\n\n  onBeerSearch = (text) => {\n    let location = this.props.location.pathname;\n\n    this.setState({\n      searchQuery: text\n    })\n\n    if (text) {\n      if (location !== \"/beerresults\") {\n        this.props.history.push(\"/beerresults\");\n      }\n\n      /**\n       * Vindt hier de bier\n       */\n    } else {\n      this.props.history.goBack();\n    }\n  }\n\n\n  render() {\n    let navBar;\n    let app;\n\n    if(this.state.fetchingFiles){\n      navBar = (\n        <NavBar onSearchBarButtonClick={this.onSearchBarButtonClick}>\n          <Link to=\"/\" onClick={this.onClickLogOut}></Link>\n        </NavBar>)\n    }else if(this.state.accessError){\n      navBar = (\n        <NavBar onSearchBarButtonClick={this.onSearchBarButtonClick}>\n          <Link to=\"/\" onClick={this.onClickLogOut}>Log out</Link>\n        </NavBar>)\n    } else if (this.state.loggedIn) {\n      navBar = (\n        <NavBar onSearchBarButtonClick={this.onSearchBarButtonClick}\n          onBeerSearch={this.onBeerSearch}\n          loggedIn={this.state.loggedIn}\n          searchQuery={this.state.searchQuery}>\n          <Link to=\"/profile\">Profile</Link>\n          <Link to=\"/friend\">Friends</Link>\n          <Link to=\"/groups\">Groups</Link>\n          <Link to=\"/inbox\">Inbox</Link>\n          <Link to=\"/\" onClick={this.onClickLogOut}>Log out</Link>\n        </NavBar>\n      )\n    } else {\n      navBar = (\n        <NavBar onBeerSearch={this.onBeerSearch} loggedIn={this.state.loggedIn}>\n          <Link to=\"/LogIn\">Log in</Link>\n        </NavBar>\n      )\n    }\n\n    if(this.state.fetchingFiles){\n      app = (<FetchingPage/>);\n    }else if (this.state.accessError) {\n      app = (<AclErrorPage/>);  \n    } else {\n      app = (<AppRoutes\n        loggedIn={this.state.loggedIn}\n        modelHolder={this.state.modelHolder}\n        solidCommunicator={this.state.solidCommunicator}\n        clearSearchQuery={this.clearSearchQuery}\n        onLoggedIn={this.onLoggedIn}\n      />)\n    }\n\n    return (\n      <div id=\"AppRoot\">\n        <header>\n          <Link to=\"/\">\n            <div>\n              <img src={Logo} alt=\"\" />\n              <h1>\n                Linked social beer\n              </h1>\n            </div>\n          </Link>\n        </header>\n\n        {navBar}\n        {app}\n        <footer>\n          <span>\n            This application is powered by\n            </span>\n          <a href=\"https://solid.inrupt.com\">\n            <img alt=\"Solid inrupt\" src={Knipsel} />\n          </a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n <HashRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profilePic.b6681619.png\";"],"sourceRoot":""}