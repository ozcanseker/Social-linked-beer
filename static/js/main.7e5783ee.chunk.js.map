{"version":3,"sources":["assets/Knipsel.png","assets/logo.png","../node_modules/@trust/webcrypto/src/algorithms sync","model/Friend.js","solid/SolidMethods.js","solid/solidCommunicatorInits/PodFolderBuilder.js","error/AccessError.js","solid/solidCommunicatorInits/AccessChecker.js","solid/solidCommunicatorInits/SolidCommunicatorBuilder.js","solid/solidCommunicatorInits/PreApplicationHandelings.js","solid/rdf/SolidTtlTemplates.js","solid/SolidCommunicator.js","component/NavBar.js","routes/page/Home.js","routes/page/LogIn.js","routes/page/Groups.js","routes/page/Friends.js","routes/page/FriendPage.js","routes/page/CheckIns.js","routes/page/BeerResults.js","routes/page/Profile.js","routes/page/User.js","routes/page/Inbox.js","routes/page/BeerDetailScreen.js","routes/AppRoutes.js","routes/extrapage/AclErrorPage.js","routes/extrapage/FetchingPage.js","model/User.js","App.js","serviceWorker.js","index.js","assets/profilePic.png"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Friend","uri","name","pictureurl","applicationFolder","startdate","points","this","_name","_uri","_imageUrl","_applicationFolder","_startDate","_points","Date","getTime","fileClient","require","authClient","rdfLib","SOLID","Namespace","VCARD","FOAF","LDP","SOLIDLINKEDBEER","postSolidFile","folder","filename","body","a","fetch","method","headers","putSolidFile","url","getUserFile","readFile","userttt","graph","parse","any","undefined","profile","sym","publicProfileIndex","value","ppiTTL","ppigraph","app","appQuery","nameFN","imageURL","inbox","result","imageUrl","appLocation","fetchFriend","friendUrl","friend","friendAppdataLocation","friendsAppdata","blankNode","rdflib","TERMS","RDF","ACL","appName","buildFolders","storePublicProfileIndex","storagePublic","webId","createAppNodeForPublicTypeIndex","applocation","makeAppFolderStructure","sleep","ms","Promise","setTimeout","checkFolderIntegrity","console","log","store","publicTypeIndex","publicLocation","findEmptyFolder","appLocationNN","add","serialize","newTTLpublicTypeindex","status","makeRandomString","length","characters","charactersLength","i","charAt","Math","floor","random","appFolderUrl","aclUrl","createFolder","getAclAppFolder","beerDrinkerUrl","getFriendsFile","friendsUrl","appDataFileAcl","appDataFile","getAppDataInit","getAclAppData","getACLInboxFolder","inboxUrl","inboxUrlacl","reviewUrlacl","reviewUrl","getACLSubmittersFriends","bn","appUrl","webIdUserLoggedIn","owner","agent","urlFile","friendsgroup","friendsgroupRequested","_public","resourceUrl","group1","resource","fgroup1","fgroup2","AccessError","args","message","checkacess","storeProfileCard","readAcess","match","Write","Append","Control","PIM","buildSolidCommunicator","user","returnObject","webIdNN","getWebId","getUserCard","getPPILocation","ppiObject","getStorePublic","getApplicationLocation","ppi","applicationLocation","sc","getUserDetails","getAppData","appData","getFriends","friendsData","friends","friendsStore","group","sentGroup","webIdUrl","profileCardTTl","storePublicTypeIndex","publicTypeIndexTTL","appdataLocation","appdatattl","friendsLocation","ttlFriends","query","each","index","push","preApplicationHandelings","scValues","readFolder","inboxContent","acceptedRequests","files","filter","file","includes","declinedRequests","checkAcceptedFriendShipRequests","checkDeclinedFriendShipRequests","postLocation","friendGraph","friendsGroup","friendsSent","filettl","removeMatches","friendFile","addFriend","deleteFile","friendsTtl","getInviteToLSBInvitation","urlInvitee","invitation","userWebId","getFriendShipRequest","getDeclineFriendshipRequest","from","getAcceptFriendshipRequest","description","SolidCommunicator","values","_friendsStore","_friendGroup","_friendsRequested","_user","setName","setImageUrl","addFriends","setBeerPoints","setBeginDate","setApplicationLocation","solidCommunicator","res","fetchFile","fileTTL","blanknode","type","replace","query1","query2","fileName","getName","invitationTTL","checkIfUserIsFriend","fileNameName","location","friendsFile","friendsTTL","declineTTL","getApplocation","acceptedTTL","NavBar","onInput","props","onBeerSearch","target","input","cldn","React","Children","toArray","children","map","child","key","to","className","loggedIn","placeholder","searchQuery","onChange","onClick","onSearchBarButtonClick","Component","Home","src","Knipsel","alt","style","color","LogIn","onChangeCheckBox","setState","loginAsBrewer","state","onButtonClick","solidAuth","popupLogin","popupUri","then","currentSession","session","onLoggedIn","history","onRegisterClick","window","assign","typeLogIn","activeClass","join","Groups","Friends","inputText","text","toUpperCase","friendUri","getUri","friendUri2","friendUri3","friendUri4","pathname","error","friendsElements","FriendPage","getFriendFromIndex","params","imgUrl","getImageUrl","profilePic","date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","dateToString","getStartDate","getPoints","BeerResults","list","elements","listItem","onLinkClick","Profile","getBeginDate","getBeerPoints","User","onNotJoinedButtonClick","inviteUserToSolib","clicked","sendFriendShipRequest","sendFriendshipRequest","button","disabled","Inbox","declineFriendShipRequest","array","messages","splice","declineFriendSchipRequest","acceptFriendShipRequest","acceptFriendSchipRequest","getInboxContents","items","buttonDiv","BeerDetailScreen","AppRoutes","exact","path","component","isLoggedIn","UserPage","userObject","FriendsPage","clearSearchQuery","CheckIns","PrivateRoute","rest","render","PrivateRouteLogIn","withRouter","AclErrorPage","FetchingPage","_beginDate","_beerPoints","_friends","_applicationLocation","_subscribers","subscriber","update","subscriberList","newFriends","concat","upDateSubScribers","newFriend","beerPoints","beginDate","App","checkLoggedIn","fetchingFiles","subscribe","build","accessError","onClickLogOut","logout","goBack","navBar","Logo","href","Boolean","hostname","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e5783ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Knipsel.4dafcfef.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.bc392ac4.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 427;","class Friend {\r\n    constructor(uri, name, pictureurl, applicationFolder, startdate, points){\r\n        this._name = name;\r\n        this._uri = uri;\r\n        this._imageUrl = pictureurl;\r\n        this._applicationFolder = applicationFolder;\r\n        this._startDate = startdate;\r\n        this._points = points;\r\n    } \r\n\r\n    getApplocation(){\r\n        return this._applicationFolder;\r\n    }\r\n\r\n    getUri(){\r\n        return this._uri;\r\n    }\r\n\r\n    getImageUrl(){\r\n        return this._imageUrl;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n\r\n    getStartDate(){\r\n        //send a copy of the date back and not the date itself\r\n        return new Date(this._startDate.getTime())\r\n    }\r\n\r\n    getPoints(){\r\n        return this._points;\r\n    }\r\n}\r\n\r\nexport default Friend;","import Friend from '../model/Friend';\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst rdfLib = require('rdflib');\r\n\r\nconst SOLID = rdfLib.Namespace(\"http://www.w3.org/ns/solid/terms#\");\r\nconst VCARD = rdfLib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst FOAF = rdfLib.Namespace('http://xmlns.com/foaf/0.1/');\r\nconst LDP = rdfLib.Namespace('http://www.w3.org/ns/ldp#');\r\nconst SOLIDLINKEDBEER = rdfLib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\n\r\nexport async function postSolidFile(folder, filename, body) {\r\n  authClient.fetch(folder, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'text/turtle',\r\n      'Link': '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"',\r\n      'SLUG': filename\r\n    },\r\n    body: body\r\n  });\r\n}\r\n\r\nexport async function putSolidFile(url, body) {\r\n  authClient.fetch(url, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'text/turtle'\r\n    },\r\n    body: body\r\n  });\r\n}\r\n\r\n// let body = `INSERT DATA { <${this.state.webId+\"#comment\"}> <${SOLIDLINKEDBEER('points6').value}> <${8}> }`;\r\n// let appDataFile;\r\n// appendSolidResource(appDataFile, {body})\r\n/**\r\n * \r\n * @param {*} url \r\n * @param {*} body \r\n */\r\nexport async function appendSolidResource(url, body) {\r\n  authClient.fetch(url, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/sparql-update'\r\n    },\r\n    body: body\r\n  });\r\n}\r\n\r\nexport async function getUserFile(url) {\r\n  let inbox;\r\n\r\n  //get url resource\r\n  let userttt = await fileClient.readFile(url);\r\n  let graph = rdfLib.graph();\r\n\r\n  try {\r\n    //parse to check if it is ttl\r\n    rdfLib.parse(userttt, graph, url, \"text/turtle\");\r\n\r\n    //check if it is a profile card\r\n    let query = graph.any(undefined, undefined, FOAF('PersonalProfileDocument'));\r\n\r\n    if (query) {\r\n      let profile = rdfLib.sym(url);\r\n\r\n      //check if user has ppi\r\n      const publicProfileIndex = graph.any(profile, SOLID(\"publicTypeIndex\"));\r\n\r\n      if (publicProfileIndex) {\r\n        let ppiTTL = await fileClient.readFile(publicProfileIndex.value);\r\n        let ppigraph = rdfLib.graph();\r\n        rdfLib.parse(ppiTTL, ppigraph, publicProfileIndex.value, \"text/turtle\");\r\n\r\n        let app = rdfLib.sym(publicProfileIndex.value + \"#SocialLinkedBeer\");\r\n        let appQuery = ppigraph.any(app, SOLID(\"instance\"));\r\n\r\n        //get name and Image            \r\n        let nameFN = graph.any(profile, VCARD('fn'));\r\n        let imageURL = graph.any(profile, VCARD('hasPhoto'));\r\n\r\n        if (!appQuery) {\r\n          inbox = graph.any(profile, LDP('inbox'));\r\n        }\r\n\r\n        //applocation is not of beerdrinker\r\n        let result = {\r\n          url: url,\r\n          name: nameFN ? nameFN.value : undefined,\r\n          imageUrl: imageURL ? imageURL.value : undefined,\r\n          appLocation: appQuery ? appQuery.value : undefined,\r\n          inbox: inbox ? inbox.value : undefined\r\n        }\r\n\r\n        return result;\r\n      } else {\r\n        throw new Error(\"no ppi\");\r\n      }\r\n    } else {\r\n      throw new Error(\"not a profile card\");\r\n    }\r\n  } catch (err) {\r\n    throw new Error(\"Not a correct profile linked data file\");\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} friendUrl \r\n */\r\nexport async function fetchFriend(friendUrl){\r\n  let friend = await getUserFile(friendUrl);\r\n\r\n  let friendAppdataLocation = friend.appLocation + 'beerdrinker/appdata.ttl';\r\n  let friendsAppdata = await fileClient.readFile(friendAppdataLocation);\r\n\r\n  let graph = rdfLib.graph();\r\n  rdfLib.parse(friendsAppdata, graph, friendAppdataLocation, \"text/turtle\");\r\n\r\n  let blankNode = graph.any(undefined, SOLIDLINKEDBEER('startdate'));\r\n\r\n  let startdate = graph.any(blankNode, SOLIDLINKEDBEER('startdate'));\r\n  let points = graph.any(blankNode, SOLIDLINKEDBEER('points'));\r\n\r\n  return new Friend(friendUrl, friend.name, friend.imageUrl, friend.appLocation, new Date(startdate.value), points.value);\r\n}","import { postSolidFile, putSolidFile, getUserFile } from \"../SolidMethods\";\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst rdflib = require('rdflib');\r\n\r\nconst SOLID = rdflib.Namespace(\"http://www.w3.org/ns/solid/terms#\");\r\nconst VCARD = rdflib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst TERMS = rdflib.Namespace('http://purl.org/dc/terms/');\r\nconst RDF = rdflib.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nconst SOLIDLINKEDBEER = rdflib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nconst FOAF = rdflib.Namespace('http://xmlns.com/foaf/0.1/');\r\nconst ACL = rdflib.Namespace(\"http://www.w3.org/ns/auth/acl#\");\r\n\r\nconst appName = \"sociallinkedbeer\";\r\n\r\nexport async function buildFolders(publicProfileIndex, storePublicProfileIndex, storagePublic, app, webId) {\r\n  //TODO a whole lot of error checking. Checking for 400 error codes and stuff like that\r\n  let applocation = await createAppNodeForPublicTypeIndex(storePublicProfileIndex, publicProfileIndex, storagePublic, app);\r\n  await makeAppFolderStructure(applocation, webId);\r\n\r\n  //sleep zodat de server de requests kan verwerken\r\n  await sleep(2000);\r\n\r\n  return applocation;\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, ms)\r\n  })\r\n}\r\n\r\nexport async function checkFolderIntegrity() {\r\n  //TODO Check integrity\r\n  console.log(\"TODO checkFolderIntegrity\");\r\n}\r\n\r\n/**\r\n * Adds the applicatioin to the public type index\r\n * @param {store} store \r\n * @param {NN} publicTypeIndex \r\n * @param {string} publicLocation \r\n * @param {string} app \r\n */\r\nasync function createAppNodeForPublicTypeIndex(store, publicTypeIndex, publicLocation, app) {\r\n  //find empty folder\r\n  let appLocation = await findEmptyFolder(publicLocation);\r\n\r\n  //create a named node for the app\r\n  let appLocationNN = rdflib.sym(appLocation);\r\n\r\n  //add values to the pti\r\n  store.add(publicTypeIndex, TERMS('references'), app);\r\n  store.add(app, RDF('type'), SOLID('TypeRegistration'));\r\n  store.add(app, SOLID('instance'), appLocationNN);\r\n\r\n  //serialize and send the pti\r\n  let newTTLpublicTypeindex = await rdflib.serialize(undefined, store, publicTypeIndex.value, 'text/turtle');\r\n  await putSolidFile(publicTypeIndex.value, newTTLpublicTypeindex);\r\n\r\n  return appLocation;\r\n}\r\n\r\n/**\r\n * Finds an empty folder for the application\r\n * @param {} publicLocation \r\n */\r\nasync function findEmptyFolder(publicLocation) {\r\n  //TODO improve this. You can check if the other folder holds up to your standards. A lot of possibilities\r\n  let appLocation = publicLocation + appName + '/'\r\n\r\n  //see if there is a folder at the applocation\r\n  let res = await authClient.fetch(appLocation);\r\n\r\n  //make eiher a new random foldername or use the original\r\n  if (res.status % 400 < 100) {\r\n    return appLocation;\r\n  } else {\r\n    return appLocation = publicLocation + appName + makeRandomString(10) + '/'\r\n  }\r\n}\r\n\r\n/**\r\n * Makes a random string\r\n * @param {int} length \r\n */\r\nfunction makeRandomString(length) {\r\n  var result = '';\r\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  var charactersLength = characters.length;\r\n  for (var i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Makes the folder struckture for the application\r\n * @param {string} appFolderUrl \r\n * @param {string} webId \r\n */\r\nasync function makeAppFolderStructure(appFolderUrl, webId) {\r\n  //TODO make all async\r\n  let body;\r\n\r\n  //top folder\r\n  let aclUrl = appFolderUrl + '.acl';\r\n\r\n  await fileClient.createFolder(appFolderUrl);\r\n  body = getAclAppFolder(appFolderUrl, aclUrl, webId);\r\n  await putSolidFile(aclUrl, body);\r\n\r\n  //beerdrinker\r\n  let beerDrinkerUrl = appFolderUrl + \"beerdrinker/\";\r\n  await fileClient.createFolder(beerDrinkerUrl);\r\n\r\n  // friends\r\n  let friendsUrl = beerDrinkerUrl + 'friends.ttl';\r\n  body = getFriendsFile(friendsUrl, webId);\r\n\r\n  await postSolidFile(beerDrinkerUrl, 'friends', body);\r\n\r\n  //appData \r\n  let appDataFile = beerDrinkerUrl + 'appdata.ttl';\r\n  let appDataFileAcl = appDataFile + '.acl';\r\n  \r\n  body = getAppDataInit(appDataFile);\r\n  await postSolidFile(beerDrinkerUrl, 'appdata', body);\r\n  \r\n  body = getAclAppData(appDataFile, appDataFileAcl, webId, friendsUrl);\r\n  await putSolidFile(appDataFileAcl, body);\r\n\r\n  //inboxfolder\r\n  let inboxUrl = beerDrinkerUrl + 'inbox/';\r\n  let inboxUrlacl = inboxUrl + '.acl';\r\n  body = getACLInboxFolder(inboxUrl, inboxUrlacl, webId);\r\n\r\n  await fileClient.createFolder(inboxUrl);\r\n  await putSolidFile(inboxUrlacl, body);\r\n\r\n  //check in folder        \r\n  let reviewUrl = beerDrinkerUrl + 'checkins/';\r\n  let reviewUrlacl = reviewUrl + '.acl';\r\n\r\n  await fileClient.createFolder(reviewUrl);\r\n  body = getACLSubmittersFriends(reviewUrl, reviewUrlacl, webId, friendsUrl);\r\n  await putSolidFile(reviewUrlacl, body);\r\n}\r\n\r\n/**\r\n * The init file for the appdata\r\n * @param {string} url \r\n */\r\nfunction getAppDataInit(url) {\r\n  let graph = rdflib.graph();\r\n\r\n  let bn = rdflib.blankNode();\r\n\r\n  graph.add(bn, SOLIDLINKEDBEER('startdate'), new Date());\r\n  graph.add(bn, SOLIDLINKEDBEER('points'), 0);\r\n\r\n  let ttl = rdflib.serialize(undefined, graph, url, 'text/turtle');\r\n  return ttl;\r\n}\r\n\r\n/**\r\n * Makes the acl for the app folder\r\n * Only owner can see, write and control\r\n * @param {*} appUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n */\r\nfunction getAclAppFolder(appUrl, aclUrl, webIdUserLoggedIn) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let app = rdflib.sym(appUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), app);\r\n  graph.add(owner, ACL('default'), app);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Init for the friends file\r\n * @param {string} urlFile \r\n * @param {*} webId \r\n */\r\nfunction getFriendsFile(urlFile) {\r\n  let graph = rdflib.graph();\r\n\r\n  let friendsgroup = rdflib.sym(urlFile + \"#Friends\");\r\n  let friendsgroupRequested = rdflib.sym(urlFile + \"#FriendsRequested\");\r\n\r\n  graph.add(friendsgroup, RDF('type'), VCARD('Group'));\r\n  graph.add(friendsgroup, VCARD('hasUID'), rdflib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:ABGroup\"));\r\n\r\n  graph.add(friendsgroupRequested, RDF('type'), VCARD('Group'));\r\n  graph.add(friendsgroupRequested, VCARD('hasUID'), rdflib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:CDGroup\"));\r\n\r\n  return rdflib.serialize(undefined, graph, urlFile, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Get the acl for the inbox folder. Everyone can write but only owner can read\r\n * @param {} inboxUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n */\r\nfunction getACLInboxFolder(inboxUrl, aclUrl, webIdUserLoggedIn) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let _public = rdflib.sym(aclUrl + \"#Public\");\r\n  let inbox = rdflib.sym(inboxUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), inbox);\r\n  graph.add(owner, ACL('default'), inbox);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(_public, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(_public, ACL('accessTo'), inbox);\r\n  graph.add(_public, ACL('default'), inbox);\r\n  graph.add(_public, ACL('agentClass'), FOAF(\"Agent\"));\r\n\r\n  graph.add(_public, ACL('mode'), ACL('Append'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Acl check in folder. Friend and user can read\r\n * @param {*} resourceUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n * @param {*} friendsUrl \r\n */\r\nfunction getACLSubmittersFriends(resourceUrl, aclUrl, webIdUserLoggedIn, friendsUrl) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let group1 = rdflib.sym(aclUrl + \"#Friends\");\r\n  let resource = rdflib.sym(resourceUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //group who get acess\r\n  let fgroup1 = rdflib.sym(friendsUrl + \"#Friends\");\r\n  let fgroup2 = rdflib.sym(friendsUrl + \"#FriendsRequested\");\r\n\r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), resource);\r\n  graph.add(owner, ACL('default'), resource);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(group1, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(group1, ACL('accessTo'), resource);\r\n  graph.add(group1, ACL('default'), resource);\r\n\r\n  graph.add(group1, ACL('agentGroup'), fgroup1);\r\n  graph.add(group1, ACL('agentGroup'), fgroup2);\r\n\r\n  graph.add(group1, ACL('mode'), ACL('Read'));\r\n  graph.add(group1, ACL('mode'), ACL('Append'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\n/**\r\n * Acl app file. Friend and user can read\r\n * @param {*} resourceUrl \r\n * @param {*} aclUrl \r\n * @param {*} webIdUserLoggedIn \r\n * @param {*} friendsUrl \r\n */\r\nfunction getAclAppData(resourceUrl, aclUrl, webIdUserLoggedIn, friendsUrl) {\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let group1 = rdflib.sym(aclUrl + \"#Friends\");\r\n  let resource = rdflib.sym(resourceUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //group who get acess\r\n  let fgroup1 = rdflib.sym(friendsUrl + \"#Friends\");\r\n  let fgroup2 = rdflib.sym(friendsUrl + \"#FriendsRequested\");\r\n\r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(owner, ACL('accessTo'), resource);\r\n  graph.add(owner, ACL('default'), resource);\r\n  graph.add(owner, ACL('agent'), agent);\r\n\r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(group1, RDF('type'), ACL('Authorization'));\r\n\r\n  graph.add(group1, ACL('accessTo'), resource);\r\n  graph.add(group1, ACL('default'), resource);\r\n\r\n  graph.add(group1, ACL('agentGroup'), fgroup1);\r\n  graph.add(group1, ACL('agentGroup'), fgroup2);\r\n\r\n  graph.add(group1, ACL('mode'), ACL('Read'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}","class AccessError extends Error {\r\n    constructor(...args) {\r\n        super(...args);\r\n\r\n        this.message = \"Access file is not correct\";\r\n    }\r\n}\r\n\r\nexport default AccessError;","import AccessError from '../../error/AccessError' \r\n\r\nconst rdfLib = require('rdflib');\r\n\r\nconst ACL = rdfLib.Namespace(\"http://www.w3.org/ns/auth/acl#\");\r\n\r\nexport function checkacess(storeProfileCard){\r\n    let blankNode = storeProfileCard.any(undefined, ACL('origin'),rdfLib.sym(\"https://ozcanseker.github.io\"));\r\n    let readAcess = storeProfileCard.match(blankNode, ACL('mode'), ACL('Read'));\r\n    let Write = storeProfileCard.match(blankNode, ACL('mode'),ACL('Write'));\r\n    let Append = storeProfileCard.match(blankNode, ACL('mode'),ACL('Append'));\r\n    let Control = storeProfileCard.match(blankNode, ACL('mode'),ACL('Control'));\r\n\r\n    if(!readAcess.length){\r\n        throw new AccessError();\r\n    }\r\n\r\n    if(!Write.length){\r\n        throw new AccessError();\r\n    }\r\n\r\n    if(!Append.length){\r\n        throw new AccessError();\r\n    }\r\n\r\n    if(!Control.length){\r\n        throw new AccessError();\r\n    }\r\n}","import { buildFolders, checkFolderIntegrity } from './PodFolderBuilder'\r\nimport { postSolidFile, putSolidFile, getUserFile, fetchFriend } from \"../SolidMethods\";\r\nimport Friend from '../../model/Friend';\r\nimport {checkacess} from './AccessChecker'\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst rdfLib = require('rdflib');\r\n\r\nconst SOLID = rdfLib.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\nconst VCARD = rdfLib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst TERMS = rdfLib.Namespace('http://purl.org/dc/terms/');\r\nconst RDF = rdfLib.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nconst SOLIDLINKEDBEER = rdfLib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nconst FOAF = rdfLib.Namespace('http://xmlns.com/foaf/0.1/');\r\nconst ACL = rdfLib.Namespace(\"http://www.w3.org/ns/auth/acl#\");\r\nconst PIM = rdfLib.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\nconst LDP = rdfLib.Namespace('http://www.w3.org/ns/ldp#');\r\n\r\nexport async function buildSolidCommunicator(user){\r\n  //TODO do some thing parallel\r\n  //TODO check acl\r\n    let returnObject = {};\r\n\r\n    //make a named node of the session webid of the user\r\n    //namednode\r\n    const webIdNN = rdfLib.sym(user.getWebId());\r\n\r\n    //get a store of the profile card of the logged in user\r\n    //store\r\n    let storeProfileCard = await getUserCard(webIdNN.uri);\r\n\r\n    //check the acess before trying to make an application\r\n    checkacess(storeProfileCard);\r\n     \r\n    //store for the Public Profile Index\r\n    //object with store and nn\r\n    let ppiObject = await getPPILocation(webIdNN, storeProfileCard);\r\n\r\n    //String that shows the location of the public storage of the pod\r\n    //string \r\n    let storagePublic = await getStorePublic(webIdNN, storeProfileCard);     \r\n\r\n    //locatie voor de applicatie\r\n    //string\r\n    let applicationLocation = await getApplicationLocation(ppiObject.ppi , ppiObject.store, storagePublic, webIdNN.value);\r\n\r\n\r\n    //returnobject\r\n    returnObject.sc = {};\r\n    returnObject.user = {};\r\n\r\n    returnObject.user = getUserDetails(webIdNN, storeProfileCard);\r\n    let appData = await getAppData(applicationLocation);\r\n\r\n    returnObject.user = {...returnObject.user , ...appData};\r\n    \r\n    let friendsData = await getFriends(applicationLocation);\r\n    returnObject.user.friends = friendsData.friends;\r\n    returnObject.sc.friendsStore = friendsData.friendsStore;\r\n    returnObject.sc.group = friendsData.group;\r\n    returnObject.sc.sentGroup = friendsData.sentGroup;\r\n  \r\n    returnObject.user.applicationLocation = applicationLocation;\r\n\r\n    return returnObject;\r\n}\r\n\r\nfunction getUserDetails(profile, storeProfileCard){\r\n  let nameFN =  storeProfileCard.any(profile,VCARD('fn'));\r\n  let imageURL =  storeProfileCard.any(profile,VCARD('hasPhoto')); \r\n\r\n  nameFN = nameFN ? nameFN.value : undefined;\r\n  imageURL = imageURL ? imageURL.value : undefined;\r\n\r\n  return {name: nameFN, imageURL: imageURL};\r\n}\r\n\r\nasync function getUserCard(webIdUrl){\r\n    const profileCardTTl = await fileClient.fetch(webIdUrl); \r\n    const storeProfileCard = rdfLib.graph(); \r\n    rdfLib.parse(profileCardTTl, storeProfileCard, webIdUrl, \"text/turtle\");\r\n    \r\n    return storeProfileCard;\r\n}\r\n\r\nasync function getPPILocation(profile, storeProfileCard){\r\n    const publicProfileIndex = storeProfileCard.any(profile, SOLID(\"publicTypeIndex\"));\r\n    \r\n    const storePublicTypeIndex = rdfLib.graph();\r\n    const publicTypeIndexTTL = await fileClient.fetch(publicProfileIndex.value);\r\n    rdfLib.parse(publicTypeIndexTTL, storePublicTypeIndex, publicProfileIndex.value, \"text/turtle\");\r\n    \r\n    return {store : storePublicTypeIndex, ppi : publicProfileIndex};\r\n}\r\n\r\nfunction getStorePublic(profile, storeProfileCard){\r\n    let locationStorage = storeProfileCard.any(profile, PIM(\"storage\"));\r\n    return locationStorage.value + \"public/\";\r\n}\r\n\r\nasync function getApplicationLocation(publicProfileIndex, storePublicProfileIndex, storagePublic, webId){\r\n    let app = rdfLib.sym(publicProfileIndex.value + \"#SocialLinkedBeer\");\r\n    let appQuery = storePublicProfileIndex.any(app, SOLID(\"instance\"));\r\n\r\n    if(appQuery){\r\n      checkFolderIntegrity();\r\n      return appQuery.value;\r\n    }else{\r\n        return await buildFolders(publicProfileIndex, storePublicProfileIndex, storagePublic, app, webId);\r\n    }\r\n}\r\n\r\nasync function getAppData(url){\r\n  //TODO one place to save all urls\r\n  let appdataLocation = url + 'beerdrinker/appdata.ttl';\r\n\r\n  let appdatattl = await fileClient.readFile(appdataLocation);\r\n  let graph = rdfLib.graph();\r\n  rdfLib.parse(appdatattl, graph, appdataLocation, \"text/turtle\");\r\n\r\n  let blankNode = graph.any(undefined, SOLIDLINKEDBEER('startdate'));\r\n\r\n  let startdate = graph.any(blankNode, SOLIDLINKEDBEER('startdate'));\r\n  let points = graph.any(blankNode, SOLIDLINKEDBEER('points'));\r\n  \r\n  return {startdate: startdate.value, points: points.value}\r\n}\r\n\r\n async function getFriends(applicationLocation){\r\n  let friendsLocation = applicationLocation + 'beerdrinker/friends.ttl';\r\n  let ttlFriends = await fileClient.readFile(friendsLocation);\r\n  let group = rdfLib.sym(friendsLocation + \"#Friends\");\r\n  let sentGroup = rdfLib.sym(friendsLocation + \"#FriendsRequested\");\r\n\r\n  let friends = [];\r\n\r\n  let graph = rdfLib.graph();\r\n  rdfLib.parse(ttlFriends, graph, friendsLocation, \"text/turtle\");\r\n\r\n  let query = graph.each(group, VCARD('hasMember'), undefined); \r\n\r\n  for (let index = 0; index < query.length; index++) {\r\n    let friend = await fetchFriend(query[index].value);\r\n    friends.push(friend);\r\n  }\r\n\r\n  return {friends: friends, friendsStore: graph, group: group, sentGroup: sentGroup};\r\n}\r\n ","import { postSolidFile, putSolidFile, getUserFile, fetchFriend } from \"../SolidMethods\";\r\nimport Friend from '../../model/Friend'\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst rdfLib = require('rdflib');\r\n\r\nconst VCARD = rdfLib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst SOLIDLINKEDBEER = rdfLib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\n\r\nexport async function preApplicationHandelings(applicationFolder, scValues, user){\r\n    let inbox = applicationFolder + \"inbox/\";\r\n    let inboxContent = await fileClient.readFolder(inbox);\r\n\r\n    //add friend from friend requested to friends\r\n    let acceptedRequests = inboxContent.files.filter(file => {\r\n        return file.name.includes(\"Social_Linked_Beer_FriendschipRequestAccepted\");\r\n    })\r\n    \r\n    //delete user from friends requested if they declined\r\n    let declinedRequests = inboxContent.files.filter(file => {\r\n        return file.name.includes(\"Social_Linked_Beer_FriendschipRequestDecline\");\r\n    })\r\n    \r\n    if(acceptedRequests.length != 0){\r\n        await checkAcceptedFriendShipRequests(applicationFolder, acceptedRequests, scValues, user);\r\n    }\r\n\r\n    if(declinedRequests.length != 0){\r\n        await checkDeclinedFriendShipRequests(applicationFolder, declinedRequests, scValues);\r\n    }\r\n}\r\n\r\n/**\r\n * Check if there are accepted friendschip requests\r\n * @param {*} applicationFolder \r\n * @param {*} acceptedRequests \r\n * @param {*} scValues \r\n * @param {*} user \r\n */\r\nasync function checkAcceptedFriendShipRequests(applicationFolder,acceptedRequests, scValues, user){\r\n    //get some values\r\n    let postLocation = applicationFolder + 'friends.ttl';\r\n    let friendGraph = scValues.friendsStore;\r\n    let friendsGroup = scValues.group;\r\n    let friendsSent = scValues.sentGroup;\r\n\r\n    for(let i = 0; i < acceptedRequests.length; i++){\r\n        //make a graph and get file\r\n        let graph = rdfLib.graph();\r\n        let filettl = await fileClient.readFile(acceptedRequests[i].url);\r\n        rdfLib.parse(filettl, graph, acceptedRequests[i].url, \"text/turtle\");\r\n\r\n        //get the blanknode from the message\r\n        let friend = graph.any(undefined, SOLIDLINKEDBEER('from'));\r\n        friend = graph.any(friend, SOLIDLINKEDBEER('from'));\r\n\r\n        //add from friend requested to friend\r\n        friendGraph.add(friendsGroup, VCARD('hasMember'), friend);\r\n        friendGraph.removeMatches(friendsSent, VCARD('hasMember'), friend);\r\n\r\n        //get the friend from the internet\r\n        let friendFile = await fetchFriend(friend.value);\r\n\r\n        //adding friend\r\n        user.addFriend(friendFile);\r\n\r\n        //delete the original message\r\n        await fileClient.deleteFile(acceptedRequests[i].url);\r\n    }\r\n\r\n    //update the original friend file\r\n    let friendsTtl = await rdfLib.serialize(undefined, friendGraph, postLocation, 'text/turtle');\r\n    //TODO post new file for user so that he know friendship is accepted\r\n    putSolidFile(postLocation, friendsTtl);\r\n}\r\n\r\nasync function checkDeclinedFriendShipRequests(applicationFolder,declinedRequests, scValues){\r\n    let postLocation = applicationFolder + 'friends.ttl';\r\n    let friendGraph = scValues.friendsStore;\r\n    let friendsSent = scValues.sentGroup;\r\n    \r\n    for(let i = 0; i < declinedRequests.length; i++){\r\n        let graph = rdfLib.graph();\r\n        let filettl = await fileClient.readFile(declinedRequests[i].url);\r\n        \r\n        rdfLib.parse(filettl, graph, declinedRequests[i].url, \"text/turtle\");\r\n\r\n        //get blank node from friend sent\r\n        let friend = graph.any(undefined, SOLIDLINKEDBEER('from'));\r\n        friend = graph.any(friend, SOLIDLINKEDBEER('from'));\r\n\r\n        //remove friend from the friendssent file\r\n        friendGraph.removeMatches(friendsSent, VCARD('hasMember'), friend);\r\n        \r\n        //delete the message        \r\n        await fileClient.deleteFile(declinedRequests[i].url);\r\n    }\r\n\r\n    //post new friend solid file\r\n    let friendsTtl = await rdfLib.serialize(undefined, friendGraph, postLocation, 'text/turtle');\r\n    putSolidFile(postLocation, friendsTtl);\r\n\r\n    //TODO post new file for user so that he know friendship is declined\r\n}","const rdfLib = require('rdflib');\r\n\r\nconst SOLID = rdfLib.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\nconst PIM = rdfLib.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\nconst VCARD = rdfLib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst TERMS = rdfLib.Namespace('http://purl.org/dc/terms/');\r\nconst RDF = rdfLib.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nconst SOLIDLINKEDBEER = rdfLib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nconst FOAF = rdfLib.Namespace('http://xmlns.com/foaf/0.1/');\r\nconst LDP = rdfLib.Namespace('http://www.w3.org/ns/ldp#');\r\n\r\nexport function getInviteToLSBInvitation(urlInvitee, invitation, postLocation, userWebId){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('Invitation'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('invitationTo'), rdfLib.sym('https://ozcanseker.github.io/Social-linked-beer/'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(urlInvitee));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getFriendShipRequest(urlInvitee, invitation, postLocation, userWebId){\r\n    //make friendrequest\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('FriendshipRequest'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(urlInvitee));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getDeclineFriendshipRequest(from , invitation, postLocation, userWebId){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('FriendschipRequestDecline'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(from));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), invitation);\r\n\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}\r\n\r\nexport function getAcceptFriendshipRequest(from, description , postLocation, userWebId){\r\n    let graph = rdfLib.graph();\r\n    let blankNode = rdfLib.blankNode();\r\n\r\n    graph.add(blankNode, RDF('type'), SOLIDLINKEDBEER('FriendschipRequestAccepted'));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('from'), rdfLib.sym(userWebId));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('to'), rdfLib.sym(from));\r\n    graph.add(blankNode, SOLIDLINKEDBEER('description'), description);\r\n\r\n    //make a text file and send\r\n    return rdfLib.serialize(undefined, graph, postLocation, 'text/turtle');\r\n}","import { postSolidFile, putSolidFile, getUserFile, fetchFriend } from \"./SolidMethods\";\r\nimport Friend from '../model/Friend'\r\nimport { buildSolidCommunicator } from './solidCommunicatorInits/SolidCommunicatorBuilder'\r\nimport { preApplicationHandelings } from './solidCommunicatorInits/PreApplicationHandelings'\r\nimport { getInviteToLSBInvitation, getDeclineFriendshipRequest, getFriendShipRequest, getAcceptFriendshipRequest} from './rdf/SolidTtlTemplates'\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst rdfLib = require('rdflib');\r\n\r\nconst SOLID = rdfLib.Namespace(\"http://www.w3.org/ns/solid/terms#\");\r\nconst PIM = rdfLib.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\nconst VCARD = rdfLib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst TERMS = rdfLib.Namespace('http://purl.org/dc/terms/');\r\nconst RDF = rdfLib.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nconst SOLIDLINKEDBEER = rdfLib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nconst FOAF = rdfLib.Namespace('http://xmlns.com/foaf/0.1/');\r\nconst LDP = rdfLib.Namespace('http://www.w3.org/ns/ldp#');\r\n\r\nclass SolidCommunicator {\r\n  /**\r\n   * Build the solid communicator\r\n   * @param {*} user \r\n   */\r\n  static async build(user) {\r\n    let values = await buildSolidCommunicator(user);\r\n\r\n    user.setName(values.user.name);\r\n    user.setImageUrl(values.user.imageURL);\r\n    user.addFriends(values.user.friends);\r\n    user.setBeerPoints(values.user.points);\r\n    user.setBeginDate(new Date(values.user.startdate));\r\n    user.setApplicationLocation(values.user.applicationLocation + \"beerdrinker/\");\r\n\r\n    await preApplicationHandelings(user.getApplicationLocation(), values.sc, user);\r\n\r\n    //make new solidCommunicator\r\n    let solidCommunicator = new SolidCommunicator(user, values.sc, user);\r\n\r\n    return solidCommunicator;\r\n  }\r\n\r\n  constructor(user, values) {\r\n    this._friendsStore = values.friendsStore;\r\n    this._friendGroup = values.group;\r\n    this._friendsRequested = values.sentGroup;\r\n\r\n    //user\r\n    this._user = user;\r\n  }\r\n\r\n  /**\r\n   * Get an user file \r\n   * @param {*} url \r\n   */\r\n  async getUserFile(url) {\r\n    return await getUserFile(url);\r\n  }\r\n\r\n  /**\r\n   * Check if user is already friend\r\n   * @param {*} url \r\n   */\r\n\r\n  async getInboxContents() {\r\n    let inbox = this._user.getApplicationLocation() + \"inbox/\"\r\n    let res = await fileClient.readFolder(inbox);\r\n    let files = [];\r\n\r\n    for (let index = 0; index < res.files.length; index++) {\r\n      let file = await this.fetchFile(res.files[index].url);\r\n      files.push(file);\r\n    }\r\n\r\n    return files;\r\n  }\r\n\r\n  async fetchFile(url) {\r\n    let graph = rdfLib.graph();\r\n    let fileTTL = await fileClient.readFile(url);\r\n\r\n    await rdfLib.parse(fileTTL, graph, url, \"text/turtle\");\r\n\r\n    let blanknode = graph.any(undefined, RDF('type'));\r\n\r\n    let type = graph.any(blanknode, RDF('type'));\r\n    let description = graph.any(blanknode, SOLIDLINKEDBEER('description'));\r\n    let from = graph.any(blanknode, SOLIDLINKEDBEER('from'));\r\n\r\n    let file = {\r\n      type: type.value.replace(/.*#/, \"\"),\r\n      from: from.value,\r\n      description: description.value,\r\n      url: url\r\n    }\r\n\r\n    return file;\r\n  }\r\n\r\n  checkIfUserIsFriend(url) {\r\n    let query1 = this._friendsStore.match(this._friendsRequested, VCARD('hasMember'), rdfLib.sym(url));\r\n    let query2 = this._friendsStore.match(this._friendGroup, VCARD('hasMember'), rdfLib.sym(url));\r\n\r\n    if (query1.length !== 0 || query2.length !== 0) {\r\n      console.log(\"already friend\");\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n   /**\r\n   * Send invitation to user for the application\r\n   * @param {*} urlInvitee \r\n   * @param {*} inbox \r\n   */\r\n  async inviteUserToSolib(urlInvitee, inbox) {\r\n    //name for file\r\n    let fileName = \"Social_Linked_Beer_invation_\" + (this._user.getName ? \"from_\" + this._user.getName() : \"\")\r\n    let invitation = (this._user.getName() ? this._user.getName() : this._user.getWebId()) + \" invites you to drink a beer with him on https://ozcanseker.github.io/Social-linked-beer/ .\";\r\n\r\n    //name of the location where it will be posted\r\n    let postLocation = inbox + fileName + \".ttl\";\r\n\r\n    //get ttl file for invitation\r\n    let invitationTTL = getInviteToLSBInvitation(urlInvitee, invitation, postLocation, this._user.getWebId());\r\n\r\n    await postSolidFile(inbox, fileName, invitationTTL);\r\n  }\r\n\r\n  /**\r\n   * Sends a friendship request to user\r\n   * @param {*} urlInvitee \r\n   * @param {*} appLocation \r\n   */\r\n  async sendFriendshipRequest(urlInvitee, appLocation) {\r\n    if (!this.checkIfUserIsFriend(urlInvitee)) {\r\n      //get url without https and profile card.me\r\n      let fileNameName = this._user.getWebId().replace(\"https://\", \"\").replace(/\\/.*/, \"\");\r\n\r\n      //make a file name\r\n      let fileName = \"Social_Linked_Beer_invation_from_\" + fileNameName;\r\n\r\n      //the invitation\r\n      let invitation = (this._user.getName() ? this._user.getName() : this._user.getWebId()) + \" invites you to share your stories with him.\";\r\n      \r\n      //locations to be posted\r\n      let location = appLocation + \"beerdrinker/inbox\";\r\n      let postLocation = location + fileName + \".ttl\";\r\n\r\n      //the ttl file\r\n      let invitationTTL = getFriendShipRequest(urlInvitee, invitation, postLocation, this._user.getWebId());\r\n\r\n      //add friend to friend request send\r\n      let friendsFile = this._user.getApplicationLocation() + 'friends.ttl';\r\n      this._friendsStore.add(this._friendsRequested, VCARD('hasMember'), rdfLib.sym(urlInvitee));\r\n      let friendsTTL = await rdfLib.serialize(undefined, this._friendsStore, friendsFile, 'text/turtle');\r\n\r\n      // send files\r\n      await postSolidFile(location, fileName, invitationTTL);\r\n      await putSolidFile(friendsFile, friendsTTL);\r\n    }\r\n  }\r\n\r\n  async declineFriendSchipRequest(message) {\r\n    //send a declined friendship request to other pod\r\n    let result = await this.getUserFile(message.from);\r\n    let inbox = result.appLocation + 'beerdrinker/inbox/';\r\n\r\n    //get file name and description string\r\n    let fileNameName = this._user.getWebId().replace(\"https://\", \"\").replace(/\\/.*/, \"\");\r\n    let fileName = \"Social_Linked_Beer_FriendschipRequestDecline_from_\" + fileNameName;\r\n    let invitation = (this._user.getName() ? this._user.getName() : this._user.getWebId()) + \" declined your friendship request.\";\r\n\r\n    //get the location is will be posted to\r\n    let postLocation = inbox + fileName + \".ttl\";\r\n\r\n    //make a text file and send\r\n    let declineTTL = getDeclineFriendshipRequest(message.from, invitation, postLocation, this._user.getWebId());\r\n\r\n    //delete friendship request from own pod\r\n    await postSolidFile(inbox, fileName, declineTTL);\r\n    await fileClient.deleteFile(message.url);\r\n  }\r\n\r\n  async acceptFriendSchipRequest(message) {\r\n    //get user\r\n    let friend = await fetchFriend(message.from);\r\n    let inbox = friend.getApplocation() + 'beerdrinker/inbox/';\r\n\r\n    //add user as friend\r\n    let friendsFile = this._user.getApplicationLocation() + 'friends.ttl';\r\n    this._friendsStore.add(this._friendGroup, VCARD('hasMember'), rdfLib.sym(message.from));\r\n    let friendsTTL = await rdfLib.serialize(undefined, this._friendsStore, friendsFile, 'text/turtle');\r\n\r\n    //get file name and description string\r\n    let fileNameName = this._user.getWebId().replace(\"https://\", \"\").replace(/\\/.*/, \"\");\r\n    let fileName = \"Social_Linked_Beer_FriendschipRequestAccepted_from_\" + fileNameName;\r\n    let description = (this._user.getName() ? this._user.getName() : this._user.getWebId()) + \" accepted your friendship request.\";\r\n\r\n    //get the location is will be posted to\r\n    let postLocation = inbox + fileName + \".ttl\";\r\n    \r\n    //make a text file and send\r\n    let acceptedTTL = getAcceptFriendshipRequest(message.from, description, postLocation, this._user.getWebId());\r\n\r\n    //send friendship accepted to user\r\n    await postSolidFile(inbox, fileName, acceptedTTL);\r\n    //delete friendship request from own pod      \r\n    await fileClient.deleteFile(message.url);\r\n    //update FriendsFile\r\n    await putSolidFile(friendsFile, friendsTTL);\r\n\r\n    this._user.addFriends(friend);\r\n  }\r\n}\r\n\r\n//after this\r\n//when opening folder pod check inbox and handle messages.\r\n//  -delete user from friendsrequested if declined\r\n//  -Add user to FriendsRequested\r\n//friendspage\r\n\r\nexport default SolidCommunicator;","import React from 'react';\r\nimport '../css/NavBar.scss'\r\n\r\nclass NavBar extends React.Component{\r\n    onInput = (e) => {\r\n        this.props.onBeerSearch(e.target.value);\r\n    }\r\n\r\n    render(){\r\n        let cldn =React.Children.toArray( this.props.children);\r\n        let input;\r\n\r\n        cldn = cldn.map((child, index) => {            \r\n            if(index !== cldn.length - 1){\r\n                return (\r\n                    <li key = {child.props.to} className = \"navBarOptionContainer\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }else{\r\n                return(\r\n                    <li key = {child.props.to} className = \"navBarOptionContainerLast\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }            \r\n        });\r\n\r\n        if(this.props.loggedIn){\r\n            input = (<li className = \"navBarSearch\">\r\n                <input  placeholder = \"search for beers\" value = {this.props.searchQuery} onChange = {this.onInput} />\r\n                <input type = \"button\" value = \"x\" onClick = {this.props.onSearchBarButtonClick}/>\r\n            </li>)\r\n        }\r\n\r\n        return(\r\n            <nav>\r\n                <ul id = \"navBar\">\r\n                    {cldn}\r\n                    {input}\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport Knipsel from '../../assets/Knipsel.png'\r\nimport '../css/Home.scss'\r\n\r\nclass Home extends React.Component{\r\n    render(){\r\n        return(\r\n            <section className = \"home\">\r\n                <h3>\r\n                    This is an application that is powered by Solid.<br/> \r\n                    Log in with your pod to use the application\r\n                </h3>\r\n                <br/>\r\n                <img src= {Knipsel} alt = \"Inrupt logo\"/>\r\n                <br/>\r\n                <h3 style = {{color : \"red\"}}>\r\n                    Carefull, This application is still in development and might mess up your pod.\r\n                    if you want to test it out, I recommend you make a new pod that you can delete\r\n                </h3>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport '../css/LogIn.scss'\r\n\r\nimport solidAuth from 'solid-auth-client'\r\n\r\nclass LogIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loginAsBrewer: false\r\n        }\r\n    }\r\n\r\n    onChangeCheckBox = () => {\r\n        this.setState({\r\n            loginAsBrewer: !this.state.loginAsBrewer\r\n        })\r\n    }\r\n\r\n    onButtonClick = () => {\r\n        let popupUri = './popup.html';\r\n        solidAuth.popupLogin({ popupUri }).then(() => {\r\n            solidAuth.currentSession().then(session => {\r\n                this.props.onLoggedIn();\r\n                this.props.history.push(`/profile`)\r\n            })\r\n        })\r\n    }\r\n\r\n    onRegisterClick = () => {\r\n        window.location.assign('https://inrupt.net/');\r\n    }\r\n\r\n    render() {\r\n        let typeLogIn;\r\n\r\n        if (this.state.loginAsBrewer) {\r\n            typeLogIn = <h1>Brewer</h1>\r\n        } else {\r\n            typeLogIn = <h1>Beer Drinker</h1>\r\n        }\r\n\r\n        let activeClass = this.state.loginAsBrewer ? \"logInBrewer\" : \"logInBeerDrinker\";\r\n\r\n        return (\r\n            <section className={[\"logInScreen \", activeClass].join(' ')}>\r\n                <div className=\"loginField\">\r\n                    {typeLogIn}\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" onChange={this.onChangeCheckBox} />\r\n                        <span className=\"slider\"></span>\r\n                    </label>\r\n\r\n                    <br />\r\n                    <div>\r\n                        <button onClick = {this.onRegisterClick}>Register</button>\r\n                        <button onClick = {this.onButtonClick}>Log in</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LogIn;\r\n","import React from 'react';\r\n\r\nclass Groups extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <h1>\r\n                Groups\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Groups;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport Friend from \"../../model/Friend\"\r\nimport '../css/Friends.scss'\r\n\r\nclass Friends extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputText : \"\",\r\n            error : undefined\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            inputText: e.target.value\r\n        })        \r\n    }\r\n\r\n    onButtonClick = async () => {\r\n        let friends = this.props.user.getFriends();\r\n        friends = friends.filter(friend => {\r\n            let text = this.state.inputText.toUpperCase();\r\n            let friendUri = friend.getUri().toUpperCase();\r\n            let friendUri2 = friend.getUri().toUpperCase().replace(\"#ME\", \"\").replace(\"#I\", \"\");\r\n            let friendUri3 = friendUri.replace(\"HTTPS://\", \"\");\r\n            let friendUri4 = friendUri2.replace(\"HTTPS://\", \"\");\r\n            \r\n            return  friendUri === text || friendUri2 == text || friendUri3 == text || friendUri4 == text;\r\n        });\r\n\r\n        if (friends.length != 0){\r\n            let index = this.props.user.getFriends().map((profile, index) => {\r\n                if(friends[0].getUri() === profile.getUri()){\r\n                    return index;\r\n                }\r\n            }).filter(index => {return index})\r\n\r\n            this.props.history.push(`/friend/${index[0]}`);\r\n        } else if(this.props.user.getWebId() === this.state.inputText){\r\n            this.props.history.push(\"/profile\");\r\n        }else{\r\n            try{\r\n                let result = await this.props.solidCommunicator.getUserFile(this.state.inputText);\r\n                \r\n                    this.props.history.push({\r\n                        pathname:\"/user\",\r\n                        state:{\r\n                            result: result\r\n                        }\r\n                    });\r\n            }catch(e){\r\n                this.setState({error : e.message})\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let friends = this.props.user.getFriends();\r\n        friends = friends.filter(friend => {\r\n            let text = this.state.inputText.toUpperCase();\r\n            if(friend.getName()){\r\n                return friend.getName().toUpperCase().includes(text) || friend.getUri().toUpperCase().includes(text);\r\n            }\r\n\r\n            return friend.getUri().toUpperCase().includes(text);\r\n        });\r\n        \r\n        let friendsElements = friends.map((friend, index) => {\r\n            return <li key = {friend.getUri()}>\r\n                <Link  to= {`/friend/${index}`}>\r\n                    <p>\r\n                        {friend.getName() ? friend.getName() : friend.getUri()}\r\n                    </p>\r\n                </Link>\r\n            </li> \r\n        });\r\n\r\n\r\n        return(\r\n            <section className = \"friends\">\r\n                <div className = \"searchFriends\">\r\n                    <h3>\r\n                        Make new friends\r\n                    </h3>\r\n                    <br/>\r\n                    <input type = \"text\" placeholder =\"profilecard link\" value = {this.state.inputText} onChange = {this.onChange}></input>\r\n                    <button onClick = {this.onButtonClick}>Search on the web</button>\r\n                    <p style = {{color: \"red\"}}>{this.state.error}</p>\r\n                </div>\r\n\r\n                <div className = \"friendSection\">\r\n                    <h3>\r\n                        Friends\r\n                    </h3>\r\n                    <ul >\r\n                        {friendsElements}\r\n                    </ul>\r\n                </div>\r\n\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport '../css/Profile.scss'\r\nimport profilePic from '../../assets/profilePic.png'\r\n\r\nclass FriendPage extends React.Component{\r\n    constructor(props){\r\n        super(props); \r\n    }\r\n\r\n    render(){\r\n        let user = this.props.user.getFriendFromIndex(this.props.match.params.id);\r\n        let imgUrl = user.getImageUrl();\r\n\r\n        return(\r\n            <section className = \"profileScreen\">\r\n                \r\n                <div className=\"row\">\r\n                    <div className=\"leftColum\">\r\n                    <h1>\r\n                            {user.getName()}\r\n                        </h1>\r\n                            {/*TODO make image load faster*/}\r\n                            <img src = {imgUrl ? imgUrl : profilePic} alt = \"\"/>\r\n                        <p>\r\n                            check-ins : {0}\r\n                        </p>\r\n                        <p>\r\n                            reviews : 0\r\n                        </p>\r\n                        <p>\r\n                        Begin date : {dateToString(user.getStartDate())}\r\n                        </p>\r\n                        <p>\r\n                            beerbonus points : {user.getPoints()}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <h1>\r\n                            Recent activities\r\n                        </h1>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n} \r\n\r\nfunction dateToString(date){\r\n    var dd = String(date.getDate()).padStart(2, '0');\r\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n    var yyyy = date.getFullYear();\r\n\r\n    return dd + '/' + mm + '/' + yyyy; \r\n}\r\n\r\nexport default FriendPage;","import React from 'react';\r\n\r\nclass Friends extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <h1>\r\n                Check-Ins\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport '../css/BeerResults.scss';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass BeerResults extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.list = [\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n        ]\r\n    }\r\n\r\n\r\n    render(){\r\n        let elements = this.list.map(listItem => {\r\n                return (\r\n                    <li>\r\n                        <Link to = \"/beer/hertogJan\" onClick = {this.props.onLinkClick}>\r\n                            {listItem.name}\r\n                        </Link>\r\n                    </li>\r\n                )\r\n        })\r\n\r\n        return(\r\n            <div>\r\n                <h1>Beer Results</h1>\r\n                <ul>\r\n                    {elements}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerResults;\r\n\r\n","import React from 'react';\r\nimport '../css/Profile.scss'\r\nimport profilePic from '../../assets/profilePic.png'\r\n\r\nclass Profile extends React.Component{\r\n    render(){\r\n        let user = this.props.user;\r\n        let imgUrl = user.getImageUrl();\r\n\r\n        return(\r\n            <section className = \"profileScreen\">\r\n                \r\n                <div className=\"row\">\r\n                    <div className=\"leftColum\">\r\n                        <h1>\r\n                            {user.getName()}\r\n                        </h1>\r\n                            {/*TODO make image load faster*/}\r\n                            <img src = {imgUrl ? imgUrl : profilePic} alt = \"\"/>\r\n                        <p>\r\n                            check-ins : {0}\r\n                        </p>\r\n                        <p>\r\n                            reviews : 0\r\n                        </p>\r\n                        <p>\r\n                            Begin date : {dateToString(user.getBeginDate())}\r\n                        </p>\r\n                        <p>\r\n                            beerbonus points : {user.getBeerPoints()}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <h1>\r\n                            Recent activities\r\n                        </h1>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nfunction dateToString(date){\r\n    var dd = String(date.getDate()).padStart(2, '0');\r\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n    var yyyy = date.getFullYear();\r\n\r\n    return dd + '/' + mm + '/' + yyyy;\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport '../css/User.scss'\r\nimport profilePic from '../../assets/profilePic.png';\r\n\r\nclass User extends React.Component{ \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            clicked: false\r\n        }\r\n    }\r\n\r\n    onNotJoinedButtonClick = async () => {\r\n        let result = this.props.location.state.result;\r\n        await this.props.solidCommunicator.inviteUserToSolib(result.url, result.inbox);\r\n\r\n        this.setState(\r\n            {\r\n                clicked : true}\r\n            );  \r\n    }\r\n\r\n    sendFriendShipRequest = async () => {\r\n        //TODO check if friendship request is already set\r\n        let result = this.props.location.state.result;\r\n        await this.props.solidCommunicator.sendFriendshipRequest(result.url, result.appLocation);\r\n\r\n        this.setState(\r\n            {\r\n                clicked : true}\r\n            );  \r\n    }\r\n\r\n    render(){\r\n        let result = this.props.location.state.result;\r\n        let button;\r\n\r\n        if(!this.state.clicked){\r\n            if(result.appLocation){\r\n                button = (<button onClick = {this.sendFriendShipRequest}>Send friendship request</button>);\r\n            }else{\r\n                button = (<button onClick = {this.onNotJoinedButtonClick}>Invite to Social linked beer</button>);\r\n            }\r\n        }else{\r\n            button = (<button disabled= {true}>Request send</button>)\r\n        }\r\n\r\n        return(\r\n            <section className = \"userPageNew\">\r\n                <div className = \"userPageHead\">              \r\n                    <h1>\r\n                        {result.name}\r\n                    </h1>\r\n                    <img src = {result.imageUrl ? result.imageUrl : profilePic} alt = \"\"/>\r\n                </div>\r\n                <div className = \"userButtonDiv\">\r\n                    {button}\r\n                </div>\r\n                <div className = \"userInfo\">\r\n                    <p>Uri : {result.url}</p>\r\n                    <p>Has social linked beer account?: {result.appLocation ? \"Yes\" : \"No\"}</p>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport \"../css/Inbox.scss\";\r\n\r\nclass Inbox extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            messages : []\r\n        }\r\n    }\r\n\r\n    declineFriendShipRequest = async (index, message) => {\r\n        let array = this.state.messages;\r\n        array.splice(index, 1);\r\n        this.setState({messages: array})\r\n\r\n        await this.props.solidCommunicator.declineFriendSchipRequest(message);\r\n    }\r\n\r\n    acceptFriendShipRequest = async (index, message) => {\r\n        let array = this.state.messages;\r\n        array.splice(index, 1);\r\n        this.setState({messages: array})\r\n\r\n        await this.props.solidCommunicator.acceptFriendSchipRequest(message);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.solidCommunicator.getInboxContents().then(res => {\r\n            this.setState({messages : res})\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let items = this.state.messages.map((message, index)=> {\r\n            let buttonDiv;\r\n            \r\n            if(message.type === \"FriendshipRequest\"){\r\n                buttonDiv = (<div className = \"buttonDiv\">\r\n                    <button onClick = {() => this.declineFriendShipRequest(index,message)}>Decline</button>\r\n                    <button onClick = {() => this.acceptFriendShipRequest(index, message)}>Accept</button>\r\n                </div>)\r\n            }\r\n\r\n            return (<li key = {message.url}>\r\n                <h4>{message.type}</h4>\r\n                <p>from : {message.from}</p>\r\n                <p>{message.description}</p>\r\n                {buttonDiv}\r\n            </li>)\r\n        })\r\n\r\n        return(\r\n            <section className = \"inbox\">\r\n                <h1>\r\n                    Inbox\r\n                </h1>\r\n\r\n                <ul>\r\n                    {items}\r\n                </ul>\r\n                \r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inbox;\r\n","import React from 'react';\r\n\r\nclass BeerDetailScreen extends React.Component{\r\n\r\n    render(){\r\n\r\n        return(\r\n            <h1>\r\n               {this.props.match.params.id}\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerDetailScreen;\r\n","import React from 'react';\r\n\r\nimport {Switch, Route, withRouter, Redirect} from \"react-router-dom\";\r\n\r\n\r\n/**\r\n * Imported Pages\r\n */\r\nimport Home from './page/Home'\r\nimport LogIn from './page/LogIn'\r\nimport Groups from './page/Groups';\r\nimport Friends from './page/Friends';\r\nimport FriendsPage from './page/FriendPage';\r\nimport CheckIns from './page/CheckIns';\r\nimport BeerResults from './page/BeerResults';\r\nimport Profile from './page/Profile';\r\nimport UserPage from './page/User';\r\nimport Inbox from './page/Inbox';\r\nimport BeerDetailScreen from './page/BeerDetailScreen';\r\n\r\nclass AppRoutes extends React.Component{\r\n    render(){\r\n  \t  return(\r\n         <Switch>\r\n              <Route exact path=\"/\" component={Home} isLoggedIn = {this.props.loggedIn} solidCommunicator = {this.props.solidCommunicator}/>\r\n              <PrivateRoute path=\"/user\" component={UserPage} isLoggedIn = {this.props.loggedIn} solidCommunicator = {this.props.solidCommunicator}/> \r\n              <PrivateRoute path=\"/beer/:id\" component={BeerDetailScreen} isLoggedIn = {this.props.loggedIn}/> \r\n              <PrivateRoute exact path=\"/friend\" component={Friends} isLoggedIn = {this.props.loggedIn} user = {this.props.userObject} solidCommunicator = {this.props.solidCommunicator}/>\r\n              <PrivateRoute path=\"/friend/:id\" component={FriendsPage} isLoggedIn = {this.props.loggedIn} user = {this.props.userObject}/>\r\n              <PrivateRoute path=\"/beerresults\" component={BeerResults} isLoggedIn = {this.props.loggedIn} onLinkClick = {this.props.clearSearchQuery}/>\r\n              <PrivateRoute path=\"/groups\" component={Groups} isLoggedIn = {this.props.loggedIn}/>\r\n              <PrivateRoute path='/profile' component={Profile} isLoggedIn = {this.props.loggedIn} user = {this.props.userObject}/>\r\n              <PrivateRoute path='/checkIns' component={CheckIns} isLoggedIn = {this.props.loggedIn}/>\r\n              <PrivateRoute path='/inbox' component={Inbox} isLoggedIn = {this.props.loggedIn} solidCommunicator = {this.props.solidCommunicator}/>\r\n              <PrivateRouteLogIn path=\"/login\" component={LogIn} isLoggedIn = {this.props.loggedIn} onLoggedIn = {this.props.onLoggedIn}/>\r\n          </Switch>)\r\n    }\r\n}\r\n\r\nconst PrivateRoute = ({ component: Component, isLoggedIn ,...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n      isLoggedIn\r\n      ?   <Component {...props} {...rest}/>\r\n      : <Redirect to='/' />\r\n    )} />\r\n  )\r\n  \r\n  const PrivateRouteLogIn = ({ component: Component, isLoggedIn, onLoggedIn ,...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n      !isLoggedIn\r\n        ? <Component onLoggedIn = {onLoggedIn} {...props} />\r\n        : <Redirect to='/profile' />\r\n    )} />\r\n  )\r\n\r\nexport default withRouter(AppRoutes);","import React from 'react';\r\nimport '../css/AclErrorPage.scss';\r\n\r\nclass AclErrorPage extends React.Component{\r\n    render(){\r\n        return (<section className = \"aclErrorPage\">\r\n            <h1>\r\n             The application does not have correct access. please give the application read, write, append and control access. \r\n            </h1>\r\n        </section>)\r\n    }\r\n}\r\n\r\nexport default AclErrorPage;","import React from 'react';\r\nimport '../css/FetchingPage.scss';\r\n\r\nclass FetchingPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className= \"rendering\">\r\n                <h1>Fetching data</h1>\r\n                <div id=\"fetchinAnimation\"></div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FetchingPage;","class User {\r\n    constructor(uri){\r\n        this._uri = uri\r\n\r\n        this._name = undefined;\r\n        this._imageUrl = undefined;\r\n        this._beginDate = undefined;\r\n        this._beerPoints = 0;\r\n        this._friends = [];\r\n        this._applicationLocation = undefined;\r\n\r\n        //mvc\r\n        this._subscribers = [];\r\n    }\r\n\r\n    upDateSubScribers(){\r\n        this._subscribers.map(subscriber => subscriber.update());\r\n    }\r\n\r\n    subscribe(subscriber){\r\n        this._subscribers.push(subscriber);\r\n    } \r\n\r\n    unsubscribe(subscriber){\r\n        this._subscribers.filter(subscriberList  => {\r\n            return subscriberList !== subscriber;\r\n        });\r\n    }\r\n\r\n    addFriends(newFriends){\r\n        this._friends = this._friends.concat(newFriends)\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    addFriend(newFriend){\r\n        this._friends.push(newFriend);\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    setName(name){\r\n        this._name = name;\r\n    }\r\n\r\n    setImageUrl(imageUrl){\r\n        this._imageUrl = imageUrl;\r\n    }\r\n\r\n    setBeerPoints(beerPoints){\r\n        this._beerPoints = beerPoints;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    setBeginDate(beginDate){\r\n        this._beginDate = beginDate;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    setApplicationLocation(applicationLocation){\r\n        this._applicationLocation = applicationLocation;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getWebId(){\r\n        return this._uri;\r\n    }\r\n\r\n    getFriends(){\r\n        return this._friends;\r\n    }\r\n\r\n    getFriendFromIndex(index){\r\n        return this._friends[index];\r\n    }\r\n\r\n    getBeginDate(){\r\n        return  new Date(this._beginDate.getTime());\r\n    }\r\n\r\n    getImageUrl(){\r\n        return this._imageUrl;\r\n    }\r\n\r\n    getName(){\r\n        return this._name;\r\n    }\r\n\r\n    getBeerPoints(){\r\n        return this._beerPoints;\r\n    }\r\n\r\n    getApplicationLocation(){\r\n        return this._applicationLocation;\r\n    }\r\n\r\n}\r\n\r\nexport default User;","/**\n * Libs\n */\nimport React from 'react';\nimport solidAuth from 'solid-auth-client'\nimport { Link, withRouter } from \"react-router-dom\";\nimport SolidCommunicator from './solid/SolidCommunicator'\n\n\n/**\n * Components\n */\nimport NavBar from './component/NavBar';\nimport AppRoutes from './routes/AppRoutes'\nimport AclErrorPage from './routes/extrapage/AclErrorPage'\nimport FetchingPage from './routes/extrapage/FetchingPage'\n\n/**\n * Errors\n */\nimport AccessError from './error/AccessError'\n\n/**\n * Assests\n */\nimport './css/App.scss';\nimport Knipsel from './assets/Knipsel.png'\nimport Logo from './assets/logo.png'\nimport User from './model/User';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      searchQuery: '',\n      userObject: undefined,\n      solidCommunicator: undefined,\n      accessError: false,\n      fetchingFiles: false\n    }\n  }\n\n  componentDidMount() {\n    this.checkLoggedIn();\n  }\n\n  update = () => {\n    this.setState({\n      update: true\n    })\n  }\n\n  clearSearchQuery = () => {\n    this.setState({\n      searchQuery: ''\n    })\n  }\n\n  checkLoggedIn = async () => {\n    let session = await solidAuth.currentSession();\n    //TODO error handling\n\n    if (session) {\n      this.setState({\n        fetchingFiles: true\n      });\n\n      //make new user\n      let user = new User(session.webId);\n      user.subscribe(this);\n\n      try {\n        let solidCommunicator = await SolidCommunicator.build(user);\n\n        this.setState({\n          userObject: user,\n          solidCommunicator: solidCommunicator,\n          loggedIn: true,\n          fetchingFiles: false\n        })\n\n        this.props.history.push(`/`)\n\n      } catch (e) {\n        if (e instanceof AccessError) {\n          this.setState({\n            accessError: true,\n            fetchingFiles: false\n          })\n        } else {\n          throw e; // let others bubble up\n        }\n      }\n    }\n  }\n\n\n  onClickLogOut = () => {\n    solidAuth.logout();\n\n    this.setState({\n      loggedIn: false,\n      userObject: undefined,\n      accessError : false\n    });\n  }\n\n  onLoggedIn = () => {\n    this.checkLoggedIn();\n  }\n\n  onBeerSearch = (text) => {\n    let location = this.props.location.pathname;\n\n    this.setState({\n      searchQuery: text\n    })\n\n    if (text) {\n      if (location !== \"/beerresults\") {\n        this.props.history.push(\"/beerresults\");\n      }\n\n      /**\n       * Vindt hier de bier\n       */\n    } else {\n      this.props.history.goBack();\n    }\n  }\n\n\n  render() {\n    let navBar;\n    let app;\n\n    if(this.state.fetchingFiles){\n      navBar = (\n        <NavBar onSearchBarButtonClick={this.onSearchBarButtonClick}>\n          <Link to=\"/\" onClick={this.onClickLogOut}></Link>\n        </NavBar>)\n    }else if(this.state.accessError){\n      navBar = (\n        <NavBar onSearchBarButtonClick={this.onSearchBarButtonClick}>\n          <Link to=\"/\" onClick={this.onClickLogOut}>Log out</Link>\n        </NavBar>)\n    } else if (this.state.loggedIn) {\n      navBar = (\n        <NavBar onSearchBarButtonClick={this.onSearchBarButtonClick}\n          onBeerSearch={this.onBeerSearch}\n          loggedIn={this.state.loggedIn}\n          searchQuery={this.state.searchQuery}>\n          <Link to=\"/profile\">Profile</Link>\n          <Link to=\"/checkIns\">Check ins</Link>\n          <Link to=\"/friend\">Friends</Link>\n          <Link to=\"/groups\">Groups</Link>\n          <Link to=\"/inbox\">Inbox</Link>\n          <Link to=\"/\" onClick={this.onClickLogOut}>Log out</Link>\n        </NavBar>\n      )\n    } else {\n      navBar = (\n        <NavBar onBeerSearch={this.onBeerSearch} loggedIn={this.state.loggedIn}>\n          <Link to=\"/LogIn\">Log in</Link>\n        </NavBar>\n      )\n    }\n\n    if(this.state.fetchingFiles){\n      app = (<FetchingPage/>);\n    }else if (this.state.accessError) {\n      app = (<AclErrorPage/>);  \n    } else {\n      app = (<AppRoutes\n        loggedIn={this.state.loggedIn}\n        userObject={this.state.userObject}\n        solidCommunicator={this.state.solidCommunicator}\n        clearSearchQuery={this.clearSearchQuery}\n        onLoggedIn={this.onLoggedIn}\n      />)\n    }\n\n    return (\n      <div id=\"AppRoot\">\n        <header>\n          <Link to=\"/\">\n            <div>\n              <img src={Logo} alt=\"\" />\n              <h1>\n                Linked social beer\n              </h1>\n            </div>\n          </Link>\n        </header>\n\n        {navBar}\n        {app}\n        <footer>\n          <span>\n            This application is powered by\n            </span>\n          <a href=\"https://solid.inrupt.com\">\n            <img alt=\"Solid inrupt\" src={Knipsel} />\n          </a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profilePic.b6681619.png\";"],"sourceRoot":""}