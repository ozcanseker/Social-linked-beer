{"version":3,"sources":["assets/profilePic.png","assets/logo.png","../node_modules/@trust/webcrypto/src/algorithms sync","model/User.js","network/PodFolderBuilder.js","network/SolidCommunicatorBuilder.js","network/SolidCommunicator.js","page/Home.js","page/LogIn.js","page/Groups.js","page/Friends.js","page/FriendPage.js","page/CheckIns.js","page/BeerResults.js","page/Profile.js","page/User.js","component/NavBar.js","page/BeerDetailScreen.js","App.js","serviceWorker.js","index.js","assets/Knipsel.png"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","User","uri","this","_uri","subscribers","subscriber","push","friends","index","fileClient","require","authClient","rdflib","SOLID","Namespace","VCARD","TERMS","RDF","SOLIDLINKEDBEER","FOAF","ACL","appName","buildFolders","publicProfileIndex","storePublicProfileIndex","storagePublic","app","webId","a","createAppNodeForPublicTypeIndex","applocation","makeAppFolderStructure","checkFolderIntegrity","console","log","store","publicTypeIndex","publicLocation","findEmptyFolder","appLocation","appLocationNN","sym","add","serialize","undefined","value","newTTLpublicTypeindex","putSolidFile","fetch","status","makeRandomString","length","result","characters","charactersLength","i","charAt","Math","floor","random","appFolderUrl","aclUrl","createFolder","body","getAclAppFolder","beerDrinkerUrl","getFriendsFile","friendsUrl","postSolidFile","getAppDataInit","getACLInboxFolder","inboxUrl","inboxUrlacl","reviewUrlacl","reviewUrl","getACLCheckInFolder","url","graph","bn","blankNode","Date","appUrl","webIdUserLoggedIn","owner","agent","urlFile","friendsgroup","friendsgroupRequested","_public","inbox","ciUrl","group1","ci","fgroup1","fgroup2","folder","filename","method","headers","rdfLib","PIM","buildSolidCommunicator","user","returnObject","webIdNN","getWebId","getUserCard","storeProfileCard","getPPILocation","ppiObject","getStorePublic","getApplicationLocation","ppi","webIdUrl","profileCardTTl","parse","profile","any","storePublicTypeIndex","publicTypeIndexTTL","appQuery","$rdf","SolidCommunicator","subscribe","solidCommunicator","Home","className","src","Knipsel","alt","style","color","React","Component","LogIn","props","onChangeCheckBox","setState","loginAsBrewer","state","onButtonClick","solidAuth","popupLogin","popupUri","then","currentSession","session","onLoggedIn","history","typeLogIn","type","onChange","onClick","href","Groups","Friends","inputText","target","getUserFile","res","error","pathname","friendsElements","getFriends","map","friend","key","to","name","placeholder","FriendPage","getFriendFromIndex","match","params","BeerResults","list","elements","listItem","onLinkClick","Profile","imageUrl","profilePic","beerPoints","startDate","toString","location","NavBar","onInput","onBeerSearch","input","cldn","Children","toArray","children","child","loggedIn","searchQuery","onSearchBarButtonClick","BeerDetailScreen","App","clearSearchQuery","checkLoggedIn","build","obj","userObject","onClickLogOut","logout","text","goBack","navBar","Logo","exact","path","component","isLoggedIn","UserPage","FriendsPage","CheckIns","Inbox","PrivateRoute","rest","render","PrivateRouteLogIn","withRouter","Boolean","window","hostname","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,wC,wCCA3CD,EAAOC,QAAU,IAA0B,kC,wNCA3C,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBO,GAAK,K,+YCiBVC,E,WAxBX,WAAYC,GAAK,oBACbC,KAAKC,KAAOF,EAGZC,KAAKE,YAAc,G,sDAGbC,GACNH,KAAKE,YAAYE,KAAKD,K,iCAItB,OAAOH,KAAKC,O,mCAIZ,OAAOD,KAAKK,U,yCAGGC,GACf,OAAON,KAAKK,QAAQC,O,KCrBtBC,EAAaC,EAAQ,KACrBC,EAAaD,EAAQ,IACrBE,EAASF,EAAQ,KAEjBG,EAAQD,EAAOE,UAAW,qCAC1BC,EAAQH,EAAOE,UAAU,oCACzBE,EAAQJ,EAAOE,UAAU,6BACzBG,EAAML,EAAOE,UAAU,+CACvBI,EAAkBN,EAAOE,UAAU,kDACnCK,EAAOP,EAAOE,UAAU,8BACxBM,EAAMR,EAAOE,UAAU,kCAEvBO,EAAU,mBAET,SAAeC,EAAtB,0C,4CAAO,WAA4BC,EAAoBC,EAAyBC,EAAeC,EAAKC,GAA7F,eAAAC,EAAA,sEAEmBC,EAAgCL,EAAyBD,EAAoBE,EAAeC,GAF/G,cAEDI,EAFC,gBAGCC,EAAuBD,EAAaH,GAHrC,gCAKEG,GALF,4C,sBAQA,SAAeE,IAAtB,+B,4CAAO,sBAAAJ,EAAA,sDAEHK,QAAQC,IAAI,6BAFT,4C,+BAKQL,E,oFAAf,WAA+CM,EAAOC,EAAiBC,EAAgBX,GAAvF,mBAAAE,EAAA,sEAC4BU,EAAgBD,GAD5C,cACQE,EADR,OAGQC,EAAgB5B,EAAO6B,IAAIF,GAE/BJ,EAAMO,IAAIN,EAAiBpB,EAAM,cAAeU,GAChDS,EAAMO,IAAIhB,EAAKT,EAAI,QAASJ,EAAM,qBAClCsB,EAAMO,IAAIhB,EAAKb,EAAM,YAAa2B,GAPtC,SASsC5B,EAAO+B,eAAUC,EAAWT,EAAOC,EAAgBS,MAAO,eAThG,cASQC,EATR,iBAUUC,EAAaX,EAAgBS,MAAOC,GAV9C,iCAYWP,GAZX,6C,+BAeeD,E,8EAAf,WAA+BD,GAA/B,eAAAT,EAAA,6DAGMW,EAAcF,EAAiBhB,EAAU,IAH/C,SAKkBV,EAAWqC,MAAMT,GALnC,mBAMSU,OAAS,IAAM,KANxB,yCAOWV,GAPX,gCASWA,EAAcF,EAAiBhB,EAAU6B,EAAiB,IAAK,KAT1E,4C,sBAaA,SAASA,EAAiBC,GAIxB,IAHA,IAAIC,EAAmB,GACnBC,EAAmB,iEACnBC,EAAmBD,EAAWF,OACxBI,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BH,GAAUC,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAE1D,OAAOF,E,SAQMrB,E,gFAAf,WAAsC6B,EAAcjC,GAApD,6BAAAC,EAAA,6DAIMiC,EAASD,EAAe,OAJ9B,SAMQnD,EAAWqD,aAAaF,GANhC,cAOEG,EAAOC,EAAgBJ,EAAcC,EAAQlC,GAP/C,SAQQoB,EAAac,EAASE,GAR9B,cAWME,EAAiBL,EAAe,eAXtC,SAYQnD,EAAWqD,aAAaG,GAZhC,cAgBEF,EAAOG,EADHC,EAAaF,EAAiB,cACAtC,GAhBpC,UAkBQyC,EAAcH,EAAgB,UAAWF,GAlBjD,eAsBEA,EAAOM,EADWJ,EAAiB,eArBrC,UAuBQG,EAAcH,EAAe,UAAWF,GAvBhD,eA4BEA,EAAOO,EAFHC,EAAWN,EAAiB,SAC5BO,EAAcD,EAAW,OACmB5C,GA5BlD,UA8BQlB,EAAWqD,aAAaS,GA9BhC,yBA+BQxB,EAAayB,EAAaT,GA/BlC,eAmCMU,GADAC,EAAYT,EAAiB,aACF,OAnCjC,UAqCQxD,EAAWqD,aAAaY,GArChC,eAsCEX,EAAOY,EAAoBD,EAAWD,EAAc9C,EAAOwC,GAtC7D,UAuCQpB,EAAa0B,EAAcV,GAvCnC,6C,sBA2CA,SAASM,EAAeO,GACtB,IAAIC,EAAQjE,EAAOiE,QAEfC,EAAKlE,EAAOmE,YAMhB,OAJAF,EAAMnC,IAAIoC,EAAI5D,EAAgB,aAAc,IAAI8D,MAChDH,EAAMnC,IAAIoC,EAAI5D,EAAgB,UAAW,GAE/BN,EAAO+B,eAAUC,EAAWiC,EAAOD,EAAK,eAIpD,SAASZ,EAAgBiB,EAAQpB,EAAQqB,GACvC,IAAIL,EAAQjE,EAAOiE,QACfM,EAAQvE,EAAO6B,IAAIoB,EAAS,UAC5BnC,EAAMd,EAAO6B,IAAIwC,GACjBG,EAAQxE,EAAO6B,IAAIyC,GAYvB,OAVAL,EAAMnC,IAAIyC,EAAOlE,EAAI,QAASG,EAAI,kBAElCyD,EAAMnC,IAAIyC,EAAO/D,EAAI,YAAaM,GAClCmD,EAAMnC,IAAIyC,EAAO/D,EAAI,WAAYM,GACjCmD,EAAMnC,IAAIyC,EAAO/D,EAAI,SAAUgE,GAE/BP,EAAMnC,IAAIyC,EAAO/D,EAAI,QAASA,EAAI,YAClCyD,EAAMnC,IAAIyC,EAAO/D,EAAI,QAASA,EAAI,SAClCyD,EAAMnC,IAAIyC,EAAO/D,EAAI,QAASA,EAAI,UAE3BR,EAAO+B,eAAUC,EAAWiC,EAAOhB,EAAQ,eAGpD,SAASK,EAAemB,EAAS1D,GAC/B,IAAIkD,EAAQjE,EAAOiE,QAEfS,EAAe1E,EAAO6B,IAAI4C,EAAU,YACpCE,EAAwB3E,EAAO6B,IAAI4C,EAAU,qBAQjD,OANAR,EAAMnC,IAAI4C,EAAcrE,EAAI,QAASF,EAAM,UAC3C8D,EAAMnC,IAAI4C,EAAcvE,EAAM,UAAWH,EAAO6B,IAAI,0DAEpDoC,EAAMnC,IAAI6C,EAAuBtE,EAAI,QAASF,EAAM,UACpD8D,EAAMnC,IAAI6C,EAAuBxE,EAAM,UAAWH,EAAO6B,IAAI,0DAEtD7B,EAAO+B,eAAUC,EAAWiC,EAAOQ,EAAS,eAGrD,SAASf,EAAkBC,EAAUV,EAAQqB,GAC3C,IAAIL,EAAQjE,EAAOiE,QACfM,EAAQvE,EAAO6B,IAAIoB,EAAS,UAC5B2B,EAAU5E,EAAO6B,IAAIoB,EAAS,WAC9B4B,EAAQ7E,EAAO6B,IAAI8B,GACnBa,EAAQxE,EAAO6B,IAAIyC,GAsBvB,OAnBAL,EAAMnC,IAAIyC,EAAOlE,EAAI,QAASG,EAAI,kBAElCyD,EAAMnC,IAAIyC,EAAO/D,EAAI,YAAaqE,GAClCZ,EAAMnC,IAAIyC,EAAO/D,EAAI,WAAYqE,GACjCZ,EAAMnC,IAAIyC,EAAO/D,EAAI,SAAUgE,GAE/BP,EAAMnC,IAAIyC,EAAO/D,EAAI,QAASA,EAAI,YAClCyD,EAAMnC,IAAIyC,EAAO/D,EAAI,QAASA,EAAI,SAClCyD,EAAMnC,IAAIyC,EAAO/D,EAAI,QAASA,EAAI,UAGlCyD,EAAMnC,IAAI8C,EAASvE,EAAI,QAASG,EAAI,kBAEpCyD,EAAMnC,IAAI8C,EAASpE,EAAI,YAAaqE,GACpCZ,EAAMnC,IAAI8C,EAASpE,EAAI,WAAYqE,GACnCZ,EAAMnC,IAAI8C,EAASpE,EAAI,cAAeD,EAAK,UAE3C0D,EAAMnC,IAAI8C,EAASpE,EAAI,QAASA,EAAI,WAE7BR,EAAO+B,eAAUC,EAAWiC,EAAOhB,EAAQ,eAGpD,SAASc,EAAoBe,EAAO7B,EAAQqB,EAAmBf,GAC7D,IAAIU,EAAQjE,EAAOiE,QACfM,EAAQvE,EAAO6B,IAAIoB,EAAS,UAC5B8B,EAAS/E,EAAO6B,IAAIoB,EAAS,YAC7B+B,EAAKhF,EAAO6B,IAAIiD,GAChBN,EAAQxE,EAAO6B,IAAIyC,GAGnBW,EAAUjF,EAAO6B,IAAI0B,EAAa,YAClC2B,EAAUlF,EAAO6B,IAAI0B,EAAa,qBAwBtC,OArBAU,EAAMnC,IAAIyC,EAAOlE,EAAI,QAASG,EAAI,kBAElCyD,EAAMnC,IAAIyC,EAAO/D,EAAI,YAAawE,GAClCf,EAAMnC,IAAIyC,EAAO/D,EAAI,WAAYwE,GACjCf,EAAMnC,IAAIyC,EAAO/D,EAAI,SAAUgE,GAE/BP,EAAMnC,IAAIyC,EAAO/D,EAAI,QAASA,EAAI,YAClCyD,EAAMnC,IAAIyC,EAAO/D,EAAI,QAASA,EAAI,SAClCyD,EAAMnC,IAAIyC,EAAO/D,EAAI,QAASA,EAAI,UAGlCyD,EAAMnC,IAAIiD,EAAQ1E,EAAI,QAASG,EAAI,kBAEnCyD,EAAMnC,IAAIiD,EAAQvE,EAAI,YAAawE,GACnCf,EAAMnC,IAAIiD,EAAQvE,EAAI,WAAYwE,GAElCf,EAAMnC,IAAIiD,EAAQvE,EAAI,cAAeyE,GACrChB,EAAMnC,IAAIiD,EAAQvE,EAAI,cAAe0E,GAErCjB,EAAMnC,IAAIiD,EAAQvE,EAAI,QAASA,EAAI,WAE5BR,EAAO+B,eAAUC,EAAWiC,EAAOhB,EAAQ,e,SAGrCO,E,kFAAf,WAA6B2B,EAAQC,EAAWjC,GAAhD,SAAAnC,EAAA,sDACEjB,EAAWqC,MAAM+C,EAAQ,CACvBE,OAAQ,OACRC,QAAS,CACP,eAAgB,cAChB,KAAQ,kDACR,KAASF,GAEXjC,KAAOA,IARX,4C,+BAYehB,E,gFAAf,WAA4B6B,EAAKb,GAAjC,SAAAnC,EAAA,sDACEjB,EAAWqC,MAAM4B,EAAK,CAClBqB,OAAQ,MACRC,QAAS,CACP,eAAgB,eAElBnC,KAAMA,IANZ,4C,sBC3OA,IAAMtD,EAAaC,EAAQ,KAErByF,IADazF,EAAQ,IACZA,EAAQ,MAEjBG,GAAQsF,GAAOrF,UAAW,qCAO1BsF,IANQD,GAAOrF,UAAU,oCACjBqF,GAAOrF,UAAU,6BACnBqF,GAAOrF,UAAU,+CACLqF,GAAOrF,UAAU,kDAC5BqF,GAAOrF,UAAU,8BAClBqF,GAAOrF,UAAU,kCACjBqF,GAAOrF,UAAU,oCAGtB,SAAeuF,GAAtB,mC,8CAAO,WAAsCC,GAAtC,uBAAA1E,EAAA,6DACC2E,EAAe,GAIbC,EAAUL,GAAO1D,IAAI6D,EAAKG,YAL7B,SAS0BC,GAAYF,EAAQvG,KAT9C,cASC0G,EATD,gBAamBC,GAAeJ,EAASG,GAb3C,cAaCE,EAbD,iBAiBuBC,GAAeN,EAASG,GAjB/C,eAiBClF,EAjBD,iBAqB6BsF,GAAuBF,EAAUG,IAAMH,EAAU1E,MAAOV,EAAe+E,EAAQ3D,OArB5G,wCA0BI0D,GA1BJ,6C,+BA6BQG,G,iFAAf,WAA2BO,GAA3B,iBAAArF,EAAA,sEACiCnB,EAAWuC,MAAMiE,GADlD,cACUC,EADV,OAEUP,EAAmBR,GAAOtB,QAChCsB,GAAOgB,MAAMD,EAAgBP,EAAkBM,EAAU,eAH7D,kBAKWN,GALX,4C,+BAQeC,G,mFAAf,WAA8BQ,EAAST,GAAvC,mBAAA/E,EAAA,6DACUL,EAAqBoF,EAAiBU,IAAID,EAASvG,GAAM,oBAEzDyG,EAAuBnB,GAAOtB,QAHxC,SAIqCpE,EAAWuC,MAAMzB,EAAmBsB,OAJzE,cAIU0E,EAJV,OAKIpB,GAAOgB,MAAMI,EAAoBD,EAAsB/F,EAAmBsB,MAAO,eALrF,kBAOW,CAACV,MAAQmF,EAAsBN,IAAMzF,IAPhD,4C,sBAUA,SAASuF,GAAeM,EAAST,GAE7B,OADsBA,EAAiBU,IAAID,EAAShB,GAAI,YACjCvD,MAAQ,U,SAGpBkE,G,uFAAf,WAAsCxF,EAAoBC,EAAyBC,EAAeE,GAAlG,iBAAAC,EAAA,yDACQF,EAAMyE,GAAO1D,IAAIlB,EAAmBsB,MAAQ,uBAC5C2E,EAAWhG,EAAwB6F,IAAI3F,EAAKb,GAAM,cAF1D,uBAKMmB,IALN,kBAMawF,EAAS3E,OANtB,uBAQgCvB,EAAaC,EAAoBC,EAAyBC,EAAeC,EAAKC,GAR9G,2D,sBC/DmBjB,EAAQ,KACRA,EAAQ,IAD3B,IAEM+G,GAAO/G,EAAQ,KAEP+G,GAAK3G,UAAW,qCAClB2G,GAAK3G,UAAU,mCACb2G,GAAK3G,UAAU,oCACf2G,GAAK3G,UAAU,6BACjB2G,GAAK3G,UAAU,+CACH2G,GAAK3G,UAAU,kDAC1B2G,GAAK3G,UAAU,8BAkCb4G,O,WA/BX,WAAYpB,GAAM,oBACdpG,KAAKoG,KAAOA,EACZA,EAAKqB,UAAUzH,M,gGAGAoG,G,8EACJD,GAAuBC,GAGhCsB,EAAoB,IAAIF,EAAkBpB,G,kBAEvC,CAACA,KAAMA,EAAMsB,kBAAmBA,I,6HCJ9BC,I,wLAlBP,OACI,6BAASC,UAAY,QACjB,+EACoD,6BADpD,+CAIA,6BACA,yBAAKC,IAAMC,KAASC,IAAM,gBAC1B,6BACA,wBAAIC,MAAS,CAACC,MAAQ,QAAtB,sK,GAZGC,IAAMC,YCoDVC,I,mBAlDX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAOVC,iBAAmB,WACf,EAAKC,SAAS,CACVC,eAAiB,EAAKC,MAAMD,iBAVlB,EAclBE,cAAgB,WAEZC,IAAUC,WAAW,CAAEC,SADR,iBACoBC,MAAK,WACpCH,IAAUI,iBAAiBD,MAAM,SAAAE,GAC7BjH,QAAQC,IAAIgH,GACZ,EAAKX,MAAMY,aACX,EAAKZ,MAAMa,QAAQ9I,KAAnB,mBAlBR2B,QAAQC,IAAIqG,GACZ,EAAKI,MAAQ,CACTD,eAAgB,GAJN,E,sEA0Bd,IAAIW,EASJ,OANIA,EADDnJ,KAAKyI,MAAMD,cACE,qCAEA,2CAKZ,6BAAS3I,GAAMG,KAAKyI,MAAMD,cAAgB,cAAgB,oBACtD,2BAAOZ,UAAU,UACb,2BAAOwB,KAAK,WAAWC,SAAWrJ,KAAKsI,mBACvC,0BAAMV,UAAU,YAGnBuB,EACD,4BAAQG,QAAWtJ,KAAK0I,eAAxB,UACA,2BAAG,uBAAGa,KAAM,sBAAT,kB,GA7CCrB,IAAMC,YCQXqB,G,iLARP,OACI,0C,GAJStB,IAAMC,WCmEZsB,G,YAjEX,WAAYpB,GAAO,IAAD,8BACd,4CAAMA,KAQVgB,SAAW,SAAC7J,GACR,EAAK+I,SAAS,CACVmB,UAAWlK,EAAEmK,OAAOhH,SAXV,EAelB+F,cAAgB,WACZ,EAAKL,MAAMX,kBAAkBkC,YAAY,EAAKnB,MAAMiB,WAAW,SAACG,EAAKC,GAE9DA,EACC,EAAKvB,SAAS,CACVuB,MAAQA,IAGZ,EAAKzB,MAAMa,QAAQ9I,KAAK,CACpB2J,SAAS,QACTtB,MAAM,CACFvF,OAAQ2G,SAvBxB,EAAKpB,MAAQ,CACTiB,UAAY,gDACZI,WAAQpH,GALE,E,sEAkCd,IACIsH,EADUhK,KAAKqI,MAAMjC,KAAK6D,aACAC,KAAI,SAACC,EAAQ7J,GACvC,OAAO,4BACH,kBAAC,IAAD,CAAM8J,IAAOD,EAAOpK,IAAKsK,GAAE,kBAAc/J,IACrC,qCACY6J,EAAOG,WAM/B,OACI,6BACI,uCAGA,6BACA,2BAAOlB,KAAO,OAAOmB,YAAa,mBAAmB5H,MAAS3C,KAAKyI,MAAMiB,UAAWL,SAAYrJ,KAAKqJ,WACrG,4BAAQC,QAAWtJ,KAAK0I,eAAxB,qBAEA,uBAAGV,MAAS,CAACC,MAAO,QAASjI,KAAKyI,MAAMqB,OAExC,4BACKE,Q,GA1DC9B,IAAMC,WCgBbqC,G,YAfX,WAAYnC,GAAO,qEACTA,I,sEAIN,IAAI8B,EAASnK,KAAKqI,MAAMjC,KAAKqE,mBAAmBzK,KAAKqI,MAAMqC,MAAMC,OAAO9K,IAExE,OACI,4BACKsK,EAAOG,U,GAVCpC,IAAMC,WCUhBsB,G,iLARP,OACI,6C,GAJUvB,IAAMC,WC2CbyC,I,mBAxCX,WAAYvC,GAAO,IAAD,8BACd,4CAAMA,KAEDwC,KAAO,CACR,CAACP,KAAM,cACP,CAACA,KAAM,cACP,CAACA,KAAM,cACP,CAACA,KAAM,cACP,CAACA,KAAM,cACP,CAACA,KAAM,cACP,CAACA,KAAM,cACP,CAACA,KAAM,cACP,CAACA,KAAM,cACP,CAACA,KAAM,eAbG,E,sEAkBT,IAAD,OACAQ,EAAW9K,KAAK6K,KAAKX,KAAI,SAAAa,GACrB,OACI,4BACI,kBAAC,IAAD,CAAMV,GAAK,kBAAkBf,QAAW,EAAKjB,MAAM2C,aAC9CD,EAAST,UAM9B,OACI,6BACI,4CACA,4BACKQ,Q,GAlCK5C,IAAMC,Y,8BCqCjB8C,G,iLAnCP,IAAI7E,EAAOpG,KAAKqI,MAAMjC,KAEtB,OACI,6BAASwB,UAAY,iBAEjB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,4BACKxB,EAAKkE,MAEV,yBAAKzC,IAAOzB,EAAK8E,SAAW9E,EAAK8E,SAAWC,KAAYpD,IAAM,KAC9D,0CACiB3B,EAAKgF,YAEtB,0CAGA,2CACkBhF,EAAKiF,UAAUC,YAEjC,qDAIJ,yBAAK1D,UAAU,UACX,wD,GA3BFM,IAAMC,WCebrI,G,iLAdPiC,QAAQC,IAAIhC,KAAKqI,OACjB,IAAInF,EAASlD,KAAKqI,MAAMkD,SAAS9C,MAAMvF,OAEvC,OACI,6BAAS0E,UAAY,QACjB,4BACK1E,EAAOoH,KACR,iE,GAVDpC,IAAMC,W,qBC4CVqD,I,kNA1CXC,QAAU,SAACjM,GACP,EAAK6I,MAAMqD,aAAalM,EAAEmK,OAAOhH,Q,wEAIjC,IACIgJ,EADAC,EAAM1D,IAAM2D,SAASC,QAAS9L,KAAKqI,MAAM0D,UA0B7C,OAvBAH,EAAOA,EAAK1B,KAAI,SAAC8B,EAAO1L,GACpB,OAAGA,IAAUsL,EAAK3I,OAAS,EAEnB,wBAAImH,IAAO4B,EAAM3D,MAAMgC,GAAIzC,UAAY,yBAClCoE,GAKL,wBAAI5B,IAAO4B,EAAM3D,MAAMgC,GAAIzC,UAAY,6BAClCoE,MAMdhM,KAAKqI,MAAM4D,WACVN,EAAS,wBAAI/D,UAAY,gBACrB,2BAAQ2C,YAAc,mBAAmB5H,MAAS3C,KAAKqI,MAAM6D,YAAa7C,SAAYrJ,KAAKyL,UAC3F,2BAAOrC,KAAO,SAASzG,MAAQ,IAAI2G,QAAWtJ,KAAKqI,MAAM8D,2BAK7D,6BACI,wBAAItM,GAAK,UACJ+L,EACAD,Q,GApCAzD,IAAMC,Y,8BCYZiE,G,iLARP,OAFArK,QAAQC,MAGJ,4BACIhC,KAAKqI,MAAMqC,MAAMC,OAAO9K,Q,GAPTqI,IAAMC,WCmC/BkE,G,YACJ,WAAYhE,GAAO,IAAD,8BAChB,4CAAMA,KAaRiE,iBAAmB,WACf,EAAK/D,SAAS,CACZ2D,YAAc,MAhBF,EAoBlBK,cAAgB,WACd5D,IAAUI,iBAAiBD,MAAM,SAAAE,GAC/B,GAAGA,EAAQ,CAGT,IAAI5C,EAAO,IAAItG,EAAKkJ,EAAQvH,OAC5B2E,EAAKqB,UAAL,gBAEAD,GAAkBgF,MAAMpG,GAAM0C,MAAK,SAAA2D,GACjC,EAAKlE,SAAS,CACZmE,WAAaD,EAAIrG,KACjBsB,kBAAoB+E,EAAI/E,kBACxBuE,UAAU,OAId,EAAK5D,MAAMa,QAAQ9I,KAAnB,iBApCY,EAyClBuM,cAAgB,WACdhE,IAAUiE,SAEV,EAAKrE,SAAS,CACZ0D,UAAW,EACXS,gBAAahK,KA9CC,EAkDlBuG,WAAa,WACX,EAAKsD,iBAnDW,EAsDlBb,aAAe,SAACmB,GACd,IAAItB,EAAW,EAAKlD,MAAMkD,SAASxB,SAEnC,EAAKxB,SAAS,CACZ2D,YAAcW,IAGbA,EACe,iBAAbtB,GACD,EAAKlD,MAAMa,QAAQ9I,KAAK,gBAO1B,EAAKiI,MAAMa,QAAQ4D,UApErB,EAAKrE,MAAQ,CACXwD,UAAW,EACXC,YAAc,GACdQ,gBAAYhK,EACZgF,uBAAoBhF,GANN,E,iFAWhB1C,KAAKuM,kB,+BAiEL,IAAIQ,EAuBJ,OApBEA,EADC/M,KAAKyI,MAAMwD,SAET,kBAAC,GAAD,CAAQE,uBAA0BnM,KAAKmM,uBAC/BT,aAAgB1L,KAAK0L,aACrBO,SAAYjM,KAAKyI,MAAMwD,SACvBC,YAAelM,KAAKyI,MAAMyD,aACjC,kBAAC,IAAD,CAAM7B,GAAK,YAAX,WACA,kBAAC,IAAD,CAAMA,GAAK,aAAX,aACA,kBAAC,IAAD,CAAMA,GAAK,WAAX,WACA,kBAAC,IAAD,CAAMA,GAAK,WAAX,UACA,kBAAC,IAAD,CAAMA,GAAK,IAAIf,QAAWtJ,KAAK2M,eAA/B,YAKD,kBAAC,GAAD,CAAQjB,aAAgB1L,KAAK0L,aAAcO,SAAYjM,KAAKyI,MAAMwD,UACjE,kBAAC,IAAD,CAAM5B,GAAK,UAAX,WAMJ,yBAAKxK,GAAK,WACR,gCACE,kBAAC,IAAD,CAAMwK,GAAK,KACT,6BACE,yBAAKxC,IAAMmF,KAAMjF,IAAM,KACvB,qDAOLgF,EACC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWxF,GAAMyF,WAAcpN,KAAKyI,MAAMwD,WAChE,kBAAC,GAAD,CAAciB,KAAK,QAAQC,UAAWE,GAAUD,WAAcpN,KAAKyI,MAAMwD,WACzE,kBAAC,GAAD,CAAciB,KAAK,YAAYC,UAAWf,GAAkBgB,WAAcpN,KAAKyI,MAAMwD,WACrF,kBAAC,GAAD,CAAciB,KAAK,cAAcC,UAAWG,GAAaF,WAAcpN,KAAKyI,MAAMwD,SAAU7F,KAAQpG,KAAKyI,MAAMiE,aAC/G,kBAAC,GAAD,CAAcO,OAAK,EAACC,KAAK,UAAUC,UAAW1D,GAAS2D,WAAcpN,KAAKyI,MAAMwD,SAAU7F,KAAQpG,KAAKyI,MAAMiE,WAAYhF,kBAAqB1H,KAAKyI,MAAMf,oBACzJ,kBAAC,GAAD,CAAcwF,KAAK,eAAeC,UAAWvC,GAAawC,WAAcpN,KAAKyI,MAAMwD,SAAUjB,YAAehL,KAAKsM,mBACjH,kBAAC,GAAD,CAAcY,KAAK,UAAUC,UAAW3D,GAAQ4D,WAAcpN,KAAKyI,MAAMwD,WACzE,kBAAC,GAAD,CAAciB,KAAK,WAAWC,UAAWlC,GAASmC,WAAcpN,KAAKyI,MAAMwD,SAAU7F,KAAQpG,KAAKyI,MAAMiE,aACxG,kBAAC,GAAD,CAAcQ,KAAK,YAAYC,UAAWI,GAAUH,WAAcpN,KAAKyI,MAAMwD,WAC7E,kBAAC,GAAD,CAAciB,KAAK,SAASC,UAAWK,KAAOJ,WAAcpN,KAAKyI,MAAMwD,WACvE,kBAAC,GAAD,CAAmBiB,KAAK,SAASC,UAAW/E,GAAOgF,WAAcpN,KAAKyI,MAAMwD,SAAUhD,WAAcjJ,KAAKiJ,cAE7G,gCACE,gEAGE,uBAAGM,KAAK,4BACR,yBAAKxB,IAAM,eAAeF,IAAKC,c,GApI3BI,IAAMC,WA4IlBsF,GAAe,SAAC,GAAD,IAActF,EAAd,EAAGgF,UAAsBC,EAAzB,EAAyBA,WAAeM,EAAxC,iDACnB,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OAAQ,SAACtF,GAAD,OACvB+E,EACI,kBAACjF,EAAD,iBAAeE,EAAWqF,IAC5B,kBAAC,IAAD,CAAUrD,GAAG,WAIbuD,GAAoB,SAAC,GAAD,IAAczF,EAAd,EAAGgF,UAAsBC,EAAzB,EAAyBA,WAAYnE,EAArC,EAAqCA,WAAeyE,EAApD,8DACxB,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OAAQ,SAACtF,GAAD,OACtB+E,EAEG,kBAAC,IAAD,CAAU/C,GAAG,aADb,kBAAClC,EAAD,eAAWc,WAAcA,GAAgBZ,SAKlCwF,eAAWxB,ICrLNyB,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAAStD,MACvB,2DCZNuD,IAASN,OACR,kBAAC,IAAD,CAAeO,SAAUC,uBACtB,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1F,MAAK,SAAA2F,GACjCA,EAAaC,iB,mBEnInBtP,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.a02c75db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilePic.b6681619.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.bc392ac4.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 424;","class User {\r\n    constructor(uri){\r\n        this._uri = uri\r\n\r\n        //mvc\r\n        this.subscribers = [];\r\n    }\r\n\r\n    subscribe(subscriber){\r\n        this.subscribers.push(subscriber);\r\n    }\r\n\r\n    getWebId(){\r\n        return this._uri;\r\n    }\r\n\r\n    getFriends(){\r\n        return this.friends;\r\n    }\r\n\r\n    getFriendFromIndex(index){\r\n        return this.friends[index];\r\n    }\r\n}\r\n\r\nexport default User;","const fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst rdflib = require('rdflib');\r\n\r\nconst SOLID = rdflib.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\nconst VCARD = rdflib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst TERMS = rdflib.Namespace('http://purl.org/dc/terms/');\r\nconst RDF = rdflib.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nconst SOLIDLINKEDBEER = rdflib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nconst FOAF = rdflib.Namespace('http://xmlns.com/foaf/0.1/');\r\nconst ACL = rdflib.Namespace(\"http://www.w3.org/ns/auth/acl#\");\r\n\r\nconst appName = \"sociallinkedbeer\";\r\n\r\nexport async function buildFolders(publicProfileIndex, storePublicProfileIndex, storagePublic, app, webId){\r\n  //TODO a whole lot of error checking. Checking for 400 error codes and stuff like that\r\n  let applocation = await createAppNodeForPublicTypeIndex(storePublicProfileIndex, publicProfileIndex, storagePublic, app);\r\n  await makeAppFolderStructure(applocation, webId);\r\n\r\n  return applocation;\r\n}\r\n\r\nexport async function checkFolderIntegrity(){\r\n    //TODO Check integrity\r\n    console.log(\"TODO checkFolderIntegrity\");\r\n}\r\n\r\nasync function createAppNodeForPublicTypeIndex(store, publicTypeIndex, publicLocation, app){\r\n    let appLocation = await findEmptyFolder(publicLocation);\r\n        \r\n    let appLocationNN = rdflib.sym(appLocation);\r\n    \r\n    store.add(publicTypeIndex, TERMS('references'), app);\r\n    store.add(app, RDF('type'), SOLID('TypeRegistration'));\r\n    store.add(app, SOLID('instance'), appLocationNN);\r\n    \r\n    let newTTLpublicTypeindex = await rdflib.serialize(undefined, store, publicTypeIndex.value, 'text/turtle');\r\n    await putSolidFile(publicTypeIndex.value, newTTLpublicTypeindex); \r\n \r\n    return appLocation;\r\n}\r\n\r\nasync function findEmptyFolder(publicLocation){\r\n  //TODO improve this. You can check if the other folder holds up to your standards. A lot of possibilities\r\n\r\n  let appLocation = publicLocation + appName + '/'\r\n\r\n  let res = await authClient.fetch(appLocation);\r\n  if(res.status % 400 < 100){\r\n    return appLocation;\r\n  }else{\r\n    return appLocation = publicLocation + appName + makeRandomString(10) +'/'\r\n  }\r\n}\r\n\r\nfunction makeRandomString(length) {\r\n  var result           = '';\r\n  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  var charactersLength = characters.length;\r\n  for ( var i = 0; i < length; i++ ) {\r\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} appFolderUrl \r\n * @param {string} webId \r\n */\r\nasync function makeAppFolderStructure(appFolderUrl, webId){\r\n  let body;\r\n    \r\n  //top folder\r\n  let aclUrl = appFolderUrl + '.acl';\r\n\r\n  await fileClient.createFolder(appFolderUrl);\r\n  body = getAclAppFolder(appFolderUrl, aclUrl, webId);\r\n  await putSolidFile(aclUrl , body);\r\n\r\n  //beerdrinker\r\n  let beerDrinkerUrl = appFolderUrl + \"beerdrinker/\";\r\n  await fileClient.createFolder(beerDrinkerUrl);\r\n\r\n  // friends\r\n  let friendsUrl = beerDrinkerUrl + 'friends.ttl';\r\n  body = getFriendsFile(friendsUrl, webId);\r\n\r\n  await postSolidFile(beerDrinkerUrl, 'friends' ,body);\r\n  \r\n  //appData \r\n  let appDataFile = beerDrinkerUrl + 'appdata.ttl';\r\n  body = getAppDataInit(appDataFile);\r\n  await postSolidFile(beerDrinkerUrl,'appdata' ,body);\r\n  \r\n  //inboxfolder\r\n  let inboxUrl = beerDrinkerUrl + 'inbox/';\r\n  let inboxUrlacl = inboxUrl + '.acl';   \r\n  body = getACLInboxFolder(inboxUrl, inboxUrlacl, webId);\r\n\r\n  await fileClient.createFolder(inboxUrl);\r\n  await putSolidFile(inboxUrlacl, body);\r\n\r\n  //check in folder        \r\n  let reviewUrl = beerDrinkerUrl + 'checkins/';\r\n  let reviewUrlacl = reviewUrl + '.acl';\r\n\r\n  await fileClient.createFolder(reviewUrl);\r\n  body = getACLCheckInFolder(reviewUrl, reviewUrlacl, webId, friendsUrl);\r\n  await putSolidFile(reviewUrlacl, body);                     \r\n}\r\n\r\n\r\nfunction getAppDataInit(url){\r\n  let graph = rdflib.graph();\r\n  \r\n  let bn = rdflib.blankNode();\r\n\r\n  graph.add(bn, SOLIDLINKEDBEER('startdate'), new Date());\r\n  graph.add(bn, SOLIDLINKEDBEER('points'), 0);\r\n\r\n  let ttl = rdflib.serialize(undefined, graph, url, 'text/turtle');\r\n  return ttl;\r\n}\r\n\r\nfunction getAclAppFolder(appUrl, aclUrl, webIdUserLoggedIn){\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let app = rdflib.sym(appUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n  \r\n  graph.add(owner, ACL('accessTo'), app);\r\n  graph.add(owner, ACL('default'), app);  \r\n  graph.add(owner, ACL('agent'), agent);\r\n \r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\nfunction getFriendsFile(urlFile, webId){\r\n  let graph = rdflib.graph();\r\n\r\n  let friendsgroup = rdflib.sym(urlFile + \"#Friends\");\r\n  let friendsgroupRequested = rdflib.sym(urlFile + \"#FriendsRequested\");\r\n\r\n  graph.add(friendsgroup, RDF('type'), VCARD('Group'));\r\n  graph.add(friendsgroup, VCARD('hasUID'), rdflib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:ABGroup\"));\r\n\r\n  graph.add(friendsgroupRequested, RDF('type'), VCARD('Group'));\r\n  graph.add(friendsgroupRequested, VCARD('hasUID'), rdflib.sym(\"urn:uuid:8831CBAD-1111-2222-8563-F0F4787E5398:CDGroup\"));\r\n\r\n  return rdflib.serialize(undefined, graph, urlFile, 'text/turtle');\r\n}\r\n\r\nfunction getACLInboxFolder(inboxUrl, aclUrl, webIdUserLoggedIn){\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let _public = rdflib.sym(aclUrl + \"#Public\");\r\n  let inbox = rdflib.sym(inboxUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n  \r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n  \r\n  graph.add(owner, ACL('accessTo'), inbox);\r\n  graph.add(owner, ACL('default'), inbox);  \r\n  graph.add(owner, ACL('agent'), agent);\r\n \r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(_public, RDF('type'), ACL('Authorization'));\r\n  \r\n  graph.add(_public, ACL('accessTo'), inbox);\r\n  graph.add(_public, ACL('default'), inbox);  \r\n  graph.add(_public, ACL('agentClass'), FOAF(\"Agent\"));\r\n \r\n  graph.add(_public, ACL('mode'), ACL('Append'));\r\n\r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\nfunction getACLCheckInFolder(ciUrl, aclUrl, webIdUserLoggedIn, friendsUrl){\r\n  let graph = rdflib.graph();\r\n  let owner = rdflib.sym(aclUrl + \"#Owner\");\r\n  let group1 = rdflib.sym(aclUrl + \"#Friends\");\r\n  let ci = rdflib.sym(ciUrl);\r\n  let agent = rdflib.sym(webIdUserLoggedIn);\r\n\r\n  //group who get acess\r\n  let fgroup1 = rdflib.sym(friendsUrl + \"#Friends\");\r\n  let fgroup2 = rdflib.sym(friendsUrl + \"#FriendsRequested\"); \r\n  \r\n  //owner\r\n  graph.add(owner, RDF('type'), ACL('Authorization'));\r\n  \r\n  graph.add(owner, ACL('accessTo'), ci);\r\n  graph.add(owner, ACL('default'), ci);  \r\n  graph.add(owner, ACL('agent'), agent);\r\n \r\n  graph.add(owner, ACL('mode'), ACL('Control'));\r\n  graph.add(owner, ACL('mode'), ACL('Read'));\r\n  graph.add(owner, ACL('mode'), ACL('Write'));\r\n\r\n  //public\r\n  graph.add(group1, RDF('type'), ACL('Authorization'));\r\n  \r\n  graph.add(group1, ACL('accessTo'), ci);\r\n  graph.add(group1, ACL('default'), ci);  \r\n\r\n  graph.add(group1, ACL('agentGroup'), fgroup1);\r\n  graph.add(group1, ACL('agentGroup'), fgroup2);\r\n\r\n  graph.add(group1, ACL('mode'), ACL('Append'));\r\n \r\n  return rdflib.serialize(undefined, graph, aclUrl, 'text/turtle');\r\n}\r\n\r\nasync function postSolidFile(folder, filename , body){\r\n  authClient.fetch(folder, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'text/turtle',\r\n      'Link': '<http://www.w3.org/ns/ldp#Resource>; rel=\"type\"',\r\n      'SLUG' : filename\r\n    },\r\n    body : body\r\n});\r\n}\r\n\r\nasync function putSolidFile(url, body){\r\n  authClient.fetch(url, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'text/turtle'      \r\n      },\r\n      body: body\r\n});\r\n}","import { buildFolders, checkFolderIntegrity } from './PodFolderBuilder'\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst rdfLib = require('rdflib');\r\n\r\nconst SOLID = rdfLib.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\nconst VCARD = rdfLib.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst TERMS = rdfLib.Namespace('http://purl.org/dc/terms/');\r\nconst RDF = rdfLib.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nconst SOLIDLINKEDBEER = rdfLib.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nconst FOAF = rdfLib.Namespace('http://xmlns.com/foaf/0.1/');\r\nconst ACL = rdfLib.Namespace(\"http://www.w3.org/ns/auth/acl#\");\r\nconst PIM = rdfLib.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\n\r\n\r\nexport async function buildSolidCommunicator(user){\r\n    let returnObject = {};\r\n\r\n    //make a named node of the session webid of the user\r\n    //namednode\r\n    const webIdNN = rdfLib.sym(user.getWebId());\r\n\r\n    //get a store of the profile card of the logged in user\r\n    //store\r\n    let storeProfileCard = await getUserCard(webIdNN.uri);\r\n     \r\n    //store for the Public Profile Index\r\n    //object with store and nn\r\n    let ppiObject = await getPPILocation(webIdNN, storeProfileCard);\r\n\r\n    //String that shows the location of the public storage of the pod\r\n    //string \r\n    let storagePublic = await getStorePublic(webIdNN, storeProfileCard);     \r\n\r\n    //locatie voor de applicatie\r\n    //string\r\n    let applicationLocation = await getApplicationLocation(ppiObject.ppi , ppiObject.store, storagePublic, webIdNN.value);\r\n\r\n    //  let friends = await getFriends(applicationLocation);\r\n    //  let appdata = await appData(applicationLocation);\r\n\r\n    return returnObject;\r\n}\r\n\r\nasync function getUserCard(webIdUrl){\r\n    const profileCardTTl = await fileClient.fetch(webIdUrl); \r\n    const storeProfileCard = rdfLib.graph(); \r\n    rdfLib.parse(profileCardTTl, storeProfileCard, webIdUrl, \"text/turtle\");\r\n    \r\n    return storeProfileCard;\r\n}\r\n\r\nasync function getPPILocation(profile, storeProfileCard){\r\n    const publicProfileIndex = storeProfileCard.any(profile, SOLID(\"publicTypeIndex\"));\r\n    \r\n    const storePublicTypeIndex = rdfLib.graph();\r\n    const publicTypeIndexTTL = await fileClient.fetch(publicProfileIndex.value);\r\n    rdfLib.parse(publicTypeIndexTTL, storePublicTypeIndex, publicProfileIndex.value, \"text/turtle\");\r\n    \r\n    return {store : storePublicTypeIndex, ppi : publicProfileIndex};\r\n}\r\n\r\nfunction getStorePublic(profile, storeProfileCard){\r\n    let locationStorage = storeProfileCard.any(profile, PIM(\"storage\"));\r\n    return locationStorage.value + \"public/\";\r\n}\r\n\r\nasync function getApplicationLocation(publicProfileIndex, storePublicProfileIndex, storagePublic, webId){\r\n    let app = rdfLib.sym(publicProfileIndex.value + \"#SocialLinkedBeer\");\r\n    let appQuery = storePublicProfileIndex.any(app, SOLID(\"instance\"));\r\n\r\n    if(appQuery){\r\n      checkFolderIntegrity();\r\n      return appQuery.value;\r\n    }else{\r\n        let applocation = await buildFolders(publicProfileIndex, storePublicProfileIndex, storagePublic, app, webId);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync function getUserFile(url, callBack){\r\n    let userttt = await fileClient.readFile(url);\r\n    let graph = rdfLib.graph();\r\n\r\n    try{\r\n      rdfLib.parse(userttt, graph, url, \"text/turtle\");\r\n\r\n      let query = graph.any(undefined, undefined, FOAF('PersonalProfileDocument'));\r\n\r\n      if(query){\r\n        let profile = rdfLib.sym(url);\r\n        let nameFN =  graph.any(profile,VCARD('fn'));\r\n        let imageURL =  graph.any(profile,VCARD('hasPhoto')); \r\n\r\n        nameFN = nameFN ? nameFN.value : undefined;\r\n        imageURL = imageURL ? imageURL.value : undefined;\r\n        \r\n        let result = {\r\n          userTTl: userttt,\r\n          url : url,\r\n          name: nameFN,\r\n          imageUrl : imageURL\r\n        }\r\n\r\n        callBack(result, false);\r\n      }else{\r\n        callBack(undefined, \"not a profile card\");\r\n      }\r\n\r\n    }catch(err){\r\n      callBack(undefined, \"Not a linked data file\");\r\n    }    \r\n  }\r\n\r\n   async function  appData(url){\r\n    let appdataLocation = url + 'appdata.ttl';\r\n\r\n    let appdatattl = await fileClient.readFile(appdataLocation);\r\n    let graph = rdfLib.graph();\r\n    rdfLib.parse(appdatattl, graph, appdataLocation, \"text/turtle\");\r\n\r\n    let blankNode = graph.any(undefined, SOLIDLINKEDBEER('startdate'));\r\n\r\n    let startdate = graph.any(blankNode, SOLIDLINKEDBEER('startdate'));\r\n    let points = graph.any(blankNode, SOLIDLINKEDBEER('points'));\r\n    \r\n    return {startdate: startdate.value, points: points.value}\r\n  }\r\n\r\n   async function getFriends(applicationLocation){\r\n    let friendsLocation = applicationLocation + \"friends.ttl\";\r\n    let ttlFriends = await fileClient.readFile(friendsLocation);\r\n    let group = rdfLib.sym(friendsLocation + \"#Friends\");\r\n\r\n    let friends = [];\r\n\r\n    let graph = rdfLib.graph();\r\n    rdfLib.parse(ttlFriends, graph, friendsLocation, \"text/turtle\");\r\n\r\n    let query = graph.each(group, VCARD('hasMember'), undefined); \r\n\r\n    for (let index = 0; index < query.length; index++) {\r\n      let friend = await this.fetchFriend(query[index]);\r\n      friends.push(friend);\r\n      console.log(friend);\r\n    }\r\n\r\n    return friends;\r\n  }\r\n\r\n//   async function fetchFriend(friendNamedNode){\r\n//     let friendttl = await fileClient.readFile(friendNamedNode.value);\r\n//     let graph = rdfLib.graph();\r\n//     rdfLib.parse(friendttl, graph, friendNamedNode.value, \"text/turtle\");\r\n\r\n//     let nameFN =  graph.any(friendNamedNode, VCARD('fn'));\r\n//     let imageURL =  graph.any(friendNamedNode, VCARD('hasPhoto')); \r\n\r\n//     nameFN = nameFN ? nameFN.value : undefined;\r\n//     imageURL = imageURL ? imageURL.value : undefined;\r\n\r\n//     return new Friend(friendNamedNode.value, nameFN, imageURL);\r\n//   }\r\n\r\n//   function makeUser(profile, storeProfileCard, friends, appdata){\r\n//       let nameFN =  storeProfileCard.any(profile,VCARD('fn'));\r\n//       let imageURL =  storeProfileCard.any(profile,VCARD('hasPhoto')); \r\n\r\n//       nameFN = nameFN ? nameFN.value : undefined;\r\n//       imageURL = imageURL ? imageURL.value : undefined;\r\n\r\n//       return new User(profile.value, nameFN, imageURL, friends, appdata.startdate , appdata.points);\r\n//   }\r\n\r\n ","import User from '../model/User'\r\nimport Friend from '../model/Friend'\r\nimport { buildFolders, checkFolderIntegrity } from './PodFolderBuilder'\r\nimport { buildSolidCommunicator } from './SolidCommunicatorBuilder'\r\n\r\nconst fileClient = require('solid-file-client');\r\nconst authClient = require('solid-auth-client');\r\nconst $rdf = require('rdflib');\r\n\r\nconst SOLID = $rdf.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\nconst PIM = $rdf.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\nconst VCARD = $rdf.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\r\nconst TERMS = $rdf.Namespace('http://purl.org/dc/terms/');\r\nconst RDF = $rdf.Namespace(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\r\nconst SOLIDLINKEDBEER = $rdf.Namespace('https://ozcanseker.inrupt.net/solidlinkedbeer#');\r\nconst FOAF = $rdf.Namespace('http://xmlns.com/foaf/0.1/');\r\n\r\nclass SolidCommunicator {\r\n    constructor(user){\r\n        this.user = user;\r\n        user.subscribe(this);\r\n    }\r\n\r\n    static async build(user){\r\n      let values = buildSolidCommunicator(user);\r\n      \r\n      //make new solidCommunicator\r\n      let solidCommunicator = new SolidCommunicator(user);\r\n\r\n      return {user: user, solidCommunicator: solidCommunicator};\r\n    }  \r\n\r\n   \r\n}\r\n\r\nasync function appendSolidResource(url, body){\r\n  authClient.fetch(url, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/sparql-update'\r\n    },\r\n    body : body\r\n  });\r\n\r\n    // let body = `INSERT DATA { <${this.state.webId+\"#comment\"}> <${SOLIDLINKEDBEER('points6').value}> <${8}> }`;\r\n    // let appDataFile;\r\n    // appendSolidResource(appDataFile, {body})\r\n}\r\n\r\nexport default SolidCommunicator;\r\n\r\n// export default SolidCommunicator;\r\n\r\n// const SOLID = $rdf.Namespace( \"http://www.w3.org/ns/solid/terms#\");\r\n\r\n// const BEERCOUNTER = $rdf.Namespace(\"https://ozcanseker.inrupt.net/vocabulary#\");\r\n// const PIM = $rdf.Namespace(\"http://www.w3.org/ns/pim/space#\");\r\n\r\n// let BEERCOUNTERRECORD = $rdf.sym(\"https://ozcanseker.inrupt.net/vocabulary#BeerCounterRecord\");\r\n\r\n// class SolidCommuncator{\r\n\r\n//     /**\r\n//      * \r\n//      * @param {string} webid \r\n//      * @param {string} applocation \r\n//      * @param {store:rdflib} appStore \r\n//      * @param {BeerCounter} beerCounter \r\n//      */\r\n//     constructor(webid, applocation, appStore, beerCounter){\r\n//         this.webid = webid;\r\n//         this.applocation = applocation;\r\n//         this.appStore = appStore;\r\n\r\n//         //subscribe to model\r\n//         this.beerCounter = beerCounter;\r\n//         this.beerCounter.subscribe(this);\r\n        \r\n//         //for the networking\r\n//         this.queryList = [];\r\n//         this.networking = false;\r\n//     }\r\n\r\n//     update(){\r\n//         let query = {\r\n//             date : this.beerCounter.getDateToday(),\r\n//             amount : this.beerCounter.getBeerCount()\r\n//         }\r\n\r\n//         this.queryList.push(query);\r\n\r\n//         if(!this.networking){\r\n//             this.startSendingFile();\r\n//         }\r\n//     }\r\n\r\n//     async startSendingFile(){\r\n//         this.networking = true;\r\n\r\n//         while(this.queryList.length > 0){\r\n//             let query = this.queryList.shift();\r\n//             let date = query.date;\r\n//             let blankNode = this.appStore.any(null, null, stringToDate(date));\r\n\r\n//             if(blankNode){\r\n//                 let statment = this.appStore.any(blankNode, RDF('value'), null);   \r\n//                 statment.value = query.amount + \"\";     \r\n//             }else{ \r\n//                 blankNode = $rdf.blankNode();\r\n//                 this.appStore.add(blankNode, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//                 this.appStore.add(blankNode, TERMS('created'), stringToDate(date));\r\n//                 this.appStore.add(blankNode, RDF('value'), query.amount);\r\n//             }\r\n//         }\r\n\r\n//         let appStoreTTL = await $rdf.serialize(undefined, this.appStore, 'text/turtle');\r\n//         console.log(this.applocation);\r\n//         await fileClient.updateFile(this.applocation, appStoreTTL);\r\n\r\n//         if(this.queryList.length > 0){\r\n//             this.startSendingFile();\r\n//         }else{\r\n//             this.networking = false;\r\n//         }\r\n//     }\r\n\r\n//     static async build(beerCounter){\r\n//         //get the session of the user logged in\r\n//         const session = await fileClient.checkSession();\r\n//         //make a named node of the session webid of the user\r\n//         const profile = $rdf.sym(session.webId);\r\n\r\n//         //get a store of the profile card of the logged in user\r\n//         let storeProfileCard = await this.getUserCard(session);\r\n        \r\n//         //store for the Public Profile Index\r\n//         let ppiObject = await this.getPPILocation(profile, storeProfileCard);\r\n\r\n//         //String that shows the location of the public storage of the pod\r\n//         let storagePublic = await this.getStorePublic(profile, storeProfileCard);        \r\n\r\n//         //Gets the location for the application or make a new enty in the Public profile index for the application.\r\n//         //also makes an empty file at the application location\r\n//         //string\r\n//         let applicationLocation = await this.getApplicationLocation(ppiObject.ppi , ppiObject.store, storagePublic);\r\n\r\n//         //get the application file in store form\r\n//         let appStore = await this.getAppStore(applicationLocation);\r\n\r\n//         //make a few example nodes to fill up the file\r\n//         //let newAppFile = await this.addExampleNodes(appStore, applicationLocation);\r\n//         //await fileClient.updateFile(applicationLocation.value, newAppFile);\r\n\r\n//         //update the model BeerCounter with data from the file.\r\n//         let map = this.getDatesAndCountsFromStore(appStore);\r\n//         beerCounter.setCountsPerDate(map);\r\n\r\n//         return new SolidCommuncator(session.webId, applicationLocation, appStore, beerCounter);\r\n//     }  \r\n\r\n//     static async getAppStore(applicationLocation){\r\n//         let appStore = $rdf.graph();\r\n//         let appTTL = await fileClient.fetch(applicationLocation);\r\n//         await $rdf.parse(appTTL, appStore, applicationLocation , \"text/turtle\");\r\n//         return appStore;\r\n//     }\r\n\r\n\r\n//    \r\n\r\n//     \r\n//     static getDatesAndCountsFromStore(store){\r\n//         let blankNodes = store.each(null , null, BEERCOUNTER('BeerCounterRecord'));\r\n//         let map = new Map();\r\n\r\n//         blankNodes.forEach(element => {\r\n//             let value = store.any(element, RDF('value'));\r\n//             let date = store.any(element, TERMS('created'));\r\n//             date = dateToString(new Date(date.value));\r\n\r\n//             map.set(date, value.value);\r\n//         });\r\n\r\n//         return map;\r\n//     }\r\n\r\n//    \r\n\r\n//     static async addExampleNodes(appStore, applocation){\r\n//         applocation = $rdf.sym(applocation);\r\n//         let bnode = $rdf.blankNode();\r\n//         let bnode1 = $rdf.blankNode();\r\n//         let bnode2 = $rdf.blankNode();\r\n//         let bnode3 = $rdf.blankNode();\r\n\r\n//         appStore.add(applocation, TERMS('references'), bnode);\r\n//         appStore.add(applocation, TERMS('references'), bnode1);\r\n//         appStore.add(applocation, TERMS('references'), bnode2);\r\n//         appStore.add(applocation, TERMS('references'), bnode3);\r\n\r\n//         appStore.add(bnode, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//         appStore.add(bnode, RDF('value'), 4);        \r\n//         appStore.add(bnode, TERMS('created'), stringToDate(\"17/09/2019\"));  \r\n\r\n//         appStore.add(bnode1, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//         appStore.add(bnode1, RDF('value'), 5);        \r\n//         appStore.add(bnode1, TERMS('created'), stringToDate(\"16/09/2019\"));  \r\n        \r\n//         appStore.add(bnode2, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//         appStore.add(bnode2, RDF('value'), 16);        \r\n//         appStore.add(bnode2, TERMS('created'), stringToDate(\"15/09/2019\"));  \r\n\r\n//         appStore.add(bnode3, RDF('type'), BEERCOUNTER('BeerCounterRecord'));\r\n//         appStore.add(bnode3, RDF('value'), 2);\r\n//         appStore.add(bnode3, TERMS('created'), stringToDate(\"14/09/2019\"));  \r\n\r\n//         // let query = appStore.each(undefined, undefined, BEERCOUNTER('BeerCounterRecord'));\r\n//         // let query2 = appStore.each(query[0], undefined);\r\n\r\n//         let newAppFile = await $rdf.serialize(undefined, appStore,'text/turtle');\r\n//         return newAppFile;\r\n//     }\r\n// }\r\n\r\n// function dateToString(date){\r\n//     var dd = String(date.getDate()).padStart(2, '0');\r\n//     var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n//     var yyyy = date.getFullYear();\r\n\r\n//     return dd + '/' + mm + '/' + yyyy;\r\n// }\r\n\r\n// function stringToDate(dateString){\r\n//     let array = dateString.split('/');\r\n//     let date = new Date(Date.UTC(array[2], array[1] - 1, array[0]));    \r\n//     return date;\r\n// }\r\n\r\n// export default SolidCommuncator;","import React from 'react';\r\nimport Knipsel from '../assets/Knipsel.png'\r\nimport '../css/Home.scss'\r\n\r\nclass Home extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <section className = \"home\">\r\n                <h3>\r\n                    This is an application that is powered by Solid.<br/> \r\n                    Log in with your pod to use the application\r\n                </h3>\r\n                <br/>\r\n                <img src= {Knipsel} alt = \"Inrupt logo\"/>\r\n                <br/>\r\n                <h3 style = {{color : \"red\"}}>\r\n                    Carefull, This application is still in development and might mess up your pod.\r\n                    if you want to test it out, i recommend you make a new pod that you can delete\r\n                </h3>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport '../css/LogIn.scss'\r\n\r\nimport solidAuth from 'solid-auth-client'\r\n\r\nclass LogIn extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {\r\n            loginAsBrewer : false\r\n        }\r\n    }\r\n\r\n    onChangeCheckBox = () =>{\r\n        this.setState({\r\n            loginAsBrewer : !this.state.loginAsBrewer\r\n        })\r\n    }\r\n\r\n    onButtonClick = () => {\r\n        let popupUri = './popup.html';\r\n        solidAuth.popupLogin({ popupUri }).then(() => {\r\n            solidAuth.currentSession().then( session => {\r\n                console.log(session);\r\n                this.props.onLoggedIn();\r\n                this.props.history.push(`/profile`)\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let typeLogIn;\r\n        \r\n        if(this.state.loginAsBrewer){\r\n            typeLogIn = <p>Brewer</p>\r\n        }else{\r\n            typeLogIn = <p>Beer Drinker</p>\r\n        }\r\n\r\n\r\n        return(\r\n            <section id = {this.state.loginAsBrewer ? \"logInBrewer\" : \"logInBeerDrinker\"}>\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" onChange= {this.onChangeCheckBox}/>\r\n                    <span className=\"slider\"></span>\r\n                </label>\r\n\r\n                {typeLogIn}\r\n                <button onClick = {this.onButtonClick}>Log in</button>\r\n                <p><a href= \"https://inrupt.net\">register</a></p>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LogIn;\r\n","import React from 'react';\r\n\r\nclass Groups extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <h1>\r\n                Groups\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Groups;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Friends extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputText : \"https://ozcanseker.inrupt.net/profile/card#me\",\r\n            error : undefined\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            inputText: e.target.value\r\n        })        \r\n    }\r\n\r\n    onButtonClick = () => {\r\n        this.props.solidCommunicator.getUserFile(this.state.inputText, (res, error) => {\r\n\r\n            if(error){\r\n                this.setState({\r\n                    error : error\r\n                })\r\n            }else{\r\n                this.props.history.push({\r\n                    pathname:\"/user\",\r\n                    state:{\r\n                        result: res\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let friends = this.props.user.getFriends();        \r\n        let friendsElements = friends.map((friend, index) => {\r\n            return <li>\r\n                <Link key = {friend.uri} to= {`/friend/${index}`}>\r\n                    <p>\r\n                        name : {friend.name}\r\n                    </p>\r\n                </Link>\r\n            </li> \r\n        });\r\n\r\n        return(\r\n            <div>\r\n                <h1>\r\n                    Friends\r\n                </h1>\r\n                <br/>\r\n                <input type = \"text\" placeholder =\"profilecard link\" value = {this.state.inputText} onChange = {this.onChange}></input>\r\n                <button onClick = {this.onButtonClick}>Search on the web</button>\r\n\r\n                <p style = {{color: \"red\"}}>{this.state.error}</p>\r\n\r\n                <ul>\r\n                    {friendsElements}\r\n                </ul>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\n\r\n\r\nclass FriendPage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        let friend = this.props.user.getFriendFromIndex(this.props.match.params.id);\r\n\r\n        return (\r\n            <h1>\r\n                {friend.name}\r\n            </h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FriendPage;","import React from 'react';\r\n\r\nclass Friends extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <h1>\r\n                Check-Ins\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport '../css/BeerResults.scss'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass BeerResults extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.list = [\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n            {name: \"Hertog jan\"},\r\n        ]\r\n    }\r\n\r\n\r\n    render(){\r\n        let elements = this.list.map(listItem => {\r\n                return (\r\n                    <li>\r\n                        <Link to = \"/beer/hertogJan\" onClick = {this.props.onLinkClick}>\r\n                            {listItem.name}\r\n                        </Link>\r\n                    </li>\r\n                )\r\n        })\r\n\r\n        return(\r\n            <div>\r\n                <h1>Beer Results</h1>\r\n                <ul>\r\n                    {elements}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerResults;\r\n\r\n","import React from 'react';\r\nimport '../css/Profile.scss'\r\nimport profilePic from '../assets/profilePic.png'\r\n\r\nclass Profile extends React.Component{\r\n    render(){\r\n        let user = this.props.user;\r\n\r\n        return(\r\n            <section className = \"profileScreen\">\r\n                \r\n                <div className=\"row\">\r\n                    <div className=\"leftColum\">\r\n                        <h1>\r\n                            {user.name}\r\n                        </h1>\r\n                        <img src = {user.imageUrl ? user.imageUrl : profilePic} alt = \"\"/>\r\n                        <p>\r\n                            check-ins : {user.beerPoints}\r\n                        </p>\r\n                        <p>\r\n                            reviews : 2\r\n                        </p>\r\n                        <p>\r\n                            Begin date : {user.startDate.toString()}\r\n                        </p>\r\n                        <p>\r\n                            beerbonus points : 15\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <h1>\r\n                            Recent activities\r\n                        </h1>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\nclass User extends React.Component{\r\n\r\n    render(){\r\n        console.log(this.props);\r\n        let result = this.props.location.state.result\r\n\r\n        return(\r\n            <section className = \"home\">\r\n                <h3>\r\n                    {result.name}\r\n                    <button>Send friendship request</button>\r\n                </h3>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport '../css/NavBar.scss'\r\n\r\nclass NavBar extends React.Component{\r\n    onInput = (e) => {\r\n        this.props.onBeerSearch(e.target.value);\r\n    }\r\n\r\n    render(){\r\n        let cldn =React.Children.toArray( this.props.children);\r\n        let input;\r\n\r\n        cldn = cldn.map((child, index) => {            \r\n            if(index !== cldn.length - 1){\r\n                return (\r\n                    <li key = {child.props.to} className = \"navBarOptionContainer\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }else{\r\n                return(\r\n                    <li key = {child.props.to} className = \"navBarOptionContainerLast\">\r\n                        {child}\r\n                    </li>\r\n                )\r\n            }            \r\n        });\r\n\r\n        if(this.props.loggedIn){\r\n            input = (<li className = \"navBarSearch\">\r\n                <input  placeholder = \"search for beers\" value = {this.props.searchQuery} onChange = {this.onInput} />\r\n                <input type = \"button\" value = \"x\" onClick = {this.props.onSearchBarButtonClick}/>\r\n            </li>)\r\n        }\r\n\r\n        return(\r\n            <nav>\r\n                <ul id = \"navBar\">\r\n                    {cldn}\r\n                    {input}\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nclass BeerDetailScreen extends React.Component{\r\n\r\n    render(){\r\n        console.log();\r\n\r\n        return(\r\n            <h1>\r\n               {this.props.match.params.id}\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BeerDetailScreen;\r\n","/**\n * Libs\n */\nimport React from 'react';\nimport solidAuth from 'solid-auth-client'\nimport {Switch, Route, Link, withRouter, Redirect} from \"react-router-dom\";\nimport SolidCommunicator from './network/SolidCommunicator'\n\n/**\n * Imported Pages\n */\nimport Home from './page/Home'\nimport LogIn from './page/LogIn'\nimport Groups from './page/Groups';\nimport Friends from './page/Friends';\nimport FriendsPage from './page/FriendPage';\nimport CheckIns from './page/CheckIns';\nimport BeerResults from './page/BeerResults';\nimport Profile from './page/Profile';\nimport UserPage from './page/User';\nimport Inbox from './page/Inbox';\n\n\n/**\n * Components\n */\nimport NavBar from './component/NavBar';\n\n/**\n * Assests\n */\nimport './css/App.scss';\nimport Knipsel from './assets/Knipsel.png'\nimport Logo from './assets/logo.png'\nimport BeerDetailScreen from './page/BeerDetailScreen';\nimport User from './model/User';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      loggedIn : false,\n      searchQuery : '',\n      userObject: undefined,\n      solidCommunicator : undefined\n    }\n  }\n\n  componentDidMount(){\n    this.checkLoggedIn();\n  }\n\n  clearSearchQuery = () => {\n      this.setState({\n        searchQuery : ''\n      },)\n  }\n\n  checkLoggedIn = () => {\n    solidAuth.currentSession().then( session => {\n      if(session){\n\n        //make new user\n        let user = new User(session.webId);\n        user.subscribe(this);\n\n        SolidCommunicator.build(user).then(obj => {\n          this.setState({\n            userObject : obj.user,\n            solidCommunicator : obj.solidCommunicator, \n            loggedIn: true,\n          })\n        });\n\n        this.props.history.push(`/profile`)\n      }\n    })\n  }\n\n  onClickLogOut = () => {\n    solidAuth.logout();\n\n    this.setState({\n      loggedIn : false,\n      userObject : undefined\n    });\n  }\n\n  onLoggedIn = () => {\n    this.checkLoggedIn();\n  }\n\n  onBeerSearch = (text) => {\n    let location = this.props.location.pathname;\n\n    this.setState({\n      searchQuery : text\n    })\n\n    if(text){\n      if(location !== \"/beerresults\"){\n        this.props.history.push(\"/beerresults\");\n      }\n\n      /**\n       * Vindt hier de bier\n       */\n    }else{\n      this.props.history.goBack();\n    }\n  }\n\n\n  render(){\n    let navBar;\n\n    if(this.state.loggedIn){\n      navBar = (\n         <NavBar onSearchBarButtonClick = {this.onSearchBarButtonClick} \n                 onBeerSearch = {this.onBeerSearch} \n                 loggedIn = {this.state.loggedIn} \n                 searchQuery = {this.state.searchQuery}>\n          <Link to = \"/profile\">Profile</Link>\n          <Link to = \"/checkIns\">Check ins</Link>\n          <Link to = \"/friend\">Friends</Link>\n          <Link to = \"/groups\">Groups</Link>\n          <Link to = \"/\" onClick = {this.onClickLogOut}>Log out</Link>\n        </NavBar>\n      )\n    }else{\n      navBar = (\n         <NavBar onBeerSearch = {this.onBeerSearch} loggedIn = {this.state.loggedIn}>\n          <Link to = \"/LogIn\">Log in</Link>\n        </NavBar>\n      )\n    }\n\n    return (\n      <div id = \"AppRoot\">\n        <header>\n          <Link to = \"/\">\n            <div>\n              <img src= {Logo} alt = \"\"/>\n              <h1>\n              Linked social beer\n              </h1>\n           </div>\n          </Link>\n        </header>\n\n        {navBar}\n          <Switch>\n              <Route exact path=\"/\" component={Home} isLoggedIn = {this.state.loggedIn}/>\n              <PrivateRoute path=\"/user\" component={UserPage} isLoggedIn = {this.state.loggedIn}/> \n              <PrivateRoute path=\"/beer/:id\" component={BeerDetailScreen} isLoggedIn = {this.state.loggedIn}/> \n              <PrivateRoute path=\"/friend/:id\" component={FriendsPage} isLoggedIn = {this.state.loggedIn} user = {this.state.userObject}/>                       \n              <PrivateRoute exact path=\"/friend\" component={Friends} isLoggedIn = {this.state.loggedIn} user = {this.state.userObject} solidCommunicator = {this.state.solidCommunicator}/>\n              <PrivateRoute path=\"/beerresults\" component={BeerResults} isLoggedIn = {this.state.loggedIn} onLinkClick = {this.clearSearchQuery}/>\n              <PrivateRoute path=\"/groups\" component={Groups} isLoggedIn = {this.state.loggedIn}/>\n              <PrivateRoute path='/profile' component={Profile} isLoggedIn = {this.state.loggedIn} user = {this.state.userObject}/>\n              <PrivateRoute path='/checkIns' component={CheckIns} isLoggedIn = {this.state.loggedIn}/>\n              <PrivateRoute path='/inbox' component={Inbox} isLoggedIn = {this.state.loggedIn}/>\n              <PrivateRouteLogIn path=\"/login\" component={LogIn} isLoggedIn = {this.state.loggedIn} onLoggedIn = {this.onLoggedIn}/>\n          </Switch>\n          <footer>\n            <span>\n              This application is powered by\n            </span>\n              <a href=\"https://solid.inrupt.com\">\n              <img alt = \"Solid inrupt\" src={Knipsel} /> \n            </a>\n          </footer>\n      </div>\n    );\n  }\n}\n\nconst PrivateRoute = ({ component: Component, isLoggedIn ,...rest }) => (\n  <Route {...rest} render={(props) => (\n    isLoggedIn\n    ?   <Component {...props} {...rest}/>\n    : <Redirect to='/' />\n  )} />\n)\n\nconst PrivateRouteLogIn = ({ component: Component, isLoggedIn, onLoggedIn ,...rest }) => (\n  <Route {...rest} render={(props) => (\n    !isLoggedIn\n      ? <Component onLoggedIn = {onLoggedIn} {...props} />\n      : <Redirect to='/profile' />\n  )} />\n)\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Knipsel.4dafcfef.png\";"],"sourceRoot":""}